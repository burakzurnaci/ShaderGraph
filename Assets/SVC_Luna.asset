%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: -777816280, guid: bb6b0dc0aac640144b5221abbd38ddbf, type: 3}
  m_Name: SVC_Luna
  m_EditorClassIdentifier: 
  _svcLunaVersion: 1
  _shaderVariants:
  - shader: {fileID: 66, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - SHADOWS_SPLIT_SPHERES
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - SHADOWS_SINGLE_CASCADE
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - SHADOWS_SINGLE_CASCADE
    - SHADOWS_SPLIT_SPHERES
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords: []
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SHADOWS_SPLIT_SPHERES
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SHADOWS_SINGLE_CASCADE
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 1
    upToDate: 1
    keywords:
    - SHADOWS_SINGLE_CASCADE
    - SHADOWS_SPLIT_SPHERES
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 2
    upToDate: 1
    keywords: []
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 2
    upToDate: 1
    keywords:
    - SHADOWS_SPLIT_SPHERES
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 2
    upToDate: 1
    keywords:
    - SHADOWS_SINGLE_CASCADE
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 2
    upToDate: 1
    keywords:
    - SHADOWS_SINGLE_CASCADE
    - SHADOWS_SPLIT_SPHERES
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 3
    upToDate: 1
    keywords: []
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 3
    upToDate: 1
    keywords:
    - SHADOWS_SPLIT_SPHERES
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 3
    upToDate: 1
    keywords:
    - SHADOWS_SINGLE_CASCADE
  - shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 3
    upToDate: 1
    keywords:
    - SHADOWS_SINGLE_CASCADE
    - SHADOWS_SPLIT_SPHERES
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_ALPHACLIP
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - UNITY_UI_ALPHACLIP
    - UNITY_UI_CLIP_RECT
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _MIXED_LIGHTING_SUBTRACTIVE
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS_VERTEX
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS
    - _MIXED_LIGHTING_SUBTRACTIVE
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS_VERTEX
    - _MIXED_LIGHTING_SUBTRACTIVE
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 8
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 4800000, guid: e6e9a19c3678ded42a3bc431ebef7dbd, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: -6465566751694194690, guid: 28bc957708b2085419bf22cbde4c0c3f, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS_VERTEX
  - shader: {fileID: -6465566751694194690, guid: 28bc957708b2085419bf22cbde4c0c3f, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS
  - shader: {fileID: -6465566751694194690, guid: 28bc957708b2085419bf22cbde4c0c3f, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _ADDITIONAL_OFF
  - shader: {fileID: -6465566751694194690, guid: 28bc957708b2085419bf22cbde4c0c3f, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS_VERTEX
    - _MIXED_LIGHTING_SUBTRACTIVE
  - shader: {fileID: -6465566751694194690, guid: 28bc957708b2085419bf22cbde4c0c3f, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _ADDITIONAL_LIGHTS
    - _MIXED_LIGHTING_SUBTRACTIVE
  - shader: {fileID: -6465566751694194690, guid: 28bc957708b2085419bf22cbde4c0c3f, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _ADDITIONAL_OFF
    - _MIXED_LIGHTING_SUBTRACTIVE
  - shader: {fileID: -6465566751694194690, guid: 28bc957708b2085419bf22cbde4c0c3f, type: 3}
    passType: 8
    passId: 1
    subShaderIndex: 0
    upToDate: 1
    keywords: []
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _SUNDISK_NONE
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _SUNDISK_SIMPLE
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 1
    keywords:
    - _SUNDISK_HIGH_QUALITY
  _usedByLunaBuild:
  - shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _SUNDISK_SIMPLE
  - shader: {fileID: -6465566751694194690, guid: 28bc957708b2085419bf22cbde4c0c3f, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _ADDITIONAL_OFF
  - shader: {fileID: 4800000, guid: 0406db5a14f94604a8c57ccfbc9f3b46, type: 3}
    passType: 0
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shader: {fileID: -6465566751694194690, guid: 35e9a382f32a878459f239e3c891bb06, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _ADDITIONAL_OFF
  - shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords: []
  - shader: {fileID: -6465566751694194690, guid: 28bc957708b2085419bf22cbde4c0c3f, type: 3}
    passType: 13
    passId: 0
    subShaderIndex: 0
    upToDate: 0
    keywords:
    - _ADDITIONAL_LIGHTS_VERTEX
  _includedShaderVariants: []
  _excludedShaderVariants: []
  version: 278
  _shaderParsedShaders:
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy
            + _MainTex_ST.zw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _Color;\nuniform highp sampler2D _MainTex;\nvarying
            highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid
            main()\n{\n    u_xlat0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0
            = u_xlat0 * _Color;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags: []
        definedKeywords: []
        keywordGroups: []
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags: []
        UsePass: 0
      Tags: []
      SerializedPassCount: 1
      UsePass: 0
    Shader: {fileID: 66, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants: []
        definedKeywords: []
        keywordGroups: []
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags: []
        UsePass: 0
      Tags: []
      SerializedPassCount: 1
      UsePass: 0
    Shader: {fileID: 17, guid: 0000000000000000e000000000000000, type: 0}
    ShaderPath: Library/unity default resources
    ShaderDefinedKeywords: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 _LightSplitsNear;\nuniform
            \tvec4 _LightSplitsFar;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp
            vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbvec4 u_xlatb1;\nvec4
            u_xlat2;\nbvec4 u_xlatb2;\nvec3 u_xlat3;\nmediump float u_xlat16_4;\nfloat
            u_xlat5;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0.x = texture2D(_CameraDepthTexture,
            vs_TEXCOORD0.xy).x;\n    u_xlat5 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;\n   
            u_xlat5 = float(1.0) / u_xlat5;\n    u_xlat10 = (-u_xlat5) + u_xlat0.x;\n   
            u_xlat5 = unity_OrthoParams.w * u_xlat10 + u_xlat5;\n    u_xlat1.xyz
            = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n    u_xlat0.xzw = u_xlat0.xxx
            * u_xlat1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat0.xzw = (-vs_TEXCOORD1.xyz)
            * vec3(u_xlat5) + u_xlat0.xzw;\n    u_xlat1.xyz = vec3(u_xlat5) * vs_TEXCOORD1.xyz;\n   
            u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;\n   
            u_xlatb1 = greaterThanEqual(u_xlat0.zzzz, _LightSplitsNear);\n    u_xlat1.x
            = u_xlatb1.x ? float(1.0) : 0.0;\n    u_xlat1.y = u_xlatb1.y ? float(1.0)
            : 0.0;\n    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;\n    u_xlat1.w
            = u_xlatb1.w ? float(1.0) : 0.0;\n;\n    u_xlatb2 = lessThan(u_xlat0.zzzz,
            _LightSplitsFar);\n    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;\n   
            u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;\n    u_xlat2.z = u_xlatb2.z
            ? float(1.0) : 0.0;\n    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;\n;\n   
            u_xlat16_1 = u_xlat1 * u_xlat2;\n    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n   
            u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat2.xyz
            = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;\n   
            u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat3.xyz;\n    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat3.xyz;\n    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz
            + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat3.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www
            + u_xlat2.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n   
            u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_4 = (-_LightShadowData.x)
            + 1.0;\n    u_xlat16_4 = (u_xlatb0) ? 0.0 : u_xlat16_4;\n    SV_Target0
            = vec4(u_xlat16_4) + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 unity_ShadowSplitSpheres[4];\nuniform
            \tvec4 unity_ShadowSplitSqRadii;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp
            vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nfloat u_xlat8;\nvoid main()\n{\n   
            u_xlat0.x = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n    u_xlat4
            = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;\n    u_xlat4 = float(1.0)
            / u_xlat4;\n    u_xlat8 = (-u_xlat4) + u_xlat0.x;\n    u_xlat4 = unity_OrthoParams.w
            * u_xlat8 + u_xlat4;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n   
            u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat0.xzw
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat4) + u_xlat0.xzw;\n    u_xlat1.xyz
            = vec3(u_xlat4) * vs_TEXCOORD1.xyz;\n    u_xlat0.xyz = unity_OrthoParams.www
            * u_xlat0.xzw + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat1.xyz
            = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);\n    u_xlat1.x =
            dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);\n   
            u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[2].xyz);\n    u_xlat1.z = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);\n   
            u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlatb1 = lessThan(u_xlat1,
            unity_ShadowSplitSqRadii);\n    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0)
            : float(-0.0);\n    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);\n   
            u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);\n    u_xlat1.x
            = u_xlatb1.x ? float(1.0) : 0.0;\n    u_xlat1.y = u_xlatb1.y ? float(1.0)
            : 0.0;\n    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;\n    u_xlat1.w
            = u_xlatb1.w ? float(1.0) : 0.0;\n;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            + u_xlat1.yzw;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0,
            0.0));\n    u_xlat5.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n   
            u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx +
            u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz
            * u_xlat0.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;\n   
            u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx
            + u_xlat5.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy
            + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz
            + u_xlat1.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n   
            u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_3.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat16_3.x = (u_xlatb0) ? 0.0 : u_xlat16_3.x;\n    SV_Target0
            = u_xlat16_3.xxxx + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp
            vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat3;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.x = texture2D(_CameraDepthTexture,
            vs_TEXCOORD0.xy).x;\n    u_xlat3 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;\n   
            u_xlat3 = float(1.0) / u_xlat3;\n    u_xlat6 = (-u_xlat3) + u_xlat0.x;\n   
            u_xlat3 = unity_OrthoParams.w * u_xlat6 + u_xlat3;\n    u_xlat1.xyz =
            (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n    u_xlat0.xzw = u_xlat0.xxx
            * u_xlat1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat0.xzw = (-vs_TEXCOORD1.xyz)
            * vec3(u_xlat3) + u_xlat0.xzw;\n    u_xlat1.xyz = vec3(u_xlat3) * vs_TEXCOORD1.xyz;\n   
            u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat1.xyz
            = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz +
            u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_2 =
            (-_LightShadowData.x) + 1.0;\n    u_xlat16_2 = (u_xlatb0) ? 0.0 : u_xlat16_2;\n   
            SV_Target0 = vec4(u_xlat16_2) + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_SINGLE_CASCADE
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp
            vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nfloat u_xlat3;\nfloat
            u_xlat6;\nvoid main()\n{\n    u_xlat0.x = texture2D(_CameraDepthTexture,
            vs_TEXCOORD0.xy).x;\n    u_xlat3 = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;\n   
            u_xlat3 = float(1.0) / u_xlat3;\n    u_xlat6 = (-u_xlat3) + u_xlat0.x;\n   
            u_xlat3 = unity_OrthoParams.w * u_xlat6 + u_xlat3;\n    u_xlat1.xyz =
            (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n    u_xlat0.xzw = u_xlat0.xxx
            * u_xlat1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat0.xzw = (-vs_TEXCOORD1.xyz)
            * vec3(u_xlat3) + u_xlat0.xzw;\n    u_xlat1.xyz = vec3(u_xlat3) * vs_TEXCOORD1.xyz;\n   
            u_xlat0.xyz = unity_OrthoParams.www * u_xlat0.xzw + u_xlat1.xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat1.xyz
            = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n    u_xlat1.xyz
            = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat0.zzz +
            u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_2 =
            (-_LightShadowData.x) + 1.0;\n    u_xlat16_2 = (u_xlatb0) ? 0.0 : u_xlat16_2;\n   
            SV_Target0 = vec4(u_xlat16_2) + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - SHADOWS_SINGLE_CASCADE
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow
        definedKeywords:
        - SHADOWS_SPLIT_SPHERES
        - SHADOWS_SINGLE_CASCADE
        keywordGroups:
        - Keywords: []
        - Keywords:
          - SHADOWS_SPLIT_SPHERES
        - Keywords:
          - SHADOWS_SINGLE_CASCADE
        - Keywords:
          - SHADOWS_SPLIT_SPHERES
          - SHADOWS_SINGLE_CASCADE
        ContainsInvalidVariant: 0
        HasDepthReader: 1
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: SHADOWMAPFILTER
          Value: HardShadow
        UsePass: 0
      Tags:
      - Key: SHADOWMAPFILTER
        Value: HardShadow
      SerializedPassCount: 1
      UsePass: 0
    - Index: 1
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 _LightSplitsNear;\nuniform
            \tvec4 _LightSplitsFar;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec4 u_xlat16_1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nbvec4 u_xlatb2;\nvec3
            u_xlat3;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat0.z =
            texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n    u_xlat0.xy =
            vs_TEXCOORD0.zw;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0)
            + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx +
            u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz
            + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;\n    u_xlatb1 = greaterThanEqual((-u_xlat0.zzzz),
            _LightSplitsNear);\n    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;\n   
            u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;\n    u_xlat1.z = u_xlatb1.z
            ? float(1.0) : 0.0;\n    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;\n;\n   
            u_xlatb2 = lessThan((-u_xlat0.zzzz), _LightSplitsFar);\n    u_xlat2.x
            = u_xlatb2.x ? float(1.0) : 0.0;\n    u_xlat2.y = u_xlatb2.y ? float(1.0)
            : 0.0;\n    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;\n    u_xlat2.w
            = u_xlatb2.w ? float(1.0) : 0.0;\n;\n    u_xlat16_1 = u_xlat1 * u_xlat2;\n   
            u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat2;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat2.xyz
            = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;\n   
            u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat3.xyz;\n    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat3.xyz;\n    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz
            + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat3.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www
            + u_xlat2.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n   
            u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_4 = (-_LightShadowData.x)
            + 1.0;\n    u_xlat16_4 = (u_xlatb0) ? 0.0 : u_xlat16_4;\n    SV_Target0
            = vec4(u_xlat16_4) + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 4
          PassId: 0
          SubShaderIndex: 1
          Keywords: []
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow_FORCE_INV_PROJECTION_IN_PS
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 unity_ShadowSplitSpheres[4];\nuniform
            \tvec4 unity_ShadowSplitSqRadii;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nbvec4
            u_xlatb1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat5;\nvoid
            main()\n{\n    u_xlat0.z = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n   
            u_xlat0.xy = vs_TEXCOORD0.zw;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0,
            2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx +
            u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz
            + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2]
            * (-u_xlat0.zzzz) + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n   
            u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);\n   
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[1].xyz);\n    u_xlat1.y = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);\n   
            u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[3].xyz);\n    u_xlat1.w = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);\n   
            u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_3.y
            = (u_xlatb1.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_3.z = (u_xlatb1.z)
            ? float(-1.0) : float(-0.0);\n    u_xlat1.x = u_xlatb1.x ? float(1.0)
            : 0.0;\n    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;\n    u_xlat1.z
            = u_xlatb1.z ? float(1.0) : 0.0;\n    u_xlat1.w = u_xlatb1.w ? float(1.0)
            : 0.0;\n;\n    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;\n    u_xlat16_3.xyz
            = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat5.xyz = u_xlat0.yyy
            * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz
            * u_xlat0.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz
            * u_xlat0.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;\n   
            u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx
            + u_xlat5.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy
            + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz
            + u_xlat1.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n   
            u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_3.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat16_3.x = (u_xlatb0) ? 0.0 : u_xlat16_3.x;\n    SV_Target0
            = u_xlat16_3.xxxx + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 5
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow_FORCE_INV_PROJECTION_IN_PS
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump
            float u_xlat16_2;\nvoid main()\n{\n    u_xlat0.z = texture2D(_CameraDepthTexture,
            vs_TEXCOORD0.xy).x;\n    u_xlat0.xy = vs_TEXCOORD0.zw;\n    u_xlat0.xyz
            = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz +
            u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2]
            * (-u_xlat0.zzzz) + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n   
            u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_2 =
            (-_LightShadowData.x) + 1.0;\n    u_xlat16_2 = (u_xlatb0) ? 0.0 : u_xlat16_2;\n   
            SV_Target0 = vec4(u_xlat16_2) + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 6
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - SHADOWS_SINGLE_CASCADE
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow_FORCE_INV_PROJECTION_IN_PS
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform highp sampler2D _CameraDepthTexture;\nuniform
            highp sampler2D _ShadowMapTexture;\nvarying highp vec4 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump
            float u_xlat16_2;\nvoid main()\n{\n    u_xlat0.z = texture2D(_CameraDepthTexture,
            vs_TEXCOORD0.xy).x;\n    u_xlat0.xy = vs_TEXCOORD0.zw;\n    u_xlat0.xyz
            = u_xlat0.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz +
            u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2]
            * (-u_xlat0.zzzz) + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n   
            u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat16_2 =
            (-_LightShadowData.x) + 1.0;\n    u_xlat16_2 = (u_xlatb0) ? 0.0 : u_xlat16_2;\n   
            SV_Target0 = vec4(u_xlat16_2) + _LightShadowData.xxxx;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 7
          PassId: 0
          SubShaderIndex: 1
          Keywords:
          - SHADOWS_SINGLE_CASCADE
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: HardShadow_FORCE_INV_PROJECTION_IN_PS
        definedKeywords:
        - SHADOWS_SPLIT_SPHERES
        - SHADOWS_SINGLE_CASCADE
        keywordGroups:
        - Keywords: []
        - Keywords:
          - SHADOWS_SPLIT_SPHERES
        - Keywords:
          - SHADOWS_SINGLE_CASCADE
        - Keywords:
          - SHADOWS_SPLIT_SPHERES
          - SHADOWS_SINGLE_CASCADE
        ContainsInvalidVariant: 0
        HasDepthReader: 1
        Id: 0
        SubShaderIndex: 1
        SerializedObjectId: 0
        Tags:
        - Key: SHADOWMAPFILTER
          Value: HardShadow_FORCE_INV_PROJECTION_IN_PS
        UsePass: 0
      Tags:
      - Key: SHADOWMAPFILTER
        Value: HardShadow_FORCE_INV_PROJECTION_IN_PS
      SerializedPassCount: 1
      UsePass: 0
    - Index: 2
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 _LightSplitsNear;\nuniform
            \tvec4 _LightSplitsFar;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump
            vec4 u_xlat16_1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nbvec4 u_xlatb2;\nvec3
            u_xlat3;\nmediump float u_xlat16_4;\nfloat u_xlat5;\nvec2 u_xlat7;\nfloat
            u_xlat10;\nvec2 u_xlat11;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n   
            u_xlat0.x = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n    u_xlat5
            = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;\n    u_xlat5 = float(1.0)
            / u_xlat5;\n    u_xlat10 = (-u_xlat5) + u_xlat0.x;\n    u_xlat5 = unity_OrthoParams.w
            * u_xlat10 + u_xlat5;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n   
            u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat0.xzw
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat5) + u_xlat0.xzw;\n    u_xlat1.xyz
            = vec3(u_xlat5) * vs_TEXCOORD1.xyz;\n    u_xlat0.xyz = unity_OrthoParams.www
            * u_xlat0.xzw + u_xlat1.xyz;\n    u_xlatb1 = greaterThanEqual(u_xlat0.zzzz,
            _LightSplitsNear);\n    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;\n   
            u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;\n    u_xlat1.z = u_xlatb1.z
            ? float(1.0) : 0.0;\n    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;\n;\n   
            u_xlatb2 = lessThan(u_xlat0.zzzz, _LightSplitsFar);\n    u_xlat2.x =
            u_xlatb2.x ? float(1.0) : 0.0;\n    u_xlat2.y = u_xlatb2.y ? float(1.0)
            : 0.0;\n    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;\n    u_xlat2.w
            = u_xlatb2.w ? float(1.0) : 0.0;\n;\n    u_xlat16_1 = u_xlat1 * u_xlat2;\n   
            u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat2;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat2.xyz
            = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;\n   
            u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat3.xyz;\n    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat3.xyz;\n    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz
            + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat3.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www
            + u_xlat2.xyz;\n    u_xlat1.z = 0.0;\n    u_xlat1.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat2 = u_xlat0.xyxy + u_xlat1.zwxy;\n    u_xlat15 = texture2D(_ShadowMapTexture,
            u_xlat2.zw).x;\n    u_xlatb15 = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15)
            ? 0.0 : 1.0;\n    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n   
            u_xlatb2.x = u_xlat2.x<u_xlat0.z;\n    u_xlat2.x = (u_xlatb2.x) ? 0.0
            : 1.0;\n    u_xlat16_4 = u_xlat15 + u_xlat2.x;\n    u_xlat1 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat0.xyxy;\n    u_xlat15 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat1.zw).x;\n   
            u_xlatb2.x = u_xlat2.x<u_xlat0.z;\n    u_xlat2.x = (u_xlatb2.x) ? 0.0
            : 1.0;\n    u_xlatb15 = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15)
            ? 0.0 : 1.0;\n    u_xlat16_4 = u_xlat15 + u_xlat16_4;\n    u_xlat1.x
            = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat1.y = float(0.0);\n   
            u_xlat11.y = float(0.0);\n    u_xlat7.xy = u_xlat0.xy + u_xlat1.xy;\n   
            u_xlat15 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlatb15
            = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15) ? 0.0 : 1.0;\n    u_xlat16_4
            = u_xlat15 + u_xlat16_4;\n    u_xlat15 = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb15 = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15)
            ? 0.0 : 1.0;\n    u_xlat16_4 = u_xlat15 + u_xlat16_4;\n    u_xlat11.x
            = _ShadowMapTexture_TexelSize.x;\n    u_xlat7.xy = u_xlat0.xy + u_xlat11.xy;\n   
            u_xlat15 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlatb15
            = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15) ? 0.0 : 1.0;\n    u_xlat16_4
            = u_xlat15 + u_xlat16_4;\n    u_xlat16_4 = u_xlat2.x + u_xlat16_4;\n   
            u_xlat2.x = 0.0;\n    u_xlat2.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat2.xy = u_xlat0.xy + u_xlat2.xy;\n    u_xlat15 = texture2D(_ShadowMapTexture,
            u_xlat2.xy).x;\n    u_xlatb15 = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15)
            ? 0.0 : 1.0;\n    u_xlat16_4 = u_xlat15 + u_xlat16_4;\n    u_xlat0.xy
            = u_xlat0.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat0.x =
            (u_xlatb0) ? 0.0 : 1.0;\n    u_xlat16_4 = u_xlat0.x + u_xlat16_4;\n   
            u_xlat16_4 = u_xlat16_4 * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = vec4(u_xlat16_4) * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 8
          PassId: 0
          SubShaderIndex: 2
          Keywords: []
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 unity_ShadowSplitSpheres[4];\nuniform
            \tvec4 unity_ShadowSplitSqRadii;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec3
            u_xlat2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nvec3 u_xlat5;\nfloat
            u_xlat8;\nvec2 u_xlat10;\nfloat u_xlat12;\nbool u_xlatb12;\nvoid main()\n{\n   
            u_xlat0.x = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n    u_xlat4
            = _ZBufferParams.x * u_xlat0.x + _ZBufferParams.y;\n    u_xlat4 = float(1.0)
            / u_xlat4;\n    u_xlat8 = (-u_xlat4) + u_xlat0.x;\n    u_xlat4 = unity_OrthoParams.w
            * u_xlat8 + u_xlat4;\n    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n   
            u_xlat0.xzw = u_xlat0.xxx * u_xlat1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat0.xzw
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat4) + u_xlat0.xzw;\n    u_xlat1.xyz
            = vec3(u_xlat4) * vs_TEXCOORD1.xyz;\n    u_xlat0.xyz = unity_OrthoParams.www
            * u_xlat0.xzw + u_xlat1.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat0.zzzz + u_xlat1;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat1.xyz
            = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);\n    u_xlat1.x =
            dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[1].xyz);\n   
            u_xlat1.y = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[2].xyz);\n    u_xlat1.z = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[3].xyz);\n   
            u_xlat1.w = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlatb1 = lessThan(u_xlat1,
            unity_ShadowSplitSqRadii);\n    u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0)
            : float(-0.0);\n    u_xlat16_3.y = (u_xlatb1.y) ? float(-1.0) : float(-0.0);\n   
            u_xlat16_3.z = (u_xlatb1.z) ? float(-1.0) : float(-0.0);\n    u_xlat1.x
            = u_xlatb1.x ? float(1.0) : 0.0;\n    u_xlat1.y = u_xlatb1.y ? float(1.0)
            : 0.0;\n    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;\n    u_xlat1.w
            = u_xlatb1.w ? float(1.0) : 0.0;\n;\n    u_xlat16_3.xyz = u_xlat16_3.xyz
            + u_xlat1.yzw;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0,
            0.0));\n    u_xlat5.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n   
            u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx +
            u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz
            * u_xlat0.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;\n   
            u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx
            + u_xlat5.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy
            + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz
            + u_xlat1.xyz;\n    u_xlat1.z = 0.0;\n    u_xlat1.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat1 = u_xlat0.xyxy + u_xlat1;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.zw).x;\n   
            u_xlatb1.x = u_xlat1.x<u_xlat0.z;\n    u_xlat1.x = (u_xlatb1.x) ? 0.0
            : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat1.x;\n    u_xlat1 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat0.xyxy;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.zw).x;\n   
            u_xlatb1.x = u_xlat1.x<u_xlat0.z;\n    u_xlat1.x = (u_xlatb1.x) ? 0.0
            : 1.0;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat2.x
            = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat2.y = float(0.0);\n   
            u_xlat10.y = float(0.0);\n    u_xlat5.xy = u_xlat0.xy + u_xlat2.xy;\n   
            u_xlat12 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlatb12
            = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12) ? 0.0 : 1.0;\n    u_xlat16_3.x
            = u_xlat12 + u_xlat16_3.x;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat10.x
            = _ShadowMapTexture_TexelSize.x;\n    u_xlat5.xy = u_xlat0.xy + u_xlat10.xy;\n   
            u_xlat12 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlatb12
            = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12) ? 0.0 : 1.0;\n    u_xlat16_3.x
            = u_xlat12 + u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat1.x + u_xlat16_3.x;\n   
            u_xlat1.x = 0.0;\n    u_xlat1.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat1.xy = u_xlat0.xy + u_xlat1.xy;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat0.xy
            = u_xlat0.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat0.x =
            (u_xlatb0) ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat0.x + u_xlat16_3.x;\n   
            u_xlat16_3.x = u_xlat16_3.x * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = u_xlat16_3.xxxx * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 9
          PassId: 0
          SubShaderIndex: 2
          Keywords:
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbvec2 u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump
            float u_xlat16_3;\nfloat u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nfloat
            u_xlat9;\nvec2 u_xlat10;\nvoid main()\n{\n    u_xlat0.z = 0.0;\n    u_xlat1.x
            = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n    u_xlat5 = _ZBufferParams.x
            * u_xlat1.x + _ZBufferParams.y;\n    u_xlat5 = float(1.0) / u_xlat5;\n   
            u_xlat9 = (-u_xlat5) + u_xlat1.x;\n    u_xlat5 = unity_OrthoParams.w
            * u_xlat9 + u_xlat5;\n    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n   
            u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz + vs_TEXCOORD2.xyz;\n    u_xlat1.xzw
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat5) + u_xlat1.xzw;\n    u_xlat2.xyz
            = vec3(u_xlat5) * vs_TEXCOORD1.xyz;\n    u_xlat1.xyz = unity_OrthoParams.www
            * u_xlat1.xzw + u_xlat2.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n   
            u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat1.xxxx + u_xlat2;\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat1.zzzz + u_xlat2;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat2.xyz
            = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat1.zzz +
            u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat0 = u_xlat0 + u_xlat1.xyxy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat4 = texture2D(_ShadowMapTexture,
            u_xlat0.zw).x;\n    u_xlatb4 = u_xlat4<u_xlat1.z;\n    u_xlat4 = (u_xlatb4)
            ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat4 + u_xlat0.x;\n    u_xlat0 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat1.xyxy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlat0.y = texture2D(_ShadowMapTexture, u_xlat0.zw).x;\n   
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat1.zzzz).xy;\n    u_xlat0.x
            = (u_xlatb0.x) ? float(0.0) : float(1.0);\n    u_xlat0.y = (u_xlatb0.y)
            ? float(0.0) : float(1.0);\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat2.x = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat2.y = float(0.0);\n   
            u_xlat10.y = float(0.0);\n    u_xlat0.xz = u_xlat1.xy + u_xlat2.xy;\n   
            u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xz).x;\n    u_xlatb0.x
            = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x = (u_xlatb0.x) ? 0.0 : 1.0;\n   
            u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat10.x = _ShadowMapTexture_TexelSize.x;\n    u_xlat0.xz = u_xlat1.xy
            + u_xlat10.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xz).x;\n   
            u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x = (u_xlatb0.x) ? 0.0
            : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n    u_xlat16_3 = u_xlat0.y
            + u_xlat16_3;\n    u_xlat0.x = 0.0;\n    u_xlat0.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat1.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat0.xy = u_xlat1.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x
            = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n   
            u_xlat0.x = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat16_3 = u_xlat16_3 * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = vec4(u_xlat16_3) * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 10
          PassId: 0
          SubShaderIndex: 2
          Keywords:
          - SHADOWS_SINGLE_CASCADE
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _ZBufferParams;\nuniform \tvec4 unity_OrthoParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nvec4 u_xlat0;\nbvec2 u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump
            float u_xlat16_3;\nfloat u_xlat4;\nbool u_xlatb4;\nfloat u_xlat5;\nfloat
            u_xlat9;\nvec2 u_xlat10;\nvoid main()\n{\n    u_xlat0.z = 0.0;\n    u_xlat1.x
            = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n    u_xlat5 = _ZBufferParams.x
            * u_xlat1.x + _ZBufferParams.y;\n    u_xlat5 = float(1.0) / u_xlat5;\n   
            u_xlat9 = (-u_xlat5) + u_xlat1.x;\n    u_xlat5 = unity_OrthoParams.w
            * u_xlat9 + u_xlat5;\n    u_xlat2.xyz = (-vs_TEXCOORD2.xyz) + vs_TEXCOORD3.xyz;\n   
            u_xlat1.xzw = u_xlat1.xxx * u_xlat2.xyz + vs_TEXCOORD2.xyz;\n    u_xlat1.xzw
            = (-vs_TEXCOORD1.xyz) * vec3(u_xlat5) + u_xlat1.xzw;\n    u_xlat2.xyz
            = vec3(u_xlat5) * vs_TEXCOORD1.xyz;\n    u_xlat1.xyz = unity_OrthoParams.www
            * u_xlat1.xzw + u_xlat2.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n   
            u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat1.xxxx + u_xlat2;\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[2] * u_xlat1.zzzz + u_xlat2;\n   
            u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat2.xyz
            = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz * u_xlat1.zzz +
            u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat0 = u_xlat0 + u_xlat1.xyxy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat4 = texture2D(_ShadowMapTexture,
            u_xlat0.zw).x;\n    u_xlatb4 = u_xlat4<u_xlat1.z;\n    u_xlat4 = (u_xlatb4)
            ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat4 + u_xlat0.x;\n    u_xlat0 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat1.xyxy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlat0.y = texture2D(_ShadowMapTexture, u_xlat0.zw).x;\n   
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat1.zzzz).xy;\n    u_xlat0.x
            = (u_xlatb0.x) ? float(0.0) : float(1.0);\n    u_xlat0.y = (u_xlatb0.y)
            ? float(0.0) : float(1.0);\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat2.x = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat2.y = float(0.0);\n   
            u_xlat10.y = float(0.0);\n    u_xlat0.xz = u_xlat1.xy + u_xlat2.xy;\n   
            u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xz).x;\n    u_xlatb0.x
            = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x = (u_xlatb0.x) ? 0.0 : 1.0;\n   
            u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat10.x = _ShadowMapTexture_TexelSize.x;\n    u_xlat0.xz = u_xlat1.xy
            + u_xlat10.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xz).x;\n   
            u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x = (u_xlatb0.x) ? 0.0
            : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n    u_xlat16_3 = u_xlat0.y
            + u_xlat16_3;\n    u_xlat0.x = 0.0;\n    u_xlat0.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat1.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat0.xy = u_xlat1.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x
            = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n   
            u_xlat0.x = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat16_3 = u_xlat16_3 * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = vec4(u_xlat16_3) * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 11
          PassId: 0
          SubShaderIndex: 2
          Keywords:
          - SHADOWS_SINGLE_CASCADE
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT
        definedKeywords:
        - SHADOWS_SPLIT_SPHERES
        - SHADOWS_SINGLE_CASCADE
        keywordGroups:
        - Keywords: []
        - Keywords:
          - SHADOWS_SPLIT_SPHERES
        - Keywords:
          - SHADOWS_SINGLE_CASCADE
        - Keywords:
          - SHADOWS_SPLIT_SPHERES
          - SHADOWS_SINGLE_CASCADE
        ContainsInvalidVariant: 0
        HasDepthReader: 1
        Id: 0
        SubShaderIndex: 2
        SerializedObjectId: 0
        Tags:
        - Key: SHADOWMAPFILTER
          Value: PCF_SOFT
        UsePass: 0
      Tags:
      - Key: SHADOWMAPFILTER
        Value: PCF_SOFT
      SerializedPassCount: 1
      UsePass: 0
    - Index: 3
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 _LightSplitsNear;\nuniform
            \tvec4 _LightSplitsFar;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbvec4 u_xlatb1;\nvec4
            u_xlat2;\nbvec4 u_xlatb2;\nvec3 u_xlat3;\nmediump float u_xlat16_4;\nvec2
            u_xlat7;\nvec2 u_xlat11;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n   
            u_xlat0.z = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n    u_xlat0.xy
            = vs_TEXCOORD0.zw;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0, 2.0, 2.0)
            + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx +
            u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz
            + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;\n    u_xlatb1 = greaterThanEqual((-u_xlat0.zzzz),
            _LightSplitsNear);\n    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;\n   
            u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;\n    u_xlat1.z = u_xlatb1.z
            ? float(1.0) : 0.0;\n    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;\n;\n   
            u_xlatb2 = lessThan((-u_xlat0.zzzz), _LightSplitsFar);\n    u_xlat2.x
            = u_xlatb2.x ? float(1.0) : 0.0;\n    u_xlat2.y = u_xlatb2.y ? float(1.0)
            : 0.0;\n    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;\n    u_xlat2.w
            = u_xlatb2.w ? float(1.0) : 0.0;\n;\n    u_xlat16_1 = u_xlat1 * u_xlat2;\n   
            u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat2
            = hlslcc_mtx4x4unity_CameraToWorld[0] * u_xlat0.xxxx + u_xlat2;\n   
            u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2] * (-u_xlat0.zzzz) + u_xlat2;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n    u_xlat2.xyz
            = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n    u_xlat2.xyz
            = hlslcc_mtx4x4unity_WorldToShadow[4].xyz * u_xlat0.xxx + u_xlat2.xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz * u_xlat0.zzz +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat2.xyz = u_xlat16_1.yyy * u_xlat2.xyz;\n   
            u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat3.xyz;\n    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.xxx
            + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat3.xyz;\n    u_xlat2.xyz = u_xlat3.xyz * u_xlat16_1.zzz
            + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat3.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat3.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_1.www
            + u_xlat2.xyz;\n    u_xlat1.z = 0.0;\n    u_xlat1.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat2 = u_xlat0.xyxy + u_xlat1.zwxy;\n    u_xlat15 = texture2D(_ShadowMapTexture,
            u_xlat2.zw).x;\n    u_xlatb15 = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15)
            ? 0.0 : 1.0;\n    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n   
            u_xlatb2.x = u_xlat2.x<u_xlat0.z;\n    u_xlat2.x = (u_xlatb2.x) ? 0.0
            : 1.0;\n    u_xlat16_4 = u_xlat15 + u_xlat2.x;\n    u_xlat1 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat0.xyxy;\n    u_xlat15 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlat2.x = texture2D(_ShadowMapTexture, u_xlat1.zw).x;\n   
            u_xlatb2.x = u_xlat2.x<u_xlat0.z;\n    u_xlat2.x = (u_xlatb2.x) ? 0.0
            : 1.0;\n    u_xlatb15 = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15)
            ? 0.0 : 1.0;\n    u_xlat16_4 = u_xlat15 + u_xlat16_4;\n    u_xlat1.x
            = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat1.y = float(0.0);\n   
            u_xlat11.y = float(0.0);\n    u_xlat7.xy = u_xlat0.xy + u_xlat1.xy;\n   
            u_xlat15 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlatb15
            = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15) ? 0.0 : 1.0;\n    u_xlat16_4
            = u_xlat15 + u_xlat16_4;\n    u_xlat15 = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb15 = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15)
            ? 0.0 : 1.0;\n    u_xlat16_4 = u_xlat15 + u_xlat16_4;\n    u_xlat11.x
            = _ShadowMapTexture_TexelSize.x;\n    u_xlat7.xy = u_xlat0.xy + u_xlat11.xy;\n   
            u_xlat15 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlatb15
            = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15) ? 0.0 : 1.0;\n    u_xlat16_4
            = u_xlat15 + u_xlat16_4;\n    u_xlat16_4 = u_xlat2.x + u_xlat16_4;\n   
            u_xlat2.x = 0.0;\n    u_xlat2.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat2.xy = u_xlat0.xy + u_xlat2.xy;\n    u_xlat15 = texture2D(_ShadowMapTexture,
            u_xlat2.xy).x;\n    u_xlatb15 = u_xlat15<u_xlat0.z;\n    u_xlat15 = (u_xlatb15)
            ? 0.0 : 1.0;\n    u_xlat16_4 = u_xlat15 + u_xlat16_4;\n    u_xlat0.xy
            = u_xlat0.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat0.x =
            (u_xlatb0) ? 0.0 : 1.0;\n    u_xlat16_4 = u_xlat0.x + u_xlat16_4;\n   
            u_xlat16_4 = u_xlat16_4 * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = vec4(u_xlat16_4) * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 12
          PassId: 0
          SubShaderIndex: 3
          Keywords: []
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT_FORCE_INV_PROJECTION_IN_PS
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 unity_ShadowSplitSpheres[4];\nuniform
            \tvec4 unity_ShadowSplitSqRadii;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool
            u_xlatb0;\nvec4 u_xlat1;\nbvec4 u_xlatb1;\nvec3 u_xlat2;\nmediump vec3
            u_xlat16_3;\nvec3 u_xlat5;\nvec2 u_xlat10;\nfloat u_xlat12;\nbool u_xlatb12;\nvoid
            main()\n{\n    u_xlat0.z = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n   
            u_xlat0.xy = vs_TEXCOORD0.zw;\n    u_xlat0.xyz = u_xlat0.xyz * vec3(2.0,
            2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat0.xxxx +
            u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat0.zzzz
            + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat0.xyz = u_xlat0.xyz / u_xlat0.www;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_CameraToWorld[2]
            * (-u_xlat0.zzzz) + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_CameraToWorld[3];\n   
            u_xlat1.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[0].xyz);\n   
            u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[1].xyz);\n    u_xlat1.y = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz + (-unity_ShadowSplitSpheres[2].xyz);\n   
            u_xlat1.z = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat0.xyz
            + (-unity_ShadowSplitSpheres[3].xyz);\n    u_xlat1.w = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n    u_xlatb1 = lessThan(u_xlat1, unity_ShadowSplitSqRadii);\n   
            u_xlat16_3.x = (u_xlatb1.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_3.y
            = (u_xlatb1.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_3.z = (u_xlatb1.z)
            ? float(-1.0) : float(-0.0);\n    u_xlat1.x = u_xlatb1.x ? float(1.0)
            : 0.0;\n    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;\n    u_xlat1.z
            = u_xlatb1.z ? float(1.0) : 0.0;\n    u_xlat1.w = u_xlatb1.w ? float(1.0)
            : 0.0;\n;\n    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat1.yzw;\n    u_xlat16_3.xyz
            = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat5.xyz = u_xlat0.yyy
            * hlslcc_mtx4x4unity_WorldToShadow[5].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[4].xyz
            * u_xlat0.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[6].xyz
            * u_xlat0.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToShadow[7].xyz
            * u_xlat0.www + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat16_3.xxx * u_xlat5.xyz;\n   
            u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat1.xxx
            + u_xlat5.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[9].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[8].xyz * u_xlat0.xxx +
            u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[10].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[11].xyz
            * u_xlat0.www + u_xlat2.xyz;\n    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_3.yyy
            + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToShadow[13].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[12].xyz * u_xlat0.xxx
            + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[14].xyz
            * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToShadow[15].xyz
            * u_xlat0.www + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_3.zzz
            + u_xlat1.xyz;\n    u_xlat1.z = 0.0;\n    u_xlat1.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat1 = u_xlat0.xyxy + u_xlat1;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.zw).x;\n   
            u_xlatb1.x = u_xlat1.x<u_xlat0.z;\n    u_xlat1.x = (u_xlatb1.x) ? 0.0
            : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat1.x;\n    u_xlat1 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat0.xyxy;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlat1.x = texture2D(_ShadowMapTexture, u_xlat1.zw).x;\n   
            u_xlatb1.x = u_xlat1.x<u_xlat0.z;\n    u_xlat1.x = (u_xlatb1.x) ? 0.0
            : 1.0;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat2.x
            = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat2.y = float(0.0);\n   
            u_xlat10.y = float(0.0);\n    u_xlat5.xy = u_xlat0.xy + u_xlat2.xy;\n   
            u_xlat12 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlatb12
            = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12) ? 0.0 : 1.0;\n    u_xlat16_3.x
            = u_xlat12 + u_xlat16_3.x;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat10.x
            = _ShadowMapTexture_TexelSize.x;\n    u_xlat5.xy = u_xlat0.xy + u_xlat10.xy;\n   
            u_xlat12 = texture2D(_ShadowMapTexture, u_xlat5.xy).x;\n    u_xlatb12
            = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12) ? 0.0 : 1.0;\n    u_xlat16_3.x
            = u_xlat12 + u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat1.x + u_xlat16_3.x;\n   
            u_xlat1.x = 0.0;\n    u_xlat1.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat1.xy = u_xlat0.xy + u_xlat1.xy;\n    u_xlat12 = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb12 = u_xlat12<u_xlat0.z;\n    u_xlat12 = (u_xlatb12)
            ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat12 + u_xlat16_3.x;\n    u_xlat0.xy
            = u_xlat0.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0 = u_xlat0.x<u_xlat0.z;\n    u_xlat0.x =
            (u_xlatb0) ? 0.0 : 1.0;\n    u_xlat16_3.x = u_xlat0.x + u_xlat16_3.x;\n   
            u_xlat16_3.x = u_xlat16_3.x * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = u_xlat16_3.xxxx * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 13
          PassId: 0
          SubShaderIndex: 3
          Keywords:
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT_FORCE_INV_PROJECTION_IN_PS
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec2
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump float u_xlat16_3;\nfloat
            u_xlat4;\nbool u_xlatb4;\nvec2 u_xlat10;\nvoid main()\n{\n    u_xlat0.z
            = 0.0;\n    u_xlat1.z = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n   
            u_xlat1.xy = vs_TEXCOORD0.zw;\n    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0,
            2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n   
            u_xlat2 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat1.xxxx +
            u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat1.zzzz
            + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat2 = u_xlat1.yyyy
            * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[2]
            * (-u_xlat1.zzzz) + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_CameraToWorld[3];\n   
            u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat1.xxx +
            u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat0 = u_xlat0 + u_xlat1.xyxy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat4 = texture2D(_ShadowMapTexture,
            u_xlat0.zw).x;\n    u_xlatb4 = u_xlat4<u_xlat1.z;\n    u_xlat4 = (u_xlatb4)
            ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat4 + u_xlat0.x;\n    u_xlat0 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat1.xyxy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlat0.y = texture2D(_ShadowMapTexture, u_xlat0.zw).x;\n   
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat1.zzzz).xy;\n    u_xlat0.x
            = (u_xlatb0.x) ? float(0.0) : float(1.0);\n    u_xlat0.y = (u_xlatb0.y)
            ? float(0.0) : float(1.0);\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat2.x = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat2.y = float(0.0);\n   
            u_xlat10.y = float(0.0);\n    u_xlat0.xz = u_xlat1.xy + u_xlat2.xy;\n   
            u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xz).x;\n    u_xlatb0.x
            = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x = (u_xlatb0.x) ? 0.0 : 1.0;\n   
            u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat10.x = _ShadowMapTexture_TexelSize.x;\n    u_xlat0.xz = u_xlat1.xy
            + u_xlat10.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xz).x;\n   
            u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x = (u_xlatb0.x) ? 0.0
            : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n    u_xlat16_3 = u_xlat0.y
            + u_xlat16_3;\n    u_xlat0.x = 0.0;\n    u_xlat0.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat1.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat0.xy = u_xlat1.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x
            = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n   
            u_xlat0.x = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat16_3 = u_xlat16_3 * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = vec4(u_xlat16_3) * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 14
          PassId: 0
          SubShaderIndex: 3
          Keywords:
          - SHADOWS_SINGLE_CASCADE
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT_FORCE_INV_PROJECTION_IN_PS
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute
            highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nvec3 u_xlat2;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position
            = u_xlat0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw
            = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    u_xlat2.xyz = u_xlat0.yyy *
            hlslcc_mtx4x4unity_CameraInvProjection[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraInvProjection[0].xyz
            * u_xlat0.xxx + u_xlat2.xyz;\n    vs_TEXCOORD0.zw = u_xlat1.zz + u_xlat1.xw;\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_TEXCOORD1.xyz = in_TEXCOORD1.xyz;\n   
            u_xlat1.xyz = u_xlat0.xyz + (-hlslcc_mtx4x4unity_CameraInvProjection[2].xyz);\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[2].xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_CameraInvProjection[3].xyz;\n   
            u_xlat1.w = (-u_xlat1.z);\n    vs_TEXCOORD2.xyz = u_xlat1.xyw;\n    u_xlat0.w
            = (-u_xlat0.z);\n    vs_TEXCOORD3.xyz = u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 hlslcc_mtx4x4unity_CameraInvProjection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_CameraToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform
            \tmediump vec4 _LightShadowData;\nuniform \tvec4 _ShadowMapTexture_TexelSize;\nuniform
            highp sampler2D _CameraDepthTexture;\nuniform highp sampler2D _ShadowMapTexture;\nvarying
            highp vec4 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec2
            u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump float u_xlat16_3;\nfloat
            u_xlat4;\nbool u_xlatb4;\nvec2 u_xlat10;\nvoid main()\n{\n    u_xlat0.z
            = 0.0;\n    u_xlat1.z = texture2D(_CameraDepthTexture, vs_TEXCOORD0.xy).x;\n   
            u_xlat1.xy = vs_TEXCOORD0.zw;\n    u_xlat1.xyz = u_xlat1.xyz * vec3(2.0,
            2.0, 2.0) + vec3(-1.0, -1.0, -1.0);\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_CameraInvProjection[1];\n   
            u_xlat2 = hlslcc_mtx4x4unity_CameraInvProjection[0] * u_xlat1.xxxx +
            u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_CameraInvProjection[2] * u_xlat1.zzzz
            + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_CameraInvProjection[3];\n   
            u_xlat1.xyz = u_xlat1.xyz / u_xlat1.www;\n    u_xlat2 = u_xlat1.yyyy
            * hlslcc_mtx4x4unity_CameraToWorld[1];\n    u_xlat2 = hlslcc_mtx4x4unity_CameraToWorld[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_CameraToWorld[2]
            * (-u_xlat1.zzzz) + u_xlat2;\n    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_CameraToWorld[3];\n   
            u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToShadow[1].xyz;\n   
            u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToShadow[0].xyz * u_xlat1.xxx +
            u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[2].xyz
            * u_xlat1.zzz + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToShadow[3].xyz
            * u_xlat1.www + u_xlat1.xyz;\n    u_xlat0.xyw = (-_ShadowMapTexture_TexelSize.xyy);\n   
            u_xlat0 = u_xlat0 + u_xlat1.xyxy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat4 = texture2D(_ShadowMapTexture,
            u_xlat0.zw).x;\n    u_xlatb4 = u_xlat4<u_xlat1.z;\n    u_xlat4 = (u_xlatb4)
            ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat4 + u_xlat0.x;\n    u_xlat0 = _ShadowMapTexture_TexelSize.xyxy
            * vec4(1.0, -1.0, -1.0, 1.0) + u_xlat1.xyxy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlat0.y = texture2D(_ShadowMapTexture, u_xlat0.zw).x;\n   
            u_xlatb0.xy = lessThan(u_xlat0.xyxx, u_xlat1.zzzz).xy;\n    u_xlat0.x
            = (u_xlatb0.x) ? float(0.0) : float(1.0);\n    u_xlat0.y = (u_xlatb0.y)
            ? float(0.0) : float(1.0);\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat2.x = (-_ShadowMapTexture_TexelSize.x);\n    u_xlat2.y = float(0.0);\n   
            u_xlat10.y = float(0.0);\n    u_xlat0.xz = u_xlat1.xy + u_xlat2.xy;\n   
            u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xz).x;\n    u_xlatb0.x
            = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x = (u_xlatb0.x) ? 0.0 : 1.0;\n   
            u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat1.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat10.x = _ShadowMapTexture_TexelSize.x;\n    u_xlat0.xz = u_xlat1.xy
            + u_xlat10.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture, u_xlat0.xz).x;\n   
            u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x = (u_xlatb0.x) ? 0.0
            : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n    u_xlat16_3 = u_xlat0.y
            + u_xlat16_3;\n    u_xlat0.x = 0.0;\n    u_xlat0.y = _ShadowMapTexture_TexelSize.y;\n   
            u_xlat0.xy = u_xlat0.xy + u_xlat1.xy;\n    u_xlat0.x = texture2D(_ShadowMapTexture,
            u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n    u_xlat0.x
            = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat0.xy = u_xlat1.xy + _ShadowMapTexture_TexelSize.xy;\n    u_xlat0.x
            = texture2D(_ShadowMapTexture, u_xlat0.xy).x;\n    u_xlatb0.x = u_xlat0.x<u_xlat1.z;\n   
            u_xlat0.x = (u_xlatb0.x) ? 0.0 : 1.0;\n    u_xlat16_3 = u_xlat0.x + u_xlat16_3;\n   
            u_xlat16_3 = u_xlat16_3 * 0.111111112;\n    u_xlat0.x = (-_LightShadowData.x)
            + 1.0;\n    u_xlat0 = vec4(u_xlat16_3) * u_xlat0.xxxx + _LightShadowData.xxxx;\n   
            SV_Target0 = u_xlat0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 1
          Index: 15
          PassId: 0
          SubShaderIndex: 3
          Keywords:
          - SHADOWS_SINGLE_CASCADE
          - SHADOWS_SPLIT_SPHERES
          Tags:
          - Key: SHADOWMAPFILTER
            Value: PCF_SOFT_FORCE_INV_PROJECTION_IN_PS
        definedKeywords:
        - SHADOWS_SPLIT_SPHERES
        - SHADOWS_SINGLE_CASCADE
        keywordGroups:
        - Keywords: []
        - Keywords:
          - SHADOWS_SPLIT_SPHERES
        - Keywords:
          - SHADOWS_SINGLE_CASCADE
        - Keywords:
          - SHADOWS_SPLIT_SPHERES
          - SHADOWS_SINGLE_CASCADE
        ContainsInvalidVariant: 0
        HasDepthReader: 1
        Id: 0
        SubShaderIndex: 3
        SerializedObjectId: 0
        Tags:
        - Key: SHADOWMAPFILTER
          Value: PCF_SOFT_FORCE_INV_PROJECTION_IN_PS
        UsePass: 0
      Tags:
      - Key: SHADOWMAPFILTER
        Value: PCF_SOFT_FORCE_INV_PROJECTION_IN_PS
      SerializedPassCount: 1
      UsePass: 0
    Shader: {fileID: 64, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - SHADOWS_SPLIT_SPHERES
    - SHADOWS_SINGLE_CASCADE
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nvec4
            u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0]
            * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2]
            * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0
            = vec4(1.0, 0.0, 1.0, 1.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags: []
        definedKeywords:
        - UNITY_SINGLE_PASS_STEREO
        - STEREO_INSTANCING_ON
        - STEREO_MULTIVIEW_ON
        keywordGroups:
        - Keywords:
          - _
          - UNITY_SINGLE_PASS_STEREO
          - STEREO_INSTANCING_ON
          - STEREO_MULTIVIEW_ON
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags: []
        UsePass: 0
      Tags: []
      SerializedPassCount: 1
      UsePass: 0
    Shader: {fileID: 4800000, guid: e6e9a19c3678ded42a3bc431ebef7dbd, type: 3}
    ShaderPath: Packages/com.unity.render-pipelines.universal/Shaders/Utils/FallbackError.shader
    ShaderDefinedKeywords: []
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants: []
        definedKeywords:
        - DEBUG_DISPLAY
        - _SURFACE_TYPE_TRANSPARENT
        - _BLENDMODE_ALPHA
        - _BLENDMODE_ADD
        - _BLENDMODE_PRE_MULTIPLY
        - _ALPHATEST_ON
        - _ENABLE_FOG_ON_TRANSPARENT
        - _FRESNEL_ON
        - _USERAMP_ON
        - _USEUVOFFSET_ON
        - _DISABLEEROSION_ON
        - _USESOFTALPHA_ON
        - _USEALPHAOVERRIDE_ON
        keywordGroups:
        - Keywords:
          - _
          - DEBUG_DISPLAY
        - Keywords:
          - _
          - _SURFACE_TYPE_TRANSPARENT
        - Keywords:
          - _
          - _BLENDMODE_ALPHA
          - _BLENDMODE_ADD
          - _BLENDMODE_PRE_MULTIPLY
        - Keywords:
          - _
          - _ALPHATEST_ON
        - Keywords:
          - _
          - _ENABLE_FOG_ON_TRANSPARENT
        - Keywords:
          - _
          - _FRESNEL_ON
        - Keywords:
          - _
          - _USERAMP_ON
        - Keywords:
          - _
          - _USEUVOFFSET_ON
        - Keywords:
          - _
          - _DISABLEEROSION_ON
        - Keywords:
          - _
          - _USESOFTALPHA_ON
        - Keywords:
          - _
          - _USEALPHAOVERRIDE_ON
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: LIGHTMODE
          Value: ForwardOnly
        - Key: QUEUE
          Value: Transparent-250
        - Key: RENDERTYPE
          Value: Transparent
        - Key: RENDERPIPELINE
          Value: HDRenderPipeline
        UsePass: 0
      - ShaderVariants: []
        definedKeywords:
        - _SURFACE_TYPE_TRANSPARENT
        - WRITE_MSAA_DEPTH
        - _BLENDMODE_ALPHA
        - _BLENDMODE_ADD
        - _BLENDMODE_PRE_MULTIPLY
        - _ALPHATEST_ON
        - _ENABLE_FOG_ON_TRANSPARENT
        - _DISABLEEROSION_ON
        - _USESOFTALPHA_ON
        - _USEALPHAOVERRIDE_ON
        - _USEUVOFFSET_ON
        keywordGroups:
        - Keywords:
          - _
          - _SURFACE_TYPE_TRANSPARENT
        - Keywords:
          - _
          - _BLENDMODE_ALPHA
          - _BLENDMODE_ADD
          - _BLENDMODE_PRE_MULTIPLY
        - Keywords:
          - _
          - _ALPHATEST_ON
        - Keywords:
          - _
          - _ENABLE_FOG_ON_TRANSPARENT
        - Keywords:
          - _
          - _FRESNEL_ON
        - Keywords:
          - _
          - _USERAMP_ON
        - Keywords:
          - _
          - _USEUVOFFSET_ON
        - Keywords:
          - _
          - _DISABLEEROSION_ON
        - Keywords:
          - _
          - _USESOFTALPHA_ON
        - Keywords:
          - _
          - _USEALPHAOVERRIDE_ON
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 3
        Tags:
        - Key: LIGHTMODE
          Value: DepthForwardOnly
        - Key: QUEUE
          Value: Transparent-250
        - Key: RENDERTYPE
          Value: Transparent
        - Key: RENDERPIPELINE
          Value: HDRenderPipeline
        UsePass: 0
      Tags:
      - Key: QUEUE
        Value: Transparent-250
      - Key: RENDERTYPE
        Value: Transparent
      - Key: RENDERPIPELINE
        Value: HDRenderPipeline
      SerializedPassCount: 4
      UsePass: 0
    Shader: {fileID: 4800000, guid: d985403ea514e7c46bf7c2fab31b9d95, type: 3}
    ShaderPath: Assets/Piloto Studio/Shaders/UberFX.shader
    ShaderDefinedKeywords:
    - DEBUG_DISPLAY
    - _SURFACE_TYPE_TRANSPARENT
    - _BLENDMODE_ALPHA
    - _BLENDMODE_ADD
    - _BLENDMODE_PRE_MULTIPLY
    - _ALPHATEST_ON
    - _ENABLE_FOG_ON_TRANSPARENT
    - _FRESNEL_ON
    - _USERAMP_ON
    - _USEUVOFFSET_ON
    - _DISABLEEROSION_ON
    - _USESOFTALPHA_ON
    - _USEALPHAOVERRIDE_ON
    - WRITE_MSAA_DEPTH
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[32];\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute
            highp vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec3
            vs_TEXCOORD4;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD6;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec4 vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4
            u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump
            vec3 u_xlat16_4;\nfloat u_xlat5;\nint u_xlati5;\nbool u_xlatb5;\nfloat
            u_xlat6;\nvec3 u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nfloat u_xlat19;\nfloat
            u_xlat21;\nint u_xlati21;\nint u_xlati22;\nmediump float u_xlat16_24;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat21,
            1.17549435e-38);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz
            = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat2.xyz = in_TANGENT0.yyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat21 = max(u_xlat21, 1.17549435e-38);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            vs_TEXCOORD2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat2 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat2;\n    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.w
            = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_3.y
            = dot(unity_SHAg, u_xlat1);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);\n   
            u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr,
            u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_4.z
            = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_24 = u_xlat1.y * u_xlat1.y;\n   
            u_xlat16_24 = u_xlat1.x * u_xlat1.x + (-u_xlat16_24);\n    u_xlat16_4.xyz
            = unity_SHC.xyz * vec3(u_xlat16_24) + u_xlat16_4.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat16_24 = min(_AdditionalLightsCount.x,
            unity_LightData.y);\n    u_xlati21 = int(u_xlat16_24);\n    u_xlat16_2.y
            = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    u_xlat16_2.w = float(0.0);\n   
            for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati21 ; u_xlati_loop_1++)\n   
            {\n        u_xlat5 = float(u_xlati_loop_1);\n        u_xlatb12 = u_xlat5<2.0;\n       
            u_xlat16_4.xy = (bool(u_xlatb12)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n       
            u_xlat19 = u_xlat5 + -2.0;\n        u_xlat5 = (u_xlatb12) ? u_xlat5 :
            u_xlat19;\n        u_xlatb5 = u_xlat5<1.0;\n        u_xlat16_24 = (u_xlatb5)
            ? u_xlat16_4.x : u_xlat16_4.y;\n        u_xlati5 = int(u_xlat16_24);\n       
            u_xlat12.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati5].www
            + _AdditionalLightsPosition[u_xlati5].xyz;\n        u_xlat6 = dot(u_xlat12.xyz,
            u_xlat12.xyz);\n        u_xlat6 = max(u_xlat6, 6.10351563e-05);\n       
            u_xlat13 = inversesqrt(u_xlat6);\n        u_xlat12.xyz = u_xlat12.xyz
            * vec3(u_xlat13);\n        u_xlat13 = float(1.0) / u_xlat6;\n       
            u_xlat6 = u_xlat6 * _AdditionalLightsAttenuation[u_xlati5].x + _AdditionalLightsAttenuation[u_xlati5].y;\n       
            u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n        u_xlat6 = u_xlat6 * u_xlat13;\n       
            u_xlat16_24 = dot(_AdditionalLightsSpotDir[u_xlati5].xyz, u_xlat12.xyz);\n       
            u_xlat16_24 = u_xlat16_24 * _AdditionalLightsAttenuation[u_xlati5].z
            + _AdditionalLightsAttenuation[u_xlati5].w;\n        u_xlat16_24 = clamp(u_xlat16_24,
            0.0, 1.0);\n        u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n       
            u_xlat6 = u_xlat16_24 * u_xlat6;\n        u_xlat16_4.xyz = vec3(u_xlat6)
            * _AdditionalLightsColor[u_xlati5].xyz;\n        u_xlat16_24 = dot(u_xlat1.xyz,
            u_xlat12.xyz);\n        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n       
            u_xlat16_2.yzw = u_xlat16_4.xyz * vec3(u_xlat16_24) + u_xlat16_2.yzw;\n   
            }\n    vs_TEXCOORD2.w = in_TANGENT0.w;\n    vs_TEXCOORD3 = in_TEXCOORD0;\n   
            u_xlat16_2.x = 0.0;\n    vs_TEXCOORD7 = u_xlat16_2;\n    vs_TEXCOORD8
            = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;\n   
            vs_TEXCOORD5.xy = vec2(0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec4 _TimeParameters;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 Color_81D75D39;\nuniform \tfloat Vector1_BE84214E;\nuniform \tvec2
            Vector2_FBD048D4;\nuniform \tvec2 Vector2_A6157063;\nuniform \tfloat
            Vector1_B073FC91;\nuniform \tfloat Vector1_53E7ACC2;\nuniform \tfloat
            Vector1_7E8C9118;\nuniform lowp sampler2D Texture2D_44F18FCE;\nuniform
            lowp samplerCube unity_SpecCube0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp
            vec3 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\n#define SV_TARGET0
            gl_FragData[0]\nvec3 u_xlat0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nbvec4
            u_xlatb1;\nvec4 u_xlat2;\nbvec4 u_xlatb2;\nvec4 u_xlat3;\nbvec4 u_xlatb3;\nvec4
            u_xlat4;\nbool u_xlatb4;\nvec2 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec3
            u_xlat10_9;\nvec2 u_xlat10;\nbool u_xlatb10;\nvec2 u_xlat18;\nvec2 u_xlat19;\nbool
            u_xlatb19;\nvec2 u_xlat20;\nint u_xlati20;\nvec2 u_xlat21;\nfloat u_xlat27;\nbool
            u_xlatb27;\nfloat u_xlat28;\nbool u_xlatb28;\nint u_xlati29;\nbool u_xlatb29;\nmediump
            float u_xlat16_33;\nvoid main()\n{\n    u_xlat0.xy = vec2(Vector2_FBD048D4.x,
            Vector2_FBD048D4.y) * _TimeParameters.xx + vs_TEXCOORD3.xy;\n    u_xlat0.xy
            = u_xlat0.xy * vec2(vec2(Vector1_53E7ACC2, Vector1_53E7ACC2));\n    u_xlat18.xy
            = floor(u_xlat0.xy);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat1
            = u_xlat18.xyxy * vec4(289.0, 289.0, 289.0, 289.0);\n    u_xlatb1 = greaterThanEqual(u_xlat1,
            (-u_xlat1.zwzw));\n    u_xlat1.x = (u_xlatb1.x) ? float(289.0) : float(-289.0);\n   
            u_xlat1.y = (u_xlatb1.y) ? float(289.0) : float(-289.0);\n    u_xlat1.z
            = (u_xlatb1.z) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat1.w
            = (u_xlatb1.w) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat19.xy
            = u_xlat18.xy * u_xlat1.zw;\n    u_xlat19.xy = fract(u_xlat19.xy);\n   
            u_xlat1.xy = u_xlat19.xy * u_xlat1.xy;\n    u_xlat19.x = u_xlat1.x *
            34.0 + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat19.x;\n    u_xlat19.x
            = u_xlat1.x * 289.0;\n    u_xlatb19 = u_xlat19.x>=(-u_xlat19.x);\n   
            u_xlat19.xy = (bool(u_xlatb19)) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat1.x = u_xlat19.y * u_xlat1.x;\n    u_xlat1.x
            = fract(u_xlat1.x);\n    u_xlat1.x = u_xlat19.x * u_xlat1.x + u_xlat1.y;\n   
            u_xlat10.x = u_xlat1.x * 34.0 + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat10.x;\n   
            u_xlat10.x = u_xlat1.x * 289.0;\n    u_xlatb10 = u_xlat10.x>=(-u_xlat10.x);\n   
            u_xlat10.xy = (bool(u_xlatb10)) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat1.x = u_xlat10.y * u_xlat1.x;\n    u_xlat1.x
            = fract(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * u_xlat10.x;\n    u_xlat1.x
            = u_xlat1.x * 0.024390243;\n    u_xlat1.x = fract(u_xlat1.x);\n    u_xlat1.xy
            = u_xlat1.xx * vec2(2.0, 2.0) + vec2(-1.0, -0.5);\n    u_xlat10.x = floor(u_xlat1.y);\n   
            u_xlat2.x = (-u_xlat10.x) + u_xlat1.x;\n    u_xlat2.y = abs(u_xlat1.x)
            + -0.5;\n    u_xlat1.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat1.x
            = inversesqrt(u_xlat1.x);\n    u_xlat1.xy = u_xlat1.xx * u_xlat2.xy;\n   
            u_xlat1.x = dot(u_xlat1.xy, u_xlat0.xy);\n    u_xlat2 = u_xlat18.xyxy
            + vec4(0.0, 1.0, 1.0, 0.0);\n    u_xlat3 = u_xlat2 * vec4(289.0, 289.0,
            289.0, 289.0);\n    u_xlatb3 = greaterThanEqual(u_xlat3, (-u_xlat3));\n   
            u_xlat4.x = (u_xlatb3.x) ? float(289.0) : float(-289.0);\n    u_xlat4.y
            = (u_xlatb3.y) ? float(289.0) : float(-289.0);\n    u_xlat4.z = (u_xlatb3.x)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat4.w = (u_xlatb3.y)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat10.xy = u_xlat2.xy
            * u_xlat4.zw;\n    u_xlat10.xy = fract(u_xlat10.xy);\n    u_xlat10.xy
            = u_xlat10.xy * u_xlat4.xy;\n    u_xlat28 = u_xlat10.x * 34.0 + 1.0;\n   
            u_xlat10.x = u_xlat10.x * u_xlat28;\n    u_xlat28 = u_xlat10.x * 289.0;\n   
            u_xlatb28 = u_xlat28>=(-u_xlat28);\n    u_xlat2.xy = (bool(u_xlatb28))
            ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n    u_xlat10.x
            = u_xlat10.x * u_xlat2.y;\n    u_xlat10.x = fract(u_xlat10.x);\n    u_xlat10.x
            = u_xlat2.x * u_xlat10.x + u_xlat10.y;\n    u_xlat19.x = u_xlat10.x *
            34.0 + 1.0;\n    u_xlat10.x = u_xlat10.x * u_xlat19.x;\n    u_xlat19.x
            = u_xlat10.x * 289.0;\n    u_xlatb19 = u_xlat19.x>=(-u_xlat19.x);\n   
            u_xlat19.xy = (bool(u_xlatb19)) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat10.x = u_xlat19.y * u_xlat10.x;\n    u_xlat10.x
            = fract(u_xlat10.x);\n    u_xlat10.x = u_xlat10.x * u_xlat19.x;\n   
            u_xlat10.x = u_xlat10.x * 0.024390243;\n    u_xlat10.x = fract(u_xlat10.x);\n   
            u_xlat10.xy = u_xlat10.xx * vec2(2.0, 2.0) + vec2(-1.0, -0.5);\n    u_xlat19.x
            = floor(u_xlat10.y);\n    u_xlat2.x = (-u_xlat19.x) + u_xlat10.x;\n   
            u_xlat2.y = abs(u_xlat10.x) + -0.5;\n    u_xlat10.x = dot(u_xlat2.xy,
            u_xlat2.xy);\n    u_xlat10.x = inversesqrt(u_xlat10.x);\n    u_xlat10.xy
            = u_xlat10.xx * u_xlat2.xy;\n    u_xlat4 = u_xlat0.xyxy + vec4(-0.0,
            -1.0, -1.0, -0.0);\n    u_xlat10.x = dot(u_xlat10.xy, u_xlat4.xy);\n   
            u_xlat3.x = (u_xlatb3.z) ? float(289.0) : float(-289.0);\n    u_xlat3.y
            = (u_xlatb3.w) ? float(289.0) : float(-289.0);\n    u_xlat3.z = (u_xlatb3.z)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat3.w = (u_xlatb3.w)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat19.xy = u_xlat2.zw
            * u_xlat3.zw;\n    u_xlat19.xy = fract(u_xlat19.xy);\n    u_xlat19.xy
            = u_xlat19.xy * u_xlat3.xy;\n    u_xlat2.x = u_xlat19.x * 34.0 + 1.0;\n   
            u_xlat19.x = u_xlat19.x * u_xlat2.x;\n    u_xlat2.x = u_xlat19.x * 289.0;\n   
            u_xlatb2.x = u_xlat2.x>=(-u_xlat2.x);\n    u_xlat2.xy = (u_xlatb2.x)
            ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n    u_xlat19.x
            = u_xlat19.x * u_xlat2.y;\n    u_xlat19.x = fract(u_xlat19.x);\n    u_xlat19.x
            = u_xlat2.x * u_xlat19.x + u_xlat19.y;\n    u_xlat28 = u_xlat19.x * 34.0
            + 1.0;\n    u_xlat19.x = u_xlat19.x * u_xlat28;\n    u_xlat28 = u_xlat19.x
            * 289.0;\n    u_xlatb28 = u_xlat28>=(-u_xlat28);\n    u_xlat2.xy = (bool(u_xlatb28))
            ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n    u_xlat19.x
            = u_xlat19.x * u_xlat2.y;\n    u_xlat19.x = fract(u_xlat19.x);\n    u_xlat19.x
            = u_xlat19.x * u_xlat2.x;\n    u_xlat19.x = u_xlat19.x * 0.024390243;\n   
            u_xlat19.x = fract(u_xlat19.x);\n    u_xlat19.xy = u_xlat19.xx * vec2(2.0,
            2.0) + vec2(-1.0, -0.5);\n    u_xlat28 = floor(u_xlat19.y);\n    u_xlat2.x
            = (-u_xlat28) + u_xlat19.x;\n    u_xlat2.y = abs(u_xlat19.x) + -0.5;\n   
            u_xlat19.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat19.x = inversesqrt(u_xlat19.x);\n   
            u_xlat19.xy = u_xlat19.xx * u_xlat2.xy;\n    u_xlat19.x = dot(u_xlat19.xy,
            u_xlat4.zw);\n    u_xlat18.xy = u_xlat18.xy + vec2(1.0, 1.0);\n    u_xlat2
            = u_xlat18.xyxy * vec4(289.0, 289.0, 289.0, 289.0);\n    u_xlatb2 = greaterThanEqual(u_xlat2,
            (-u_xlat2.zwzw));\n    u_xlat2.x = (u_xlatb2.x) ? float(289.0) : float(-289.0);\n   
            u_xlat2.y = (u_xlatb2.y) ? float(289.0) : float(-289.0);\n    u_xlat2.z
            = (u_xlatb2.z) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat2.w
            = (u_xlatb2.w) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat18.xy
            = u_xlat18.xy * u_xlat2.zw;\n    u_xlat18.xy = fract(u_xlat18.xy);\n   
            u_xlat18.xy = u_xlat18.xy * u_xlat2.xy;\n    u_xlat28 = u_xlat18.x *
            34.0 + 1.0;\n    u_xlat18.x = u_xlat18.x * u_xlat28;\n    u_xlat28 =
            u_xlat18.x * 289.0;\n    u_xlatb28 = u_xlat28>=(-u_xlat28);\n    u_xlat2.xy
            = (bool(u_xlatb28)) ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n   
            u_xlat18.x = u_xlat18.x * u_xlat2.y;\n    u_xlat18.x = fract(u_xlat18.x);\n   
            u_xlat18.x = u_xlat2.x * u_xlat18.x + u_xlat18.y;\n    u_xlat27 = u_xlat18.x
            * 34.0 + 1.0;\n    u_xlat18.x = u_xlat18.x * u_xlat27;\n    u_xlat27
            = u_xlat18.x * 289.0;\n    u_xlatb27 = u_xlat27>=(-u_xlat27);\n    u_xlat2.xy
            = (bool(u_xlatb27)) ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n   
            u_xlat18.x = u_xlat18.x * u_xlat2.y;\n    u_xlat18.x = fract(u_xlat18.x);\n   
            u_xlat18.x = u_xlat18.x * u_xlat2.x;\n    u_xlat18.x = u_xlat18.x * 0.024390243;\n   
            u_xlat18.x = fract(u_xlat18.x);\n    u_xlat18.xy = u_xlat18.xx * vec2(2.0,
            2.0) + vec2(-1.0, -0.5);\n    u_xlat27 = floor(u_xlat18.y);\n    u_xlat2.x
            = (-u_xlat27) + u_xlat18.x;\n    u_xlat2.y = abs(u_xlat18.x) + -0.5;\n   
            u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat18.x = inversesqrt(u_xlat18.x);\n   
            u_xlat18.xy = u_xlat18.xx * u_xlat2.xy;\n    u_xlat2.xy = u_xlat0.xy
            + vec2(-1.0, -1.0);\n    u_xlat18.x = dot(u_xlat18.xy, u_xlat2.xy);\n   
            u_xlat2.xy = u_xlat0.xy * u_xlat0.xy;\n    u_xlat2.xy = u_xlat0.xy *
            u_xlat2.xy;\n    u_xlat20.xy = u_xlat0.xy * vec2(6.0, 6.0) + vec2(-15.0,
            -15.0);\n    u_xlat0.xy = u_xlat0.xy * u_xlat20.xy + vec2(10.0, 10.0);\n   
            u_xlat0.xy = u_xlat0.xy * u_xlat2.xy;\n    u_xlat27 = (-u_xlat1.x) +
            u_xlat10.x;\n    u_xlat27 = u_xlat0.y * u_xlat27 + u_xlat1.x;\n    u_xlat18.x
            = (-u_xlat19.x) + u_xlat18.x;\n    u_xlat9.x = u_xlat0.y * u_xlat18.x
            + u_xlat19.x;\n    u_xlat9.x = (-u_xlat27) + u_xlat9.x;\n    u_xlat0.x
            = u_xlat0.x * u_xlat9.x + u_xlat27;\n    u_xlat0.x = u_xlat0.x + 0.5;\n   
            u_xlat9.xy = u_xlat0.xx + (-vs_TEXCOORD3.xy);\n    u_xlat9.xy = vec2(Vector1_BE84214E)
            * u_xlat9.xy + vs_TEXCOORD3.xy;\n    u_xlat10_9.xyz = texture2D(Texture2D_44F18FCE,
            u_xlat9.xy).xyz;\n    u_xlat1.xy = Vector2_A6157063.xy * _TimeParameters.xx
            + vs_TEXCOORD3.xy;\n    u_xlat1.xy = u_xlat1.xy * vec2(vec2(Vector1_B073FC91,
            Vector1_B073FC91));\n    u_xlat19.xy = floor(u_xlat1.xy);\n    u_xlat1.xy
            = fract(u_xlat1.xy);\n    u_xlat2.x = float(0.0);\n    u_xlat2.y = float(8.0);\n   
            for(int u_xlati_loop_1 = int(-1) ; u_xlati_loop_1<=1 ; u_xlati_loop_1++)\n   
            {\n        u_xlat3.y = float(u_xlati_loop_1);\n        u_xlat21.xy =
            u_xlat2.xy;\n        for(int u_xlati_loop_2 = -1 ; u_xlati_loop_2<=1
            ; u_xlati_loop_2++)\n        {\n            u_xlat3.x = float(u_xlati_loop_2);\n           
            u_xlat4.xy = u_xlat19.xy + u_xlat3.xy;\n            u_xlat4.z = dot(u_xlat4.xy,
            vec2(15.2700005, 99.4100037));\n            u_xlat4.x = dot(u_xlat4.xy,
            vec2(47.6300011, 89.9800034));\n            u_xlat5.xy = sin(u_xlat4.xz);\n           
            u_xlat4.xy = u_xlat5.xy * vec2(46839.3203, 46839.3203);\n           
            u_xlat4.xy = fract(u_xlat4.xy);\n            u_xlat4.xy = u_xlat4.xy
            + u_xlat4.xy;\n            u_xlat4.x = sin(u_xlat4.x);\n            u_xlat5.x
            = u_xlat4.x * 0.5 + u_xlat3.x;\n            u_xlat3.x = cos(u_xlat4.y);\n           
            u_xlat5.y = u_xlat3.x * 0.5 + u_xlat3.y;\n            u_xlat4.xy = (-u_xlat1.xy)
            + u_xlat5.xy;\n            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);\n           
            u_xlat3.x = dot(u_xlat4.xy, u_xlat4.xy);\n            u_xlat3.x = sqrt(u_xlat3.x);\n           
            u_xlatb4 = u_xlat3.x<u_xlat21.y;\n            u_xlat21.xy = (bool(u_xlatb4))
            ? u_xlat3.xx : u_xlat21.xy;\n        }\n        u_xlat2.xy = u_xlat21.xy;\n   
            }\n    u_xlat1.x = log2(u_xlat2.x);\n    u_xlat1.x = u_xlat1.x * Vector1_7E8C9118;\n   
            u_xlat1.x = exp2(u_xlat1.x);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat10_9.xyz;\n    u_xlat0.xyz = u_xlat0.xyz
            * Color_81D75D39.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n   
            u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n   
            u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat16_6.xyz
            = u_xlat0.xyz * vec3(0.959999979, 0.959999979, 0.959999979);\n    u_xlat16_33
            = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_33 = u_xlat16_33
            + u_xlat16_33;\n    u_xlat16_7.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_33))
            + (-u_xlat1.xyz);\n    u_xlat16_33 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);\n   
            u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_33 = (-u_xlat16_33)
            + 1.0;\n    u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_33
            = u_xlat16_33 * u_xlat16_33;\n    u_xlat10_1 = textureCube(unity_SpecCube0,
            u_xlat16_7.xyz, 4.05000019);\n    u_xlat16_7.x = u_xlat10_1.w + -1.0;\n   
            u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;\n    u_xlat16_7.x
            = max(u_xlat16_7.x, 0.0);\n    u_xlat16_7.x = log2(u_xlat16_7.x);\n   
            u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.y;\n    u_xlat16_7.x
            = exp2(u_xlat16_7.x);\n    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;\n   
            u_xlat16_7.xyz = u_xlat10_1.xyz * u_xlat16_7.xxx;\n    u_xlat1.xyz =
            u_xlat16_7.xyz * vec3(0.941176474, 0.941176474, 0.941176474);\n    u_xlat16_33
            = u_xlat16_33 * 0.5 + 0.0399999991;\n    u_xlat1.xyz = u_xlat1.xyz *
            vec3(u_xlat16_33);\n    u_xlat1.xyz = vs_TEXCOORD6.xyz * u_xlat16_6.xyz
            + u_xlat1.xyz;\n    u_xlat16_33 = dot(vs_TEXCOORD1.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_33
            * unity_LightData.z;\n    u_xlat16_7.xyz = vec3(u_xlat16_33) * _MainLightColor.xyz;\n   
            u_xlat9.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat27) + _MainLightPosition.xyz;\n   
            u_xlat28 = dot(u_xlat9.xyz, u_xlat9.xyz);\n    u_xlat28 = max(u_xlat28,
            1.17549435e-38);\n    u_xlat28 = inversesqrt(u_xlat28);\n    u_xlat9.xyz
            = u_xlat9.xyz * vec3(u_xlat28);\n    u_xlat28 = dot(vs_TEXCOORD1.xyz,
            u_xlat9.xyz);\n    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);\n    u_xlat9.x
            = dot(_MainLightPosition.xyz, u_xlat9.xyz);\n    u_xlat9.x = clamp(u_xlat9.x,
            0.0, 1.0);\n    u_xlat18.x = u_xlat28 * u_xlat28;\n    u_xlat18.x = u_xlat18.x
            * -0.9375 + 1.00001001;\n    u_xlat16_33 = u_xlat9.x * u_xlat9.x;\n   
            u_xlat9.x = u_xlat18.x * u_xlat18.x;\n    u_xlat18.x = max(u_xlat16_33,
            0.100000001);\n    u_xlat9.x = u_xlat18.x * u_xlat9.x;\n    u_xlat9.x
            = u_xlat9.x * 3.0;\n    u_xlat9.x = 0.0625 / u_xlat9.x;\n    u_xlat16_33
            = u_xlat9.x + -6.10351563e-05;\n    u_xlat16_8.xyz = vec3(u_xlat16_33)
            * vec3(0.0399999991, 0.0399999991, 0.0399999991) + u_xlat16_6.xyz;\n   
            u_xlat16_7.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat1.xyz;\n   
            SV_TARGET0.xyz = vs_TEXCOORD7.yzw * u_xlat16_6.xyz + u_xlat16_7.xyz;\n   
            SV_TARGET0.w = u_xlat0.x;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _ADDITIONAL_LIGHTS_VERTEX
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Transparent+0
          - Key: RENDERTYPE
            Value: Transparent
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute
            highp vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec3
            vs_TEXCOORD4;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD6;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec4 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nfloat u_xlat12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat12,
            1.17549435e-38);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz
            = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n   
            u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat13 = max(u_xlat13, 1.17549435e-38);\n    u_xlat13 = inversesqrt(u_xlat13);\n   
            vs_TEXCOORD2.xyz = vec3(u_xlat13) * u_xlat1.xyz;\n    vs_TEXCOORD2.w
            = in_TANGENT0.w;\n    vs_TEXCOORD3 = in_TEXCOORD0;\n    vs_TEXCOORD5.xy
            = vec2(0.0, 0.0);\n    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x
            = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat0.yzzx
            * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n   
            u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz
            = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;\n   
            vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD8 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[32];\nuniform \tvec4 _TimeParameters;\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 Color_81D75D39;\nuniform
            \tfloat Vector1_BE84214E;\nuniform \tvec2 Vector2_FBD048D4;\nuniform
            \tvec2 Vector2_A6157063;\nuniform \tfloat Vector1_B073FC91;\nuniform
            \tfloat Vector1_53E7ACC2;\nuniform \tfloat Vector1_7E8C9118;\nuniform
            lowp sampler2D Texture2D_44F18FCE;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3
            vs_TEXCOORD6;\n#define SV_TARGET0 gl_FragData[0]\nvec3 u_xlat0;\nvec4
            u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nbvec4
            u_xlatb2;\nvec4 u_xlat3;\nbvec4 u_xlatb3;\nvec4 u_xlat4;\nbool u_xlatb4;\nvec2
            u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump
            vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nvec3
            u_xlat11;\nlowp vec3 u_xlat10_11;\nint u_xlati11;\nvec2 u_xlat12;\nbool
            u_xlatb12;\nvec2 u_xlat22;\nint u_xlati22;\nvec2 u_xlat23;\nbool u_xlatb23;\nvec2
            u_xlat24;\nint u_xlati24;\nvec2 u_xlat25;\nfloat u_xlat33;\nint u_xlati33;\nbool
            u_xlatb33;\nfloat u_xlat34;\nbool u_xlatb34;\nfloat u_xlat35;\nint u_xlati35;\nbool
            u_xlatb35;\nfloat u_xlat36;\nmediump float u_xlat16_39;\n#define UNITY_DYNAMIC_INDEX_ES2
            0\n\n\n\n\n\n\nvec4 _AdditionalLightsPositionDynamicIndex(int i){\n#if
            UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsPosition[i];\n#else\n#define
            d_ar _AdditionalLightsPosition\n    if (i <= 0) return d_ar[0]; else
            if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if
            (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i
            == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i ==
            7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9)
            return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11)
            return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13)
            return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15)
            return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17)
            return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19)
            return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21)
            return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23)
            return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25)
            return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27)
            return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29)
            return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31)
            return d_ar[31];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump
            vec4 _AdditionalLightsAttenuationDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsAttenuation[i];\n#else\n#define d_ar _AdditionalLightsAttenuation\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return
            d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return
            d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return
            d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return
            d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return
            d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return
            d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return
            d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return
            d_ar[30]; else if (i == 31) return d_ar[31];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\n\nmediump vec4 _AdditionalLightsSpotDirDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsSpotDir[i];\n#else\n#define
            d_ar _AdditionalLightsSpotDir\n    if (i <= 0) return d_ar[0]; else if
            (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i
            == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i ==
            5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7)
            return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return
            d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return
            d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return
            d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return
            d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return
            d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return
            d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return
            d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return
            d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return
            d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return
            d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return
            d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return
            d_ar[31];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump vec4
            _AdditionalLightsColorDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsColor[i];\n#else\n#define d_ar _AdditionalLightsColor\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return
            d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return
            d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return
            d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return
            d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return
            d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return
            d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return
            d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return
            d_ar[30]; else if (i == 31) return d_ar[31];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat0.xy = vec2(Vector2_FBD048D4.x,
            Vector2_FBD048D4.y) * _TimeParameters.xx + vs_TEXCOORD3.xy;\n    u_xlat0.xy
            = u_xlat0.xy * vec2(vec2(Vector1_53E7ACC2, Vector1_53E7ACC2));\n    u_xlat22.xy
            = floor(u_xlat0.xy);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat1
            = u_xlat22.xyxy * vec4(289.0, 289.0, 289.0, 289.0);\n    u_xlatb1 = greaterThanEqual(u_xlat1,
            (-u_xlat1.zwzw));\n    u_xlat1.x = (u_xlatb1.x) ? float(289.0) : float(-289.0);\n   
            u_xlat1.y = (u_xlatb1.y) ? float(289.0) : float(-289.0);\n    u_xlat1.z
            = (u_xlatb1.z) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat1.w
            = (u_xlatb1.w) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat23.xy
            = u_xlat22.xy * u_xlat1.zw;\n    u_xlat23.xy = fract(u_xlat23.xy);\n   
            u_xlat1.xy = u_xlat23.xy * u_xlat1.xy;\n    u_xlat23.x = u_xlat1.x *
            34.0 + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat23.x;\n    u_xlat23.x
            = u_xlat1.x * 289.0;\n    u_xlatb23 = u_xlat23.x>=(-u_xlat23.x);\n   
            u_xlat23.xy = (bool(u_xlatb23)) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat1.x = u_xlat23.y * u_xlat1.x;\n    u_xlat1.x
            = fract(u_xlat1.x);\n    u_xlat1.x = u_xlat23.x * u_xlat1.x + u_xlat1.y;\n   
            u_xlat12.x = u_xlat1.x * 34.0 + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat12.x;\n   
            u_xlat12.x = u_xlat1.x * 289.0;\n    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);\n   
            u_xlat12.xy = (bool(u_xlatb12)) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat1.x = u_xlat12.y * u_xlat1.x;\n    u_xlat1.x
            = fract(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * u_xlat12.x;\n    u_xlat1.x
            = u_xlat1.x * 0.024390243;\n    u_xlat1.x = fract(u_xlat1.x);\n    u_xlat1.xy
            = u_xlat1.xx * vec2(2.0, 2.0) + vec2(-1.0, -0.5);\n    u_xlat12.x = floor(u_xlat1.y);\n   
            u_xlat2.x = (-u_xlat12.x) + u_xlat1.x;\n    u_xlat2.y = abs(u_xlat1.x)
            + -0.5;\n    u_xlat1.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat1.x
            = inversesqrt(u_xlat1.x);\n    u_xlat1.xy = u_xlat1.xx * u_xlat2.xy;\n   
            u_xlat1.x = dot(u_xlat1.xy, u_xlat0.xy);\n    u_xlat2 = u_xlat22.xyxy
            + vec4(0.0, 1.0, 1.0, 0.0);\n    u_xlat3 = u_xlat2 * vec4(289.0, 289.0,
            289.0, 289.0);\n    u_xlatb3 = greaterThanEqual(u_xlat3, (-u_xlat3));\n   
            u_xlat4.x = (u_xlatb3.x) ? float(289.0) : float(-289.0);\n    u_xlat4.y
            = (u_xlatb3.y) ? float(289.0) : float(-289.0);\n    u_xlat4.z = (u_xlatb3.x)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat4.w = (u_xlatb3.y)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat12.xy = u_xlat2.xy
            * u_xlat4.zw;\n    u_xlat12.xy = fract(u_xlat12.xy);\n    u_xlat12.xy
            = u_xlat12.xy * u_xlat4.xy;\n    u_xlat34 = u_xlat12.x * 34.0 + 1.0;\n   
            u_xlat12.x = u_xlat12.x * u_xlat34;\n    u_xlat34 = u_xlat12.x * 289.0;\n   
            u_xlatb34 = u_xlat34>=(-u_xlat34);\n    u_xlat2.xy = (bool(u_xlatb34))
            ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n    u_xlat12.x
            = u_xlat12.x * u_xlat2.y;\n    u_xlat12.x = fract(u_xlat12.x);\n    u_xlat12.x
            = u_xlat2.x * u_xlat12.x + u_xlat12.y;\n    u_xlat23.x = u_xlat12.x *
            34.0 + 1.0;\n    u_xlat12.x = u_xlat12.x * u_xlat23.x;\n    u_xlat23.x
            = u_xlat12.x * 289.0;\n    u_xlatb23 = u_xlat23.x>=(-u_xlat23.x);\n   
            u_xlat23.xy = (bool(u_xlatb23)) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat12.x = u_xlat23.y * u_xlat12.x;\n    u_xlat12.x
            = fract(u_xlat12.x);\n    u_xlat12.x = u_xlat12.x * u_xlat23.x;\n   
            u_xlat12.x = u_xlat12.x * 0.024390243;\n    u_xlat12.x = fract(u_xlat12.x);\n   
            u_xlat12.xy = u_xlat12.xx * vec2(2.0, 2.0) + vec2(-1.0, -0.5);\n    u_xlat23.x
            = floor(u_xlat12.y);\n    u_xlat2.x = (-u_xlat23.x) + u_xlat12.x;\n   
            u_xlat2.y = abs(u_xlat12.x) + -0.5;\n    u_xlat12.x = dot(u_xlat2.xy,
            u_xlat2.xy);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat12.xy
            = u_xlat12.xx * u_xlat2.xy;\n    u_xlat4 = u_xlat0.xyxy + vec4(-0.0,
            -1.0, -1.0, -0.0);\n    u_xlat12.x = dot(u_xlat12.xy, u_xlat4.xy);\n   
            u_xlat3.x = (u_xlatb3.z) ? float(289.0) : float(-289.0);\n    u_xlat3.y
            = (u_xlatb3.w) ? float(289.0) : float(-289.0);\n    u_xlat3.z = (u_xlatb3.z)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat3.w = (u_xlatb3.w)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat23.xy = u_xlat2.zw
            * u_xlat3.zw;\n    u_xlat23.xy = fract(u_xlat23.xy);\n    u_xlat23.xy
            = u_xlat23.xy * u_xlat3.xy;\n    u_xlat2.x = u_xlat23.x * 34.0 + 1.0;\n   
            u_xlat23.x = u_xlat23.x * u_xlat2.x;\n    u_xlat2.x = u_xlat23.x * 289.0;\n   
            u_xlatb2.x = u_xlat2.x>=(-u_xlat2.x);\n    u_xlat2.xy = (u_xlatb2.x)
            ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n    u_xlat23.x
            = u_xlat23.x * u_xlat2.y;\n    u_xlat23.x = fract(u_xlat23.x);\n    u_xlat23.x
            = u_xlat2.x * u_xlat23.x + u_xlat23.y;\n    u_xlat34 = u_xlat23.x * 34.0
            + 1.0;\n    u_xlat23.x = u_xlat23.x * u_xlat34;\n    u_xlat34 = u_xlat23.x
            * 289.0;\n    u_xlatb34 = u_xlat34>=(-u_xlat34);\n    u_xlat2.xy = (bool(u_xlatb34))
            ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n    u_xlat23.x
            = u_xlat23.x * u_xlat2.y;\n    u_xlat23.x = fract(u_xlat23.x);\n    u_xlat23.x
            = u_xlat23.x * u_xlat2.x;\n    u_xlat23.x = u_xlat23.x * 0.024390243;\n   
            u_xlat23.x = fract(u_xlat23.x);\n    u_xlat23.xy = u_xlat23.xx * vec2(2.0,
            2.0) + vec2(-1.0, -0.5);\n    u_xlat34 = floor(u_xlat23.y);\n    u_xlat2.x
            = (-u_xlat34) + u_xlat23.x;\n    u_xlat2.y = abs(u_xlat23.x) + -0.5;\n   
            u_xlat23.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat23.x = inversesqrt(u_xlat23.x);\n   
            u_xlat23.xy = u_xlat23.xx * u_xlat2.xy;\n    u_xlat23.x = dot(u_xlat23.xy,
            u_xlat4.zw);\n    u_xlat22.xy = u_xlat22.xy + vec2(1.0, 1.0);\n    u_xlat2
            = u_xlat22.xyxy * vec4(289.0, 289.0, 289.0, 289.0);\n    u_xlatb2 = greaterThanEqual(u_xlat2,
            (-u_xlat2.zwzw));\n    u_xlat2.x = (u_xlatb2.x) ? float(289.0) : float(-289.0);\n   
            u_xlat2.y = (u_xlatb2.y) ? float(289.0) : float(-289.0);\n    u_xlat2.z
            = (u_xlatb2.z) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat2.w
            = (u_xlatb2.w) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat22.xy
            = u_xlat22.xy * u_xlat2.zw;\n    u_xlat22.xy = fract(u_xlat22.xy);\n   
            u_xlat22.xy = u_xlat22.xy * u_xlat2.xy;\n    u_xlat34 = u_xlat22.x *
            34.0 + 1.0;\n    u_xlat22.x = u_xlat22.x * u_xlat34;\n    u_xlat34 =
            u_xlat22.x * 289.0;\n    u_xlatb34 = u_xlat34>=(-u_xlat34);\n    u_xlat2.xy
            = (bool(u_xlatb34)) ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n   
            u_xlat22.x = u_xlat22.x * u_xlat2.y;\n    u_xlat22.x = fract(u_xlat22.x);\n   
            u_xlat22.x = u_xlat2.x * u_xlat22.x + u_xlat22.y;\n    u_xlat33 = u_xlat22.x
            * 34.0 + 1.0;\n    u_xlat22.x = u_xlat22.x * u_xlat33;\n    u_xlat33
            = u_xlat22.x * 289.0;\n    u_xlatb33 = u_xlat33>=(-u_xlat33);\n    u_xlat2.xy
            = (bool(u_xlatb33)) ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n   
            u_xlat22.x = u_xlat22.x * u_xlat2.y;\n    u_xlat22.x = fract(u_xlat22.x);\n   
            u_xlat22.x = u_xlat22.x * u_xlat2.x;\n    u_xlat22.x = u_xlat22.x * 0.024390243;\n   
            u_xlat22.x = fract(u_xlat22.x);\n    u_xlat22.xy = u_xlat22.xx * vec2(2.0,
            2.0) + vec2(-1.0, -0.5);\n    u_xlat33 = floor(u_xlat22.y);\n    u_xlat2.x
            = (-u_xlat33) + u_xlat22.x;\n    u_xlat2.y = abs(u_xlat22.x) + -0.5;\n   
            u_xlat22.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat22.x = inversesqrt(u_xlat22.x);\n   
            u_xlat22.xy = u_xlat22.xx * u_xlat2.xy;\n    u_xlat2.xy = u_xlat0.xy
            + vec2(-1.0, -1.0);\n    u_xlat22.x = dot(u_xlat22.xy, u_xlat2.xy);\n   
            u_xlat2.xy = u_xlat0.xy * u_xlat0.xy;\n    u_xlat2.xy = u_xlat0.xy *
            u_xlat2.xy;\n    u_xlat24.xy = u_xlat0.xy * vec2(6.0, 6.0) + vec2(-15.0,
            -15.0);\n    u_xlat0.xy = u_xlat0.xy * u_xlat24.xy + vec2(10.0, 10.0);\n   
            u_xlat0.xy = u_xlat0.xy * u_xlat2.xy;\n    u_xlat33 = (-u_xlat1.x) +
            u_xlat12.x;\n    u_xlat33 = u_xlat0.y * u_xlat33 + u_xlat1.x;\n    u_xlat22.x
            = (-u_xlat23.x) + u_xlat22.x;\n    u_xlat11.x = u_xlat0.y * u_xlat22.x
            + u_xlat23.x;\n    u_xlat11.x = (-u_xlat33) + u_xlat11.x;\n    u_xlat0.x
            = u_xlat0.x * u_xlat11.x + u_xlat33;\n    u_xlat0.x = u_xlat0.x + 0.5;\n   
            u_xlat11.xy = u_xlat0.xx + (-vs_TEXCOORD3.xy);\n    u_xlat11.xy = vec2(Vector1_BE84214E)
            * u_xlat11.xy + vs_TEXCOORD3.xy;\n    u_xlat10_11.xyz = texture2D(Texture2D_44F18FCE,
            u_xlat11.xy).xyz;\n    u_xlat1.xy = Vector2_A6157063.xy * _TimeParameters.xx
            + vs_TEXCOORD3.xy;\n    u_xlat1.xy = u_xlat1.xy * vec2(vec2(Vector1_B073FC91,
            Vector1_B073FC91));\n    u_xlat23.xy = floor(u_xlat1.xy);\n    u_xlat1.xy
            = fract(u_xlat1.xy);\n    u_xlat2.x = float(0.0);\n    u_xlat2.y = float(8.0);\n   
            for(int u_xlati_loop_1 = int(-1) ; u_xlati_loop_1<=1 ; u_xlati_loop_1++)\n   
            {\n        u_xlat3.y = float(u_xlati_loop_1);\n        u_xlat25.xy =
            u_xlat2.xy;\n        for(int u_xlati_loop_2 = -1 ; u_xlati_loop_2<=1
            ; u_xlati_loop_2++)\n        {\n            u_xlat3.x = float(u_xlati_loop_2);\n           
            u_xlat4.xy = u_xlat23.xy + u_xlat3.xy;\n            u_xlat4.z = dot(u_xlat4.xy,
            vec2(15.2700005, 99.4100037));\n            u_xlat4.x = dot(u_xlat4.xy,
            vec2(47.6300011, 89.9800034));\n            u_xlat5.xy = sin(u_xlat4.xz);\n           
            u_xlat4.xy = u_xlat5.xy * vec2(46839.3203, 46839.3203);\n           
            u_xlat4.xy = fract(u_xlat4.xy);\n            u_xlat4.xy = u_xlat4.xy
            + u_xlat4.xy;\n            u_xlat4.x = sin(u_xlat4.x);\n            u_xlat5.x
            = u_xlat4.x * 0.5 + u_xlat3.x;\n            u_xlat3.x = cos(u_xlat4.y);\n           
            u_xlat5.y = u_xlat3.x * 0.5 + u_xlat3.y;\n            u_xlat4.xy = (-u_xlat1.xy)
            + u_xlat5.xy;\n            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);\n           
            u_xlat3.x = dot(u_xlat4.xy, u_xlat4.xy);\n            u_xlat3.x = sqrt(u_xlat3.x);\n           
            u_xlatb4 = u_xlat3.x<u_xlat25.y;\n            u_xlat25.xy = (bool(u_xlatb4))
            ? u_xlat3.xx : u_xlat25.xy;\n        }\n        u_xlat2.xy = u_xlat25.xy;\n   
            }\n    u_xlat1.x = log2(u_xlat2.x);\n    u_xlat1.x = u_xlat1.x * Vector1_7E8C9118;\n   
            u_xlat1.x = exp2(u_xlat1.x);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat10_11.xyz;\n    u_xlat0.xyz = u_xlat0.xyz
            * Color_81D75D39.xyz;\n    u_xlat33 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n   
            u_xlat33 = max(u_xlat33, 1.17549435e-38);\n    u_xlat33 = inversesqrt(u_xlat33);\n   
            u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD4.xyz;\n    u_xlat16_6.xyz
            = u_xlat0.xyz * vec3(0.959999979, 0.959999979, 0.959999979);\n    u_xlat16_39
            = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_39 = u_xlat16_39
            + u_xlat16_39;\n    u_xlat16_7.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_39))
            + (-u_xlat1.xyz);\n    u_xlat16_39 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);\n   
            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_39 = (-u_xlat16_39)
            + 1.0;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_39
            = u_xlat16_39 * u_xlat16_39;\n    u_xlat10_2 = textureCube(unity_SpecCube0,
            u_xlat16_7.xyz, 4.05000019);\n    u_xlat16_7.x = u_xlat10_2.w + -1.0;\n   
            u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;\n    u_xlat16_7.x
            = max(u_xlat16_7.x, 0.0);\n    u_xlat16_7.x = log2(u_xlat16_7.x);\n   
            u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.y;\n    u_xlat16_7.x
            = exp2(u_xlat16_7.x);\n    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;\n   
            u_xlat16_7.xyz = u_xlat10_2.xyz * u_xlat16_7.xxx;\n    u_xlat2.xyz =
            u_xlat16_7.xyz * vec3(0.941176474, 0.941176474, 0.941176474);\n    u_xlat16_39
            = u_xlat16_39 * 0.5 + 0.0399999991;\n    u_xlat2.xyz = u_xlat2.xyz *
            vec3(u_xlat16_39);\n    u_xlat2.xyz = vs_TEXCOORD6.xyz * u_xlat16_6.xyz
            + u_xlat2.xyz;\n    u_xlat16_39 = dot(vs_TEXCOORD1.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_39 = u_xlat16_39
            * unity_LightData.z;\n    u_xlat16_7.xyz = vec3(u_xlat16_39) * _MainLightColor.xyz;\n   
            u_xlat11.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat33) + _MainLightPosition.xyz;\n   
            u_xlat34 = dot(u_xlat11.xyz, u_xlat11.xyz);\n    u_xlat34 = max(u_xlat34,
            1.17549435e-38);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat11.xyz
            = u_xlat11.xyz * vec3(u_xlat34);\n    u_xlat34 = dot(vs_TEXCOORD1.xyz,
            u_xlat11.xyz);\n    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);\n    u_xlat11.x
            = dot(_MainLightPosition.xyz, u_xlat11.xyz);\n    u_xlat11.x = clamp(u_xlat11.x,
            0.0, 1.0);\n    u_xlat22.x = u_xlat34 * u_xlat34;\n    u_xlat22.x = u_xlat22.x
            * -0.9375 + 1.00001001;\n    u_xlat16_39 = u_xlat11.x * u_xlat11.x;\n   
            u_xlat11.x = u_xlat22.x * u_xlat22.x;\n    u_xlat22.x = max(u_xlat16_39,
            0.100000001);\n    u_xlat11.x = u_xlat22.x * u_xlat11.x;\n    u_xlat11.x
            = u_xlat11.x * 3.0;\n    u_xlat11.x = 0.0625 / u_xlat11.x;\n    u_xlat16_39
            = u_xlat11.x + -6.10351563e-05;\n    u_xlat16_8.xyz = vec3(u_xlat16_39)
            * vec3(0.0399999991, 0.0399999991, 0.0399999991) + u_xlat16_6.xyz;\n   
            u_xlat16_7.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz + u_xlat2.xyz;\n   
            u_xlat16_39 = min(_AdditionalLightsCount.x, unity_LightData.y);\n   
            u_xlati11 = int(u_xlat16_39);\n    u_xlat16_8.xyz = u_xlat16_7.xyz;\n   
            for(int u_xlati_loop_3 = 0 ; u_xlati_loop_3<u_xlati11 ; u_xlati_loop_3++)\n   
            {\n        u_xlat33 = float(u_xlati_loop_3);\n        u_xlatb34 = u_xlat33<2.0;\n       
            u_xlat16_9.xy = (bool(u_xlatb34)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n       
            u_xlat2.x = u_xlat33 + -2.0;\n        u_xlat33 = (u_xlatb34) ? u_xlat33
            : u_xlat2.x;\n        u_xlatb33 = u_xlat33<1.0;\n        u_xlat16_39
            = (u_xlatb33) ? u_xlat16_9.x : u_xlat16_9.y;\n        u_xlati33 = int(u_xlat16_39);\n       
            u_xlat2.xyz = (-vs_TEXCOORD0.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati33).www
            + _AdditionalLightsPositionDynamicIndex(u_xlati33).xyz;\n        u_xlat34
            = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat34 = max(u_xlat34, 6.10351563e-05);\n       
            u_xlat35 = inversesqrt(u_xlat34);\n        u_xlat3.xyz = vec3(u_xlat35)
            * u_xlat2.xyz;\n        u_xlat36 = float(1.0) / u_xlat34;\n        u_xlat34
            = u_xlat34 * _AdditionalLightsAttenuationDynamicIndex(u_xlati33).x +
            _AdditionalLightsAttenuationDynamicIndex(u_xlati33).y;\n        u_xlat34
            = clamp(u_xlat34, 0.0, 1.0);\n        u_xlat34 = u_xlat34 * u_xlat36;\n       
            u_xlat16_39 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati33).xyz,
            u_xlat3.xyz);\n        u_xlat16_39 = u_xlat16_39 * _AdditionalLightsAttenuationDynamicIndex(u_xlati33).z
            + _AdditionalLightsAttenuationDynamicIndex(u_xlati33).w;\n        u_xlat16_39
            = clamp(u_xlat16_39, 0.0, 1.0);\n        u_xlat16_39 = u_xlat16_39 *
            u_xlat16_39;\n        u_xlat34 = u_xlat34 * u_xlat16_39;\n        u_xlat16_39
            = dot(vs_TEXCOORD1.xyz, u_xlat3.xyz);\n        u_xlat16_39 = clamp(u_xlat16_39,
            0.0, 1.0);\n        u_xlat16_39 = u_xlat34 * u_xlat16_39;\n        u_xlat16_9.xyz
            = vec3(u_xlat16_39) * _AdditionalLightsColorDynamicIndex(u_xlati33).xyz;\n       
            u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat35) + u_xlat1.xyz;\n        u_xlat33
            = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat33 = max(u_xlat33, 1.17549435e-38);\n       
            u_xlat33 = inversesqrt(u_xlat33);\n        u_xlat2.xyz = vec3(u_xlat33)
            * u_xlat2.xyz;\n        u_xlat33 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n       
            u_xlat33 = clamp(u_xlat33, 0.0, 1.0);\n        u_xlat34 = dot(u_xlat3.xyz,
            u_xlat2.xyz);\n        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);\n       
            u_xlat33 = u_xlat33 * u_xlat33;\n        u_xlat33 = u_xlat33 * -0.9375
            + 1.00001001;\n        u_xlat16_39 = u_xlat34 * u_xlat34;\n        u_xlat33
            = u_xlat33 * u_xlat33;\n        u_xlat34 = max(u_xlat16_39, 0.100000001);\n       
            u_xlat33 = u_xlat33 * u_xlat34;\n        u_xlat33 = u_xlat33 * 3.0;\n       
            u_xlat33 = 0.0625 / u_xlat33;\n        u_xlat16_39 = u_xlat33 + -6.10351563e-05;\n       
            u_xlat16_10.xyz = vec3(u_xlat16_39) * vec3(0.0399999991, 0.0399999991,
            0.0399999991) + u_xlat16_6.xyz;\n        u_xlat16_8.xyz = u_xlat16_10.xyz
            * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    }\n    SV_TARGET0.xyz = u_xlat16_8.xyz;\n   
            SV_TARGET0.w = u_xlat0.x;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _ADDITIONAL_LIGHTS
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Transparent+0
          - Key: RENDERTYPE
            Value: Transparent
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute
            highp vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec3
            vs_TEXCOORD4;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD6;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec4 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nfloat u_xlat12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat12,
            1.17549435e-38);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz
            = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n   
            u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat13 = max(u_xlat13, 1.17549435e-38);\n    u_xlat13 = inversesqrt(u_xlat13);\n   
            vs_TEXCOORD2.xyz = vec3(u_xlat13) * u_xlat1.xyz;\n    vs_TEXCOORD2.w
            = in_TANGENT0.w;\n    vs_TEXCOORD3 = in_TEXCOORD0;\n    vs_TEXCOORD5.xy
            = vec2(0.0, 0.0);\n    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x
            = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat0.yzzx
            * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n   
            u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz
            = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;\n   
            vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD8 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec4 _TimeParameters;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tvec4 Color_81D75D39;\nuniform \tfloat Vector1_BE84214E;\nuniform \tvec2
            Vector2_FBD048D4;\nuniform \tvec2 Vector2_A6157063;\nuniform \tfloat
            Vector1_B073FC91;\nuniform \tfloat Vector1_53E7ACC2;\nuniform \tfloat
            Vector1_7E8C9118;\nuniform lowp sampler2D Texture2D_44F18FCE;\nuniform
            lowp samplerCube unity_SpecCube0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying
            highp vec4 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp
            vec3 vs_TEXCOORD6;\n#define SV_TARGET0 gl_FragData[0]\nvec3 u_xlat0;\nvec4
            u_xlat1;\nlowp vec4 u_xlat10_1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nbvec4
            u_xlatb2;\nvec4 u_xlat3;\nbvec4 u_xlatb3;\nvec4 u_xlat4;\nbool u_xlatb4;\nvec2
            u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp
            vec3 u_xlat10_8;\nvec2 u_xlat9;\nbool u_xlatb9;\nvec2 u_xlat16;\nvec2
            u_xlat17;\nbool u_xlatb17;\nvec2 u_xlat18;\nint u_xlati18;\nvec2 u_xlat19;\nfloat
            u_xlat24;\nbool u_xlatb24;\nfloat u_xlat25;\nbool u_xlatb25;\nint u_xlati26;\nbool
            u_xlatb26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat0.xy
            = vec2(Vector2_FBD048D4.x, Vector2_FBD048D4.y) * _TimeParameters.xx +
            vs_TEXCOORD3.xy;\n    u_xlat0.xy = u_xlat0.xy * vec2(vec2(Vector1_53E7ACC2,
            Vector1_53E7ACC2));\n    u_xlat16.xy = floor(u_xlat0.xy);\n    u_xlat0.xy
            = fract(u_xlat0.xy);\n    u_xlat1 = u_xlat16.xyxy * vec4(289.0, 289.0,
            289.0, 289.0);\n    u_xlatb1 = greaterThanEqual(u_xlat1, (-u_xlat1.zwzw));\n   
            u_xlat1.x = (u_xlatb1.x) ? float(289.0) : float(-289.0);\n    u_xlat1.y
            = (u_xlatb1.y) ? float(289.0) : float(-289.0);\n    u_xlat1.z = (u_xlatb1.z)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat1.w = (u_xlatb1.w)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat17.xy = u_xlat16.xy
            * u_xlat1.zw;\n    u_xlat17.xy = fract(u_xlat17.xy);\n    u_xlat1.xy
            = u_xlat17.xy * u_xlat1.xy;\n    u_xlat17.x = u_xlat1.x * 34.0 + 1.0;\n   
            u_xlat1.x = u_xlat1.x * u_xlat17.x;\n    u_xlat17.x = u_xlat1.x * 289.0;\n   
            u_xlatb17 = u_xlat17.x>=(-u_xlat17.x);\n    u_xlat17.xy = (bool(u_xlatb17))
            ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n    u_xlat1.x
            = u_xlat17.y * u_xlat1.x;\n    u_xlat1.x = fract(u_xlat1.x);\n    u_xlat1.x
            = u_xlat17.x * u_xlat1.x + u_xlat1.y;\n    u_xlat9.x = u_xlat1.x * 34.0
            + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat9.x;\n    u_xlat9.x = u_xlat1.x
            * 289.0;\n    u_xlatb9 = u_xlat9.x>=(-u_xlat9.x);\n    u_xlat9.xy = (bool(u_xlatb9))
            ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n    u_xlat1.x
            = u_xlat9.y * u_xlat1.x;\n    u_xlat1.x = fract(u_xlat1.x);\n    u_xlat1.x
            = u_xlat1.x * u_xlat9.x;\n    u_xlat1.x = u_xlat1.x * 0.024390243;\n   
            u_xlat1.x = fract(u_xlat1.x);\n    u_xlat1.xy = u_xlat1.xx * vec2(2.0,
            2.0) + vec2(-1.0, -0.5);\n    u_xlat9.x = floor(u_xlat1.y);\n    u_xlat2.x
            = (-u_xlat9.x) + u_xlat1.x;\n    u_xlat2.y = abs(u_xlat1.x) + -0.5;\n   
            u_xlat1.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n   
            u_xlat1.xy = u_xlat1.xx * u_xlat2.xy;\n    u_xlat1.x = dot(u_xlat1.xy,
            u_xlat0.xy);\n    u_xlat2 = u_xlat16.xyxy + vec4(0.0, 1.0, 1.0, 0.0);\n   
            u_xlat3 = u_xlat2 * vec4(289.0, 289.0, 289.0, 289.0);\n    u_xlatb3 =
            greaterThanEqual(u_xlat3, (-u_xlat3));\n    u_xlat4.x = (u_xlatb3.x)
            ? float(289.0) : float(-289.0);\n    u_xlat4.y = (u_xlatb3.y) ? float(289.0)
            : float(-289.0);\n    u_xlat4.z = (u_xlatb3.x) ? float(0.00346020772)
            : float(-0.00346020772);\n    u_xlat4.w = (u_xlatb3.y) ? float(0.00346020772)
            : float(-0.00346020772);\n    u_xlat9.xy = u_xlat2.xy * u_xlat4.zw;\n   
            u_xlat9.xy = fract(u_xlat9.xy);\n    u_xlat9.xy = u_xlat9.xy * u_xlat4.xy;\n   
            u_xlat25 = u_xlat9.x * 34.0 + 1.0;\n    u_xlat9.x = u_xlat9.x * u_xlat25;\n   
            u_xlat25 = u_xlat9.x * 289.0;\n    u_xlatb25 = u_xlat25>=(-u_xlat25);\n   
            u_xlat2.xy = (bool(u_xlatb25)) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat9.x = u_xlat9.x * u_xlat2.y;\n    u_xlat9.x
            = fract(u_xlat9.x);\n    u_xlat9.x = u_xlat2.x * u_xlat9.x + u_xlat9.y;\n   
            u_xlat17.x = u_xlat9.x * 34.0 + 1.0;\n    u_xlat9.x = u_xlat9.x * u_xlat17.x;\n   
            u_xlat17.x = u_xlat9.x * 289.0;\n    u_xlatb17 = u_xlat17.x>=(-u_xlat17.x);\n   
            u_xlat17.xy = (bool(u_xlatb17)) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat9.x = u_xlat17.y * u_xlat9.x;\n    u_xlat9.x
            = fract(u_xlat9.x);\n    u_xlat9.x = u_xlat9.x * u_xlat17.x;\n    u_xlat9.x
            = u_xlat9.x * 0.024390243;\n    u_xlat9.x = fract(u_xlat9.x);\n    u_xlat9.xy
            = u_xlat9.xx * vec2(2.0, 2.0) + vec2(-1.0, -0.5);\n    u_xlat17.x = floor(u_xlat9.y);\n   
            u_xlat2.x = (-u_xlat17.x) + u_xlat9.x;\n    u_xlat2.y = abs(u_xlat9.x)
            + -0.5;\n    u_xlat9.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat9.x
            = inversesqrt(u_xlat9.x);\n    u_xlat9.xy = u_xlat9.xx * u_xlat2.xy;\n   
            u_xlat4 = u_xlat0.xyxy + vec4(-0.0, -1.0, -1.0, -0.0);\n    u_xlat9.x
            = dot(u_xlat9.xy, u_xlat4.xy);\n    u_xlat3.x = (u_xlatb3.z) ? float(289.0)
            : float(-289.0);\n    u_xlat3.y = (u_xlatb3.w) ? float(289.0) : float(-289.0);\n   
            u_xlat3.z = (u_xlatb3.z) ? float(0.00346020772) : float(-0.00346020772);\n   
            u_xlat3.w = (u_xlatb3.w) ? float(0.00346020772) : float(-0.00346020772);\n   
            u_xlat17.xy = u_xlat2.zw * u_xlat3.zw;\n    u_xlat17.xy = fract(u_xlat17.xy);\n   
            u_xlat17.xy = u_xlat17.xy * u_xlat3.xy;\n    u_xlat2.x = u_xlat17.x *
            34.0 + 1.0;\n    u_xlat17.x = u_xlat17.x * u_xlat2.x;\n    u_xlat2.x
            = u_xlat17.x * 289.0;\n    u_xlatb2.x = u_xlat2.x>=(-u_xlat2.x);\n   
            u_xlat2.xy = (u_xlatb2.x) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat17.x = u_xlat17.x * u_xlat2.y;\n    u_xlat17.x
            = fract(u_xlat17.x);\n    u_xlat17.x = u_xlat2.x * u_xlat17.x + u_xlat17.y;\n   
            u_xlat25 = u_xlat17.x * 34.0 + 1.0;\n    u_xlat17.x = u_xlat17.x * u_xlat25;\n   
            u_xlat25 = u_xlat17.x * 289.0;\n    u_xlatb25 = u_xlat25>=(-u_xlat25);\n   
            u_xlat2.xy = (bool(u_xlatb25)) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat17.x = u_xlat17.x * u_xlat2.y;\n    u_xlat17.x
            = fract(u_xlat17.x);\n    u_xlat17.x = u_xlat17.x * u_xlat2.x;\n    u_xlat17.x
            = u_xlat17.x * 0.024390243;\n    u_xlat17.x = fract(u_xlat17.x);\n   
            u_xlat17.xy = u_xlat17.xx * vec2(2.0, 2.0) + vec2(-1.0, -0.5);\n    u_xlat25
            = floor(u_xlat17.y);\n    u_xlat2.x = (-u_xlat25) + u_xlat17.x;\n   
            u_xlat2.y = abs(u_xlat17.x) + -0.5;\n    u_xlat17.x = dot(u_xlat2.xy,
            u_xlat2.xy);\n    u_xlat17.x = inversesqrt(u_xlat17.x);\n    u_xlat17.xy
            = u_xlat17.xx * u_xlat2.xy;\n    u_xlat17.x = dot(u_xlat17.xy, u_xlat4.zw);\n   
            u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);\n    u_xlat2 = u_xlat16.xyxy
            * vec4(289.0, 289.0, 289.0, 289.0);\n    u_xlatb2 = greaterThanEqual(u_xlat2,
            (-u_xlat2.zwzw));\n    u_xlat2.x = (u_xlatb2.x) ? float(289.0) : float(-289.0);\n   
            u_xlat2.y = (u_xlatb2.y) ? float(289.0) : float(-289.0);\n    u_xlat2.z
            = (u_xlatb2.z) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat2.w
            = (u_xlatb2.w) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat16.xy
            = u_xlat16.xy * u_xlat2.zw;\n    u_xlat16.xy = fract(u_xlat16.xy);\n   
            u_xlat16.xy = u_xlat16.xy * u_xlat2.xy;\n    u_xlat25 = u_xlat16.x *
            34.0 + 1.0;\n    u_xlat16.x = u_xlat16.x * u_xlat25;\n    u_xlat25 =
            u_xlat16.x * 289.0;\n    u_xlatb25 = u_xlat25>=(-u_xlat25);\n    u_xlat2.xy
            = (bool(u_xlatb25)) ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n   
            u_xlat16.x = u_xlat16.x * u_xlat2.y;\n    u_xlat16.x = fract(u_xlat16.x);\n   
            u_xlat16.x = u_xlat2.x * u_xlat16.x + u_xlat16.y;\n    u_xlat24 = u_xlat16.x
            * 34.0 + 1.0;\n    u_xlat16.x = u_xlat16.x * u_xlat24;\n    u_xlat24
            = u_xlat16.x * 289.0;\n    u_xlatb24 = u_xlat24>=(-u_xlat24);\n    u_xlat2.xy
            = (bool(u_xlatb24)) ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n   
            u_xlat16.x = u_xlat16.x * u_xlat2.y;\n    u_xlat16.x = fract(u_xlat16.x);\n   
            u_xlat16.x = u_xlat16.x * u_xlat2.x;\n    u_xlat16.x = u_xlat16.x * 0.024390243;\n   
            u_xlat16.x = fract(u_xlat16.x);\n    u_xlat16.xy = u_xlat16.xx * vec2(2.0,
            2.0) + vec2(-1.0, -0.5);\n    u_xlat24 = floor(u_xlat16.y);\n    u_xlat2.x
            = (-u_xlat24) + u_xlat16.x;\n    u_xlat2.y = abs(u_xlat16.x) + -0.5;\n   
            u_xlat16.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat16.x = inversesqrt(u_xlat16.x);\n   
            u_xlat16.xy = u_xlat16.xx * u_xlat2.xy;\n    u_xlat2.xy = u_xlat0.xy
            + vec2(-1.0, -1.0);\n    u_xlat16.x = dot(u_xlat16.xy, u_xlat2.xy);\n   
            u_xlat2.xy = u_xlat0.xy * u_xlat0.xy;\n    u_xlat2.xy = u_xlat0.xy *
            u_xlat2.xy;\n    u_xlat18.xy = u_xlat0.xy * vec2(6.0, 6.0) + vec2(-15.0,
            -15.0);\n    u_xlat0.xy = u_xlat0.xy * u_xlat18.xy + vec2(10.0, 10.0);\n   
            u_xlat0.xy = u_xlat0.xy * u_xlat2.xy;\n    u_xlat24 = (-u_xlat1.x) +
            u_xlat9.x;\n    u_xlat24 = u_xlat0.y * u_xlat24 + u_xlat1.x;\n    u_xlat16.x
            = (-u_xlat17.x) + u_xlat16.x;\n    u_xlat8.x = u_xlat0.y * u_xlat16.x
            + u_xlat17.x;\n    u_xlat8.x = (-u_xlat24) + u_xlat8.x;\n    u_xlat0.x
            = u_xlat0.x * u_xlat8.x + u_xlat24;\n    u_xlat0.x = u_xlat0.x + 0.5;\n   
            u_xlat8.xy = u_xlat0.xx + (-vs_TEXCOORD3.xy);\n    u_xlat8.xy = vec2(Vector1_BE84214E)
            * u_xlat8.xy + vs_TEXCOORD3.xy;\n    u_xlat10_8.xyz = texture2D(Texture2D_44F18FCE,
            u_xlat8.xy).xyz;\n    u_xlat1.xy = Vector2_A6157063.xy * _TimeParameters.xx
            + vs_TEXCOORD3.xy;\n    u_xlat1.xy = u_xlat1.xy * vec2(vec2(Vector1_B073FC91,
            Vector1_B073FC91));\n    u_xlat17.xy = floor(u_xlat1.xy);\n    u_xlat1.xy
            = fract(u_xlat1.xy);\n    u_xlat2.x = float(0.0);\n    u_xlat2.y = float(8.0);\n   
            for(int u_xlati_loop_1 = int(-1) ; u_xlati_loop_1<=1 ; u_xlati_loop_1++)\n   
            {\n        u_xlat3.y = float(u_xlati_loop_1);\n        u_xlat19.xy =
            u_xlat2.xy;\n        for(int u_xlati_loop_2 = -1 ; u_xlati_loop_2<=1
            ; u_xlati_loop_2++)\n        {\n            u_xlat3.x = float(u_xlati_loop_2);\n           
            u_xlat4.xy = u_xlat17.xy + u_xlat3.xy;\n            u_xlat4.z = dot(u_xlat4.xy,
            vec2(15.2700005, 99.4100037));\n            u_xlat4.x = dot(u_xlat4.xy,
            vec2(47.6300011, 89.9800034));\n            u_xlat5.xy = sin(u_xlat4.xz);\n           
            u_xlat4.xy = u_xlat5.xy * vec2(46839.3203, 46839.3203);\n           
            u_xlat4.xy = fract(u_xlat4.xy);\n            u_xlat4.xy = u_xlat4.xy
            + u_xlat4.xy;\n            u_xlat4.x = sin(u_xlat4.x);\n            u_xlat5.x
            = u_xlat4.x * 0.5 + u_xlat3.x;\n            u_xlat3.x = cos(u_xlat4.y);\n           
            u_xlat5.y = u_xlat3.x * 0.5 + u_xlat3.y;\n            u_xlat4.xy = (-u_xlat1.xy)
            + u_xlat5.xy;\n            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);\n           
            u_xlat3.x = dot(u_xlat4.xy, u_xlat4.xy);\n            u_xlat3.x = sqrt(u_xlat3.x);\n           
            u_xlatb4 = u_xlat3.x<u_xlat19.y;\n            u_xlat19.xy = (bool(u_xlatb4))
            ? u_xlat3.xx : u_xlat19.xy;\n        }\n        u_xlat2.xy = u_xlat19.xy;\n   
            }\n    u_xlat1.x = log2(u_xlat2.x);\n    u_xlat1.x = u_xlat1.x * Vector1_7E8C9118;\n   
            u_xlat1.x = exp2(u_xlat1.x);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat10_8.xyz;\n    u_xlat0.xyz = u_xlat0.xyz
            * Color_81D75D39.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n   
            u_xlat24 = max(u_xlat24, 1.17549435e-38);\n    u_xlat24 = inversesqrt(u_xlat24);\n   
            u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat16_6.xyz
            = u_xlat0.xyz * vec3(0.959999979, 0.959999979, 0.959999979);\n    u_xlat16_30
            = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_30 = u_xlat16_30
            + u_xlat16_30;\n    u_xlat16_7.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_30))
            + (-u_xlat1.xyz);\n    u_xlat16_30 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);\n   
            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_30 = (-u_xlat16_30)
            + 1.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30
            = u_xlat16_30 * u_xlat16_30;\n    u_xlat10_1 = textureCube(unity_SpecCube0,
            u_xlat16_7.xyz, 4.05000019);\n    u_xlat16_7.x = u_xlat10_1.w + -1.0;\n   
            u_xlat16_7.x = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;\n    u_xlat16_7.x
            = max(u_xlat16_7.x, 0.0);\n    u_xlat16_7.x = log2(u_xlat16_7.x);\n   
            u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.y;\n    u_xlat16_7.x
            = exp2(u_xlat16_7.x);\n    u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;\n   
            u_xlat16_7.xyz = u_xlat10_1.xyz * u_xlat16_7.xxx;\n    u_xlat1.xyz =
            u_xlat16_7.xyz * vec3(0.941176474, 0.941176474, 0.941176474);\n    u_xlat16_30
            = u_xlat16_30 * 0.5 + 0.0399999991;\n    u_xlat1.xyz = u_xlat1.xyz *
            vec3(u_xlat16_30);\n    u_xlat1.xyz = vs_TEXCOORD6.xyz * u_xlat16_6.xyz
            + u_xlat1.xyz;\n    u_xlat16_30 = dot(vs_TEXCOORD1.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_30 = u_xlat16_30
            * unity_LightData.z;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * _MainLightColor.xyz;\n   
            u_xlat8.xyz = vs_TEXCOORD4.xyz * vec3(u_xlat24) + _MainLightPosition.xyz;\n   
            u_xlat25 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat25 = max(u_xlat25,
            1.17549435e-38);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat8.xyz
            = u_xlat8.xyz * vec3(u_xlat25);\n    u_xlat25 = dot(vs_TEXCOORD1.xyz,
            u_xlat8.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat8.x
            = dot(_MainLightPosition.xyz, u_xlat8.xyz);\n    u_xlat8.x = clamp(u_xlat8.x,
            0.0, 1.0);\n    u_xlat16.x = u_xlat25 * u_xlat25;\n    u_xlat16.x = u_xlat16.x
            * -0.9375 + 1.00001001;\n    u_xlat16_30 = u_xlat8.x * u_xlat8.x;\n   
            u_xlat8.x = u_xlat16.x * u_xlat16.x;\n    u_xlat16.x = max(u_xlat16_30,
            0.100000001);\n    u_xlat8.x = u_xlat16.x * u_xlat8.x;\n    u_xlat8.x
            = u_xlat8.x * 3.0;\n    u_xlat8.x = 0.0625 / u_xlat8.x;\n    u_xlat16_30
            = u_xlat8.x + -6.10351563e-05;\n    u_xlat16_6.xyz = vec3(u_xlat16_30)
            * vec3(0.0399999991, 0.0399999991, 0.0399999991) + u_xlat16_6.xyz;\n   
            SV_TARGET0.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz + u_xlat1.xyz;\n   
            SV_TARGET0.w = u_xlat0.x;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 4
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _ADDITIONAL_OFF
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Transparent+0
          - Key: RENDERTYPE
            Value: Transparent
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nvec4 ImmCB_0[4];\nuniform \tmediump vec4
            _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform
            \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform
            \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tmediump vec4
            _AdditionalLightsOcclusionProbes[32];\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tvec4 unity_ProbesOcclusion;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec3 in_POSITION0;\nattribute
            highp vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute
            highp vec4 in_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD0;\nvarying highp
            vec3 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4
            vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec2 vs_TEXCOORD5;\nvarying
            highp vec3 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp
            vec4 vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat
            u_xlat5;\nint u_xlati5;\nbool u_xlatb5;\nfloat u_xlat6;\nvec3 u_xlat12;\nbool
            u_xlatb12;\nfloat u_xlat13;\nint u_xlati13;\nfloat u_xlat19;\nfloat u_xlat21;\nint
            u_xlati21;\nint u_xlati22;\nmediump float u_xlat16_24;\n#define UNITY_DYNAMIC_INDEX_ES2
            0\n\n\n\nvec4 ImmCB_0DynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return ImmCB_0[i];\n#else\n#define d_ar ImmCB_0\n    if (i <= 0) return
            d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2];
            else if (i == 3) return d_ar[3];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\nvoid
            main()\n{\nImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);\nImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);\nImmCB_0[2]
            = vec4(0.0,0.0,1.0,0.0);\nImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);\n    u_xlat0.xyz
            = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz
            + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat21,
            1.17549435e-38);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz
            = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat2.xyz = in_TANGENT0.yyy *
            hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n   
            u_xlat21 = max(u_xlat21, 1.17549435e-38);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            vs_TEXCOORD2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat2 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat2;\n    gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.w
            = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_3.y
            = dot(unity_SHAg, u_xlat1);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);\n   
            u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr,
            u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_4.z
            = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_24 = u_xlat1.y * u_xlat1.y;\n   
            u_xlat16_24 = u_xlat1.x * u_xlat1.x + (-u_xlat16_24);\n    u_xlat16_4.xyz
            = unity_SHC.xyz * vec3(u_xlat16_24) + u_xlat16_4.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz,
            vec3(0.0, 0.0, 0.0));\n    u_xlat16_24 = min(_AdditionalLightsCount.x,
            unity_LightData.y);\n    u_xlati21 = int(u_xlat16_24);\n    u_xlat16_2.y
            = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    u_xlat16_2.w = float(0.0);\n   
            for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati21 ; u_xlati_loop_1++)\n   
            {\n        u_xlat5 = float(u_xlati_loop_1);\n        u_xlatb12 = u_xlat5<2.0;\n       
            u_xlat16_4.xy = (bool(u_xlatb12)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n       
            u_xlat19 = u_xlat5 + -2.0;\n        u_xlat5 = (u_xlatb12) ? u_xlat5 :
            u_xlat19;\n        u_xlatb5 = u_xlat5<1.0;\n        u_xlat16_24 = (u_xlatb5)
            ? u_xlat16_4.x : u_xlat16_4.y;\n        u_xlati5 = int(u_xlat16_24);\n       
            u_xlat12.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati5].www
            + _AdditionalLightsPosition[u_xlati5].xyz;\n        u_xlat6 = dot(u_xlat12.xyz,
            u_xlat12.xyz);\n        u_xlat6 = max(u_xlat6, 6.10351563e-05);\n       
            u_xlat13 = inversesqrt(u_xlat6);\n        u_xlat12.xyz = u_xlat12.xyz
            * vec3(u_xlat13);\n        u_xlat13 = float(1.0) / u_xlat6;\n       
            u_xlat6 = u_xlat6 * _AdditionalLightsAttenuation[u_xlati5].x + _AdditionalLightsAttenuation[u_xlati5].y;\n       
            u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n        u_xlat6 = u_xlat6 * u_xlat13;\n       
            u_xlat16_24 = dot(_AdditionalLightsSpotDir[u_xlati5].xyz, u_xlat12.xyz);\n       
            u_xlat16_24 = u_xlat16_24 * _AdditionalLightsAttenuation[u_xlati5].z
            + _AdditionalLightsAttenuation[u_xlati5].w;\n        u_xlat16_24 = clamp(u_xlat16_24,
            0.0, 1.0);\n        u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n       
            u_xlat6 = u_xlat16_24 * u_xlat6;\n        u_xlati13 = int(_AdditionalLightsOcclusionProbes[u_xlati5].x);\n       
            u_xlat13 = dot(unity_ProbesOcclusion, ImmCB_0DynamicIndex(u_xlati13));\n       
            u_xlat16_24 = max(u_xlat13, _AdditionalLightsOcclusionProbes[u_xlati5].y);\n       
            u_xlat16_24 = u_xlat16_24 * u_xlat6;\n        u_xlat16_4.xyz = vec3(u_xlat16_24)
            * _AdditionalLightsColor[u_xlati5].xyz;\n        u_xlat16_24 = dot(u_xlat1.xyz,
            u_xlat12.xyz);\n        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n       
            u_xlat16_2.yzw = u_xlat16_4.xyz * vec3(u_xlat16_24) + u_xlat16_2.yzw;\n   
            }\n    vs_TEXCOORD2.w = in_TANGENT0.w;\n    vs_TEXCOORD3 = in_TEXCOORD0;\n   
            u_xlat16_2.x = 0.0;\n    vs_TEXCOORD7 = u_xlat16_2;\n    vs_TEXCOORD8
            = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD1.xyz = u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = u_xlat16_3.xyz;\n   
            vs_TEXCOORD5.xy = vec2(0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec4 _TimeParameters;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tvec4 unity_ProbesOcclusion;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 Color_81D75D39;\nuniform
            \tfloat Vector1_BE84214E;\nuniform \tvec2 Vector2_FBD048D4;\nuniform
            \tvec2 Vector2_A6157063;\nuniform \tfloat Vector1_B073FC91;\nuniform
            \tfloat Vector1_53E7ACC2;\nuniform \tfloat Vector1_7E8C9118;\nuniform
            lowp sampler2D Texture2D_44F18FCE;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp
            vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD6;\nvarying highp vec4
            vs_TEXCOORD7;\n#define SV_TARGET0 gl_FragData[0]\nvec3 u_xlat0;\nvec4
            u_xlat1;\nlowp vec4 u_xlat10_1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nbvec4
            u_xlatb2;\nvec4 u_xlat3;\nbvec4 u_xlatb3;\nvec4 u_xlat4;\nbool u_xlatb4;\nvec2
            u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump
            vec3 u_xlat16_8;\nvec3 u_xlat9;\nlowp vec3 u_xlat10_9;\nvec2 u_xlat10;\nbool
            u_xlatb10;\nvec2 u_xlat18;\nvec2 u_xlat19;\nbool u_xlatb19;\nvec2 u_xlat20;\nint
            u_xlati20;\nvec2 u_xlat21;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat28;\nbool
            u_xlatb28;\nint u_xlati29;\nbool u_xlatb29;\nmediump float u_xlat16_33;\nvoid
            main()\n{\n    u_xlat0.xy = vec2(Vector2_FBD048D4.x, Vector2_FBD048D4.y)
            * _TimeParameters.xx + vs_TEXCOORD3.xy;\n    u_xlat0.xy = u_xlat0.xy
            * vec2(vec2(Vector1_53E7ACC2, Vector1_53E7ACC2));\n    u_xlat18.xy =
            floor(u_xlat0.xy);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat1
            = u_xlat18.xyxy * vec4(289.0, 289.0, 289.0, 289.0);\n    u_xlatb1 = greaterThanEqual(u_xlat1,
            (-u_xlat1.zwzw));\n    u_xlat1.x = (u_xlatb1.x) ? float(289.0) : float(-289.0);\n   
            u_xlat1.y = (u_xlatb1.y) ? float(289.0) : float(-289.0);\n    u_xlat1.z
            = (u_xlatb1.z) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat1.w
            = (u_xlatb1.w) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat19.xy
            = u_xlat18.xy * u_xlat1.zw;\n    u_xlat19.xy = fract(u_xlat19.xy);\n   
            u_xlat1.xy = u_xlat19.xy * u_xlat1.xy;\n    u_xlat19.x = u_xlat1.x *
            34.0 + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat19.x;\n    u_xlat19.x
            = u_xlat1.x * 289.0;\n    u_xlatb19 = u_xlat19.x>=(-u_xlat19.x);\n   
            u_xlat19.xy = (bool(u_xlatb19)) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat1.x = u_xlat19.y * u_xlat1.x;\n    u_xlat1.x
            = fract(u_xlat1.x);\n    u_xlat1.x = u_xlat19.x * u_xlat1.x + u_xlat1.y;\n   
            u_xlat10.x = u_xlat1.x * 34.0 + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat10.x;\n   
            u_xlat10.x = u_xlat1.x * 289.0;\n    u_xlatb10 = u_xlat10.x>=(-u_xlat10.x);\n   
            u_xlat10.xy = (bool(u_xlatb10)) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat1.x = u_xlat10.y * u_xlat1.x;\n    u_xlat1.x
            = fract(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * u_xlat10.x;\n    u_xlat1.x
            = u_xlat1.x * 0.024390243;\n    u_xlat1.x = fract(u_xlat1.x);\n    u_xlat1.xy
            = u_xlat1.xx * vec2(2.0, 2.0) + vec2(-1.0, -0.5);\n    u_xlat10.x = floor(u_xlat1.y);\n   
            u_xlat2.x = (-u_xlat10.x) + u_xlat1.x;\n    u_xlat2.y = abs(u_xlat1.x)
            + -0.5;\n    u_xlat1.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat1.x
            = inversesqrt(u_xlat1.x);\n    u_xlat1.xy = u_xlat1.xx * u_xlat2.xy;\n   
            u_xlat1.x = dot(u_xlat1.xy, u_xlat0.xy);\n    u_xlat2 = u_xlat18.xyxy
            + vec4(0.0, 1.0, 1.0, 0.0);\n    u_xlat3 = u_xlat2 * vec4(289.0, 289.0,
            289.0, 289.0);\n    u_xlatb3 = greaterThanEqual(u_xlat3, (-u_xlat3));\n   
            u_xlat4.x = (u_xlatb3.x) ? float(289.0) : float(-289.0);\n    u_xlat4.y
            = (u_xlatb3.y) ? float(289.0) : float(-289.0);\n    u_xlat4.z = (u_xlatb3.x)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat4.w = (u_xlatb3.y)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat10.xy = u_xlat2.xy
            * u_xlat4.zw;\n    u_xlat10.xy = fract(u_xlat10.xy);\n    u_xlat10.xy
            = u_xlat10.xy * u_xlat4.xy;\n    u_xlat28 = u_xlat10.x * 34.0 + 1.0;\n   
            u_xlat10.x = u_xlat10.x * u_xlat28;\n    u_xlat28 = u_xlat10.x * 289.0;\n   
            u_xlatb28 = u_xlat28>=(-u_xlat28);\n    u_xlat2.xy = (bool(u_xlatb28))
            ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n    u_xlat10.x
            = u_xlat10.x * u_xlat2.y;\n    u_xlat10.x = fract(u_xlat10.x);\n    u_xlat10.x
            = u_xlat2.x * u_xlat10.x + u_xlat10.y;\n    u_xlat19.x = u_xlat10.x *
            34.0 + 1.0;\n    u_xlat10.x = u_xlat10.x * u_xlat19.x;\n    u_xlat19.x
            = u_xlat10.x * 289.0;\n    u_xlatb19 = u_xlat19.x>=(-u_xlat19.x);\n   
            u_xlat19.xy = (bool(u_xlatb19)) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat10.x = u_xlat19.y * u_xlat10.x;\n    u_xlat10.x
            = fract(u_xlat10.x);\n    u_xlat10.x = u_xlat10.x * u_xlat19.x;\n   
            u_xlat10.x = u_xlat10.x * 0.024390243;\n    u_xlat10.x = fract(u_xlat10.x);\n   
            u_xlat10.xy = u_xlat10.xx * vec2(2.0, 2.0) + vec2(-1.0, -0.5);\n    u_xlat19.x
            = floor(u_xlat10.y);\n    u_xlat2.x = (-u_xlat19.x) + u_xlat10.x;\n   
            u_xlat2.y = abs(u_xlat10.x) + -0.5;\n    u_xlat10.x = dot(u_xlat2.xy,
            u_xlat2.xy);\n    u_xlat10.x = inversesqrt(u_xlat10.x);\n    u_xlat10.xy
            = u_xlat10.xx * u_xlat2.xy;\n    u_xlat4 = u_xlat0.xyxy + vec4(-0.0,
            -1.0, -1.0, -0.0);\n    u_xlat10.x = dot(u_xlat10.xy, u_xlat4.xy);\n   
            u_xlat3.x = (u_xlatb3.z) ? float(289.0) : float(-289.0);\n    u_xlat3.y
            = (u_xlatb3.w) ? float(289.0) : float(-289.0);\n    u_xlat3.z = (u_xlatb3.z)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat3.w = (u_xlatb3.w)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat19.xy = u_xlat2.zw
            * u_xlat3.zw;\n    u_xlat19.xy = fract(u_xlat19.xy);\n    u_xlat19.xy
            = u_xlat19.xy * u_xlat3.xy;\n    u_xlat2.x = u_xlat19.x * 34.0 + 1.0;\n   
            u_xlat19.x = u_xlat19.x * u_xlat2.x;\n    u_xlat2.x = u_xlat19.x * 289.0;\n   
            u_xlatb2.x = u_xlat2.x>=(-u_xlat2.x);\n    u_xlat2.xy = (u_xlatb2.x)
            ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n    u_xlat19.x
            = u_xlat19.x * u_xlat2.y;\n    u_xlat19.x = fract(u_xlat19.x);\n    u_xlat19.x
            = u_xlat2.x * u_xlat19.x + u_xlat19.y;\n    u_xlat28 = u_xlat19.x * 34.0
            + 1.0;\n    u_xlat19.x = u_xlat19.x * u_xlat28;\n    u_xlat28 = u_xlat19.x
            * 289.0;\n    u_xlatb28 = u_xlat28>=(-u_xlat28);\n    u_xlat2.xy = (bool(u_xlatb28))
            ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n    u_xlat19.x
            = u_xlat19.x * u_xlat2.y;\n    u_xlat19.x = fract(u_xlat19.x);\n    u_xlat19.x
            = u_xlat19.x * u_xlat2.x;\n    u_xlat19.x = u_xlat19.x * 0.024390243;\n   
            u_xlat19.x = fract(u_xlat19.x);\n    u_xlat19.xy = u_xlat19.xx * vec2(2.0,
            2.0) + vec2(-1.0, -0.5);\n    u_xlat28 = floor(u_xlat19.y);\n    u_xlat2.x
            = (-u_xlat28) + u_xlat19.x;\n    u_xlat2.y = abs(u_xlat19.x) + -0.5;\n   
            u_xlat19.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat19.x = inversesqrt(u_xlat19.x);\n   
            u_xlat19.xy = u_xlat19.xx * u_xlat2.xy;\n    u_xlat19.x = dot(u_xlat19.xy,
            u_xlat4.zw);\n    u_xlat18.xy = u_xlat18.xy + vec2(1.0, 1.0);\n    u_xlat2
            = u_xlat18.xyxy * vec4(289.0, 289.0, 289.0, 289.0);\n    u_xlatb2 = greaterThanEqual(u_xlat2,
            (-u_xlat2.zwzw));\n    u_xlat2.x = (u_xlatb2.x) ? float(289.0) : float(-289.0);\n   
            u_xlat2.y = (u_xlatb2.y) ? float(289.0) : float(-289.0);\n    u_xlat2.z
            = (u_xlatb2.z) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat2.w
            = (u_xlatb2.w) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat18.xy
            = u_xlat18.xy * u_xlat2.zw;\n    u_xlat18.xy = fract(u_xlat18.xy);\n   
            u_xlat18.xy = u_xlat18.xy * u_xlat2.xy;\n    u_xlat28 = u_xlat18.x *
            34.0 + 1.0;\n    u_xlat18.x = u_xlat18.x * u_xlat28;\n    u_xlat28 =
            u_xlat18.x * 289.0;\n    u_xlatb28 = u_xlat28>=(-u_xlat28);\n    u_xlat2.xy
            = (bool(u_xlatb28)) ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n   
            u_xlat18.x = u_xlat18.x * u_xlat2.y;\n    u_xlat18.x = fract(u_xlat18.x);\n   
            u_xlat18.x = u_xlat2.x * u_xlat18.x + u_xlat18.y;\n    u_xlat27 = u_xlat18.x
            * 34.0 + 1.0;\n    u_xlat18.x = u_xlat18.x * u_xlat27;\n    u_xlat27
            = u_xlat18.x * 289.0;\n    u_xlatb27 = u_xlat27>=(-u_xlat27);\n    u_xlat2.xy
            = (bool(u_xlatb27)) ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n   
            u_xlat18.x = u_xlat18.x * u_xlat2.y;\n    u_xlat18.x = fract(u_xlat18.x);\n   
            u_xlat18.x = u_xlat18.x * u_xlat2.x;\n    u_xlat18.x = u_xlat18.x * 0.024390243;\n   
            u_xlat18.x = fract(u_xlat18.x);\n    u_xlat18.xy = u_xlat18.xx * vec2(2.0,
            2.0) + vec2(-1.0, -0.5);\n    u_xlat27 = floor(u_xlat18.y);\n    u_xlat2.x
            = (-u_xlat27) + u_xlat18.x;\n    u_xlat2.y = abs(u_xlat18.x) + -0.5;\n   
            u_xlat18.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat18.x = inversesqrt(u_xlat18.x);\n   
            u_xlat18.xy = u_xlat18.xx * u_xlat2.xy;\n    u_xlat2.xy = u_xlat0.xy
            + vec2(-1.0, -1.0);\n    u_xlat18.x = dot(u_xlat18.xy, u_xlat2.xy);\n   
            u_xlat2.xy = u_xlat0.xy * u_xlat0.xy;\n    u_xlat2.xy = u_xlat0.xy *
            u_xlat2.xy;\n    u_xlat20.xy = u_xlat0.xy * vec2(6.0, 6.0) + vec2(-15.0,
            -15.0);\n    u_xlat0.xy = u_xlat0.xy * u_xlat20.xy + vec2(10.0, 10.0);\n   
            u_xlat0.xy = u_xlat0.xy * u_xlat2.xy;\n    u_xlat27 = (-u_xlat1.x) +
            u_xlat10.x;\n    u_xlat27 = u_xlat0.y * u_xlat27 + u_xlat1.x;\n    u_xlat18.x
            = (-u_xlat19.x) + u_xlat18.x;\n    u_xlat9.x = u_xlat0.y * u_xlat18.x
            + u_xlat19.x;\n    u_xlat9.x = (-u_xlat27) + u_xlat9.x;\n    u_xlat0.x
            = u_xlat0.x * u_xlat9.x + u_xlat27;\n    u_xlat0.x = u_xlat0.x + 0.5;\n   
            u_xlat9.xy = u_xlat0.xx + (-vs_TEXCOORD3.xy);\n    u_xlat9.xy = vec2(Vector1_BE84214E)
            * u_xlat9.xy + vs_TEXCOORD3.xy;\n    u_xlat10_9.xyz = texture2D(Texture2D_44F18FCE,
            u_xlat9.xy).xyz;\n    u_xlat1.xy = Vector2_A6157063.xy * _TimeParameters.xx
            + vs_TEXCOORD3.xy;\n    u_xlat1.xy = u_xlat1.xy * vec2(vec2(Vector1_B073FC91,
            Vector1_B073FC91));\n    u_xlat19.xy = floor(u_xlat1.xy);\n    u_xlat1.xy
            = fract(u_xlat1.xy);\n    u_xlat2.x = float(0.0);\n    u_xlat2.y = float(8.0);\n   
            for(int u_xlati_loop_1 = int(-1) ; u_xlati_loop_1<=1 ; u_xlati_loop_1++)\n   
            {\n        u_xlat3.y = float(u_xlati_loop_1);\n        u_xlat21.xy =
            u_xlat2.xy;\n        for(int u_xlati_loop_2 = -1 ; u_xlati_loop_2<=1
            ; u_xlati_loop_2++)\n        {\n            u_xlat3.x = float(u_xlati_loop_2);\n           
            u_xlat4.xy = u_xlat19.xy + u_xlat3.xy;\n            u_xlat4.z = dot(u_xlat4.xy,
            vec2(15.2700005, 99.4100037));\n            u_xlat4.x = dot(u_xlat4.xy,
            vec2(47.6300011, 89.9800034));\n            u_xlat5.xy = sin(u_xlat4.xz);\n           
            u_xlat4.xy = u_xlat5.xy * vec2(46839.3203, 46839.3203);\n           
            u_xlat4.xy = fract(u_xlat4.xy);\n            u_xlat4.xy = u_xlat4.xy
            + u_xlat4.xy;\n            u_xlat4.x = sin(u_xlat4.x);\n            u_xlat5.x
            = u_xlat4.x * 0.5 + u_xlat3.x;\n            u_xlat3.x = cos(u_xlat4.y);\n           
            u_xlat5.y = u_xlat3.x * 0.5 + u_xlat3.y;\n            u_xlat4.xy = (-u_xlat1.xy)
            + u_xlat5.xy;\n            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);\n           
            u_xlat3.x = dot(u_xlat4.xy, u_xlat4.xy);\n            u_xlat3.x = sqrt(u_xlat3.x);\n           
            u_xlatb4 = u_xlat3.x<u_xlat21.y;\n            u_xlat21.xy = (bool(u_xlatb4))
            ? u_xlat3.xx : u_xlat21.xy;\n        }\n        u_xlat2.xy = u_xlat21.xy;\n   
            }\n    u_xlat1.x = log2(u_xlat2.x);\n    u_xlat1.x = u_xlat1.x * Vector1_7E8C9118;\n   
            u_xlat1.x = exp2(u_xlat1.x);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat10_9.xyz;\n    u_xlat0.xyz = u_xlat0.xyz
            * Color_81D75D39.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n   
            u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n   
            u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat16_6.xyz
            = u_xlat0.xyz * vec3(0.959999979, 0.959999979, 0.959999979);\n    u_xlat9.x
            = unity_LightData.z * unity_ProbesOcclusion.x;\n    u_xlat16_33 = dot((-u_xlat1.xyz),
            vs_TEXCOORD1.xyz);\n    u_xlat16_33 = u_xlat16_33 + u_xlat16_33;\n   
            u_xlat16_7.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_33)) + (-u_xlat1.xyz);\n   
            u_xlat16_33 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);\n    u_xlat16_33 =
            clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat16_33 = (-u_xlat16_33) + 1.0;\n   
            u_xlat16_33 = u_xlat16_33 * u_xlat16_33;\n    u_xlat16_33 = u_xlat16_33
            * u_xlat16_33;\n    u_xlat10_1 = textureCube(unity_SpecCube0, u_xlat16_7.xyz,
            4.05000019);\n    u_xlat16_7.x = u_xlat10_1.w + -1.0;\n    u_xlat16_7.x
            = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;\n    u_xlat16_7.x = max(u_xlat16_7.x,
            0.0);\n    u_xlat16_7.x = log2(u_xlat16_7.x);\n    u_xlat16_7.x = u_xlat16_7.x
            * unity_SpecCube0_HDR.y;\n    u_xlat16_7.x = exp2(u_xlat16_7.x);\n   
            u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;\n    u_xlat16_7.xyz
            = u_xlat10_1.xyz * u_xlat16_7.xxx;\n    u_xlat1.xyz = u_xlat16_7.xyz
            * vec3(0.941176474, 0.941176474, 0.941176474);\n    u_xlat16_33 = u_xlat16_33
            * 0.5 + 0.0399999991;\n    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_33);\n   
            u_xlat1.xyz = vs_TEXCOORD6.xyz * u_xlat16_6.xyz + u_xlat1.xyz;\n    u_xlat16_33
            = dot(vs_TEXCOORD1.xyz, _MainLightPosition.xyz);\n    u_xlat16_33 = clamp(u_xlat16_33,
            0.0, 1.0);\n    u_xlat16_33 = u_xlat9.x * u_xlat16_33;\n    u_xlat16_7.xyz
            = vec3(u_xlat16_33) * _MainLightColor.xyz;\n    u_xlat9.xyz = vs_TEXCOORD4.xyz
            * vec3(u_xlat27) + _MainLightPosition.xyz;\n    u_xlat28 = dot(u_xlat9.xyz,
            u_xlat9.xyz);\n    u_xlat28 = max(u_xlat28, 1.17549435e-38);\n    u_xlat28
            = inversesqrt(u_xlat28);\n    u_xlat9.xyz = u_xlat9.xyz * vec3(u_xlat28);\n   
            u_xlat28 = dot(vs_TEXCOORD1.xyz, u_xlat9.xyz);\n    u_xlat28 = clamp(u_xlat28,
            0.0, 1.0);\n    u_xlat9.x = dot(_MainLightPosition.xyz, u_xlat9.xyz);\n   
            u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);\n    u_xlat18.x = u_xlat28 *
            u_xlat28;\n    u_xlat18.x = u_xlat18.x * -0.9375 + 1.00001001;\n    u_xlat16_33
            = u_xlat9.x * u_xlat9.x;\n    u_xlat9.x = u_xlat18.x * u_xlat18.x;\n   
            u_xlat18.x = max(u_xlat16_33, 0.100000001);\n    u_xlat9.x = u_xlat18.x
            * u_xlat9.x;\n    u_xlat9.x = u_xlat9.x * 3.0;\n    u_xlat9.x = 0.0625
            / u_xlat9.x;\n    u_xlat16_33 = u_xlat9.x + -6.10351563e-05;\n    u_xlat16_8.xyz
            = vec3(u_xlat16_33) * vec3(0.0399999991, 0.0399999991, 0.0399999991)
            + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_8.xyz * u_xlat16_7.xyz
            + u_xlat1.xyz;\n    SV_TARGET0.xyz = vs_TEXCOORD7.yzw * u_xlat16_6.xyz
            + u_xlat16_7.xyz;\n    SV_TARGET0.w = u_xlat0.x;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _ADDITIONAL_LIGHTS_VERTEX
          - _MIXED_LIGHTING_SUBTRACTIVE
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Transparent+0
          - Key: RENDERTYPE
            Value: Transparent
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute
            highp vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec3
            vs_TEXCOORD4;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD6;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec4 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nfloat u_xlat12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat12,
            1.17549435e-38);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz
            = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n   
            u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat13 = max(u_xlat13, 1.17549435e-38);\n    u_xlat13 = inversesqrt(u_xlat13);\n   
            vs_TEXCOORD2.xyz = vec3(u_xlat13) * u_xlat1.xyz;\n    vs_TEXCOORD2.w
            = in_TANGENT0.w;\n    vs_TEXCOORD3 = in_TEXCOORD0;\n    vs_TEXCOORD5.xy
            = vec2(0.0, 0.0);\n    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x
            = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat0.yzzx
            * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n   
            u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz
            = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;\n   
            vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD8 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nvec4 ImmCB_0[4];\nuniform \tvec4 _MainLightPosition;\nuniform
            \tmediump vec4 _MainLightColor;\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[32];\nuniform \tmediump vec4 _AdditionalLightsOcclusionProbes[32];\nuniform
            \tvec4 _TimeParameters;\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_LightIndices[2];\nuniform \tvec4 unity_ProbesOcclusion;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 Color_81D75D39;\nuniform
            \tfloat Vector1_BE84214E;\nuniform \tvec2 Vector2_FBD048D4;\nuniform
            \tvec2 Vector2_A6157063;\nuniform \tfloat Vector1_B073FC91;\nuniform
            \tfloat Vector1_53E7ACC2;\nuniform \tfloat Vector1_7E8C9118;\nuniform
            lowp sampler2D Texture2D_44F18FCE;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec3
            vs_TEXCOORD6;\n#define SV_TARGET0 gl_FragData[0]\nvec3 u_xlat0;\nvec4
            u_xlat1;\nbvec4 u_xlatb1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nbvec4
            u_xlatb2;\nvec4 u_xlat3;\nbvec4 u_xlatb3;\nvec4 u_xlat4;\nbool u_xlatb4;\nvec2
            u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump
            vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nvec3
            u_xlat11;\nlowp vec3 u_xlat10_11;\nint u_xlati11;\nvec2 u_xlat12;\nbool
            u_xlatb12;\nvec2 u_xlat22;\nint u_xlati22;\nvec2 u_xlat23;\nbool u_xlatb23;\nvec2
            u_xlat24;\nint u_xlati24;\nvec2 u_xlat25;\nfloat u_xlat33;\nint u_xlati33;\nbool
            u_xlatb33;\nfloat u_xlat34;\nbool u_xlatb34;\nfloat u_xlat35;\nint u_xlati35;\nbool
            u_xlatb35;\nfloat u_xlat36;\nint u_xlati36;\nmediump float u_xlat16_39;\nmediump
            float u_xlat16_40;\n#define UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\n\n\n\n\n\nvec4
            ImmCB_0DynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return
            ImmCB_0[i];\n#else\n#define d_ar ImmCB_0\n    if (i <= 0) return d_ar[0];
            else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else
            if (i == 3) return d_ar[3];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nvec4
            _AdditionalLightsPositionDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsPosition[i];\n#else\n#define d_ar _AdditionalLightsPosition\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return
            d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return
            d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return
            d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return
            d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return
            d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return
            d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return
            d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return
            d_ar[30]; else if (i == 31) return d_ar[31];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\n\nmediump vec4 _AdditionalLightsAttenuationDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsAttenuation[i];\n#else\n#define
            d_ar _AdditionalLightsAttenuation\n    if (i <= 0) return d_ar[0]; else
            if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if
            (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i
            == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i ==
            7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9)
            return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11)
            return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13)
            return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15)
            return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17)
            return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19)
            return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21)
            return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23)
            return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25)
            return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27)
            return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29)
            return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31)
            return d_ar[31];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump
            vec4 _AdditionalLightsSpotDirDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsSpotDir[i];\n#else\n#define d_ar _AdditionalLightsSpotDir\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return
            d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return
            d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return
            d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return
            d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return
            d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return
            d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return
            d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return
            d_ar[30]; else if (i == 31) return d_ar[31];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\n\nmediump vec4 _AdditionalLightsOcclusionProbesDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsOcclusionProbes[i];\n#else\n#define
            d_ar _AdditionalLightsOcclusionProbes\n    if (i <= 0) return d_ar[0];
            else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else
            if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if
            (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i
            == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i ==
            9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11)
            return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13)
            return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15)
            return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17)
            return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19)
            return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21)
            return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23)
            return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25)
            return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27)
            return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29)
            return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31)
            return d_ar[31];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump
            vec4 _AdditionalLightsColorDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsColor[i];\n#else\n#define d_ar _AdditionalLightsColor\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return
            d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return
            d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return
            d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return
            d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return
            d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return
            d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return
            d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return
            d_ar[30]; else if (i == 31) return d_ar[31];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\nvoid main()\n{\nImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);\nImmCB_0[1]
            = vec4(0.0,1.0,0.0,0.0);\nImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);\nImmCB_0[3]
            = vec4(0.0,0.0,0.0,1.0);\n    u_xlat0.xy = vec2(Vector2_FBD048D4.x, Vector2_FBD048D4.y)
            * _TimeParameters.xx + vs_TEXCOORD3.xy;\n    u_xlat0.xy = u_xlat0.xy
            * vec2(vec2(Vector1_53E7ACC2, Vector1_53E7ACC2));\n    u_xlat22.xy =
            floor(u_xlat0.xy);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat1
            = u_xlat22.xyxy * vec4(289.0, 289.0, 289.0, 289.0);\n    u_xlatb1 = greaterThanEqual(u_xlat1,
            (-u_xlat1.zwzw));\n    u_xlat1.x = (u_xlatb1.x) ? float(289.0) : float(-289.0);\n   
            u_xlat1.y = (u_xlatb1.y) ? float(289.0) : float(-289.0);\n    u_xlat1.z
            = (u_xlatb1.z) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat1.w
            = (u_xlatb1.w) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat23.xy
            = u_xlat22.xy * u_xlat1.zw;\n    u_xlat23.xy = fract(u_xlat23.xy);\n   
            u_xlat1.xy = u_xlat23.xy * u_xlat1.xy;\n    u_xlat23.x = u_xlat1.x *
            34.0 + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat23.x;\n    u_xlat23.x
            = u_xlat1.x * 289.0;\n    u_xlatb23 = u_xlat23.x>=(-u_xlat23.x);\n   
            u_xlat23.xy = (bool(u_xlatb23)) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat1.x = u_xlat23.y * u_xlat1.x;\n    u_xlat1.x
            = fract(u_xlat1.x);\n    u_xlat1.x = u_xlat23.x * u_xlat1.x + u_xlat1.y;\n   
            u_xlat12.x = u_xlat1.x * 34.0 + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat12.x;\n   
            u_xlat12.x = u_xlat1.x * 289.0;\n    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);\n   
            u_xlat12.xy = (bool(u_xlatb12)) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat1.x = u_xlat12.y * u_xlat1.x;\n    u_xlat1.x
            = fract(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * u_xlat12.x;\n    u_xlat1.x
            = u_xlat1.x * 0.024390243;\n    u_xlat1.x = fract(u_xlat1.x);\n    u_xlat1.xy
            = u_xlat1.xx * vec2(2.0, 2.0) + vec2(-1.0, -0.5);\n    u_xlat12.x = floor(u_xlat1.y);\n   
            u_xlat2.x = (-u_xlat12.x) + u_xlat1.x;\n    u_xlat2.y = abs(u_xlat1.x)
            + -0.5;\n    u_xlat1.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat1.x
            = inversesqrt(u_xlat1.x);\n    u_xlat1.xy = u_xlat1.xx * u_xlat2.xy;\n   
            u_xlat1.x = dot(u_xlat1.xy, u_xlat0.xy);\n    u_xlat2 = u_xlat22.xyxy
            + vec4(0.0, 1.0, 1.0, 0.0);\n    u_xlat3 = u_xlat2 * vec4(289.0, 289.0,
            289.0, 289.0);\n    u_xlatb3 = greaterThanEqual(u_xlat3, (-u_xlat3));\n   
            u_xlat4.x = (u_xlatb3.x) ? float(289.0) : float(-289.0);\n    u_xlat4.y
            = (u_xlatb3.y) ? float(289.0) : float(-289.0);\n    u_xlat4.z = (u_xlatb3.x)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat4.w = (u_xlatb3.y)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat12.xy = u_xlat2.xy
            * u_xlat4.zw;\n    u_xlat12.xy = fract(u_xlat12.xy);\n    u_xlat12.xy
            = u_xlat12.xy * u_xlat4.xy;\n    u_xlat34 = u_xlat12.x * 34.0 + 1.0;\n   
            u_xlat12.x = u_xlat12.x * u_xlat34;\n    u_xlat34 = u_xlat12.x * 289.0;\n   
            u_xlatb34 = u_xlat34>=(-u_xlat34);\n    u_xlat2.xy = (bool(u_xlatb34))
            ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n    u_xlat12.x
            = u_xlat12.x * u_xlat2.y;\n    u_xlat12.x = fract(u_xlat12.x);\n    u_xlat12.x
            = u_xlat2.x * u_xlat12.x + u_xlat12.y;\n    u_xlat23.x = u_xlat12.x *
            34.0 + 1.0;\n    u_xlat12.x = u_xlat12.x * u_xlat23.x;\n    u_xlat23.x
            = u_xlat12.x * 289.0;\n    u_xlatb23 = u_xlat23.x>=(-u_xlat23.x);\n   
            u_xlat23.xy = (bool(u_xlatb23)) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat12.x = u_xlat23.y * u_xlat12.x;\n    u_xlat12.x
            = fract(u_xlat12.x);\n    u_xlat12.x = u_xlat12.x * u_xlat23.x;\n   
            u_xlat12.x = u_xlat12.x * 0.024390243;\n    u_xlat12.x = fract(u_xlat12.x);\n   
            u_xlat12.xy = u_xlat12.xx * vec2(2.0, 2.0) + vec2(-1.0, -0.5);\n    u_xlat23.x
            = floor(u_xlat12.y);\n    u_xlat2.x = (-u_xlat23.x) + u_xlat12.x;\n   
            u_xlat2.y = abs(u_xlat12.x) + -0.5;\n    u_xlat12.x = dot(u_xlat2.xy,
            u_xlat2.xy);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat12.xy
            = u_xlat12.xx * u_xlat2.xy;\n    u_xlat4 = u_xlat0.xyxy + vec4(-0.0,
            -1.0, -1.0, -0.0);\n    u_xlat12.x = dot(u_xlat12.xy, u_xlat4.xy);\n   
            u_xlat3.x = (u_xlatb3.z) ? float(289.0) : float(-289.0);\n    u_xlat3.y
            = (u_xlatb3.w) ? float(289.0) : float(-289.0);\n    u_xlat3.z = (u_xlatb3.z)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat3.w = (u_xlatb3.w)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat23.xy = u_xlat2.zw
            * u_xlat3.zw;\n    u_xlat23.xy = fract(u_xlat23.xy);\n    u_xlat23.xy
            = u_xlat23.xy * u_xlat3.xy;\n    u_xlat2.x = u_xlat23.x * 34.0 + 1.0;\n   
            u_xlat23.x = u_xlat23.x * u_xlat2.x;\n    u_xlat2.x = u_xlat23.x * 289.0;\n   
            u_xlatb2.x = u_xlat2.x>=(-u_xlat2.x);\n    u_xlat2.xy = (u_xlatb2.x)
            ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n    u_xlat23.x
            = u_xlat23.x * u_xlat2.y;\n    u_xlat23.x = fract(u_xlat23.x);\n    u_xlat23.x
            = u_xlat2.x * u_xlat23.x + u_xlat23.y;\n    u_xlat34 = u_xlat23.x * 34.0
            + 1.0;\n    u_xlat23.x = u_xlat23.x * u_xlat34;\n    u_xlat34 = u_xlat23.x
            * 289.0;\n    u_xlatb34 = u_xlat34>=(-u_xlat34);\n    u_xlat2.xy = (bool(u_xlatb34))
            ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n    u_xlat23.x
            = u_xlat23.x * u_xlat2.y;\n    u_xlat23.x = fract(u_xlat23.x);\n    u_xlat23.x
            = u_xlat23.x * u_xlat2.x;\n    u_xlat23.x = u_xlat23.x * 0.024390243;\n   
            u_xlat23.x = fract(u_xlat23.x);\n    u_xlat23.xy = u_xlat23.xx * vec2(2.0,
            2.0) + vec2(-1.0, -0.5);\n    u_xlat34 = floor(u_xlat23.y);\n    u_xlat2.x
            = (-u_xlat34) + u_xlat23.x;\n    u_xlat2.y = abs(u_xlat23.x) + -0.5;\n   
            u_xlat23.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat23.x = inversesqrt(u_xlat23.x);\n   
            u_xlat23.xy = u_xlat23.xx * u_xlat2.xy;\n    u_xlat23.x = dot(u_xlat23.xy,
            u_xlat4.zw);\n    u_xlat22.xy = u_xlat22.xy + vec2(1.0, 1.0);\n    u_xlat2
            = u_xlat22.xyxy * vec4(289.0, 289.0, 289.0, 289.0);\n    u_xlatb2 = greaterThanEqual(u_xlat2,
            (-u_xlat2.zwzw));\n    u_xlat2.x = (u_xlatb2.x) ? float(289.0) : float(-289.0);\n   
            u_xlat2.y = (u_xlatb2.y) ? float(289.0) : float(-289.0);\n    u_xlat2.z
            = (u_xlatb2.z) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat2.w
            = (u_xlatb2.w) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat22.xy
            = u_xlat22.xy * u_xlat2.zw;\n    u_xlat22.xy = fract(u_xlat22.xy);\n   
            u_xlat22.xy = u_xlat22.xy * u_xlat2.xy;\n    u_xlat34 = u_xlat22.x *
            34.0 + 1.0;\n    u_xlat22.x = u_xlat22.x * u_xlat34;\n    u_xlat34 =
            u_xlat22.x * 289.0;\n    u_xlatb34 = u_xlat34>=(-u_xlat34);\n    u_xlat2.xy
            = (bool(u_xlatb34)) ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n   
            u_xlat22.x = u_xlat22.x * u_xlat2.y;\n    u_xlat22.x = fract(u_xlat22.x);\n   
            u_xlat22.x = u_xlat2.x * u_xlat22.x + u_xlat22.y;\n    u_xlat33 = u_xlat22.x
            * 34.0 + 1.0;\n    u_xlat22.x = u_xlat22.x * u_xlat33;\n    u_xlat33
            = u_xlat22.x * 289.0;\n    u_xlatb33 = u_xlat33>=(-u_xlat33);\n    u_xlat2.xy
            = (bool(u_xlatb33)) ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n   
            u_xlat22.x = u_xlat22.x * u_xlat2.y;\n    u_xlat22.x = fract(u_xlat22.x);\n   
            u_xlat22.x = u_xlat22.x * u_xlat2.x;\n    u_xlat22.x = u_xlat22.x * 0.024390243;\n   
            u_xlat22.x = fract(u_xlat22.x);\n    u_xlat22.xy = u_xlat22.xx * vec2(2.0,
            2.0) + vec2(-1.0, -0.5);\n    u_xlat33 = floor(u_xlat22.y);\n    u_xlat2.x
            = (-u_xlat33) + u_xlat22.x;\n    u_xlat2.y = abs(u_xlat22.x) + -0.5;\n   
            u_xlat22.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat22.x = inversesqrt(u_xlat22.x);\n   
            u_xlat22.xy = u_xlat22.xx * u_xlat2.xy;\n    u_xlat2.xy = u_xlat0.xy
            + vec2(-1.0, -1.0);\n    u_xlat22.x = dot(u_xlat22.xy, u_xlat2.xy);\n   
            u_xlat2.xy = u_xlat0.xy * u_xlat0.xy;\n    u_xlat2.xy = u_xlat0.xy *
            u_xlat2.xy;\n    u_xlat24.xy = u_xlat0.xy * vec2(6.0, 6.0) + vec2(-15.0,
            -15.0);\n    u_xlat0.xy = u_xlat0.xy * u_xlat24.xy + vec2(10.0, 10.0);\n   
            u_xlat0.xy = u_xlat0.xy * u_xlat2.xy;\n    u_xlat33 = (-u_xlat1.x) +
            u_xlat12.x;\n    u_xlat33 = u_xlat0.y * u_xlat33 + u_xlat1.x;\n    u_xlat22.x
            = (-u_xlat23.x) + u_xlat22.x;\n    u_xlat11.x = u_xlat0.y * u_xlat22.x
            + u_xlat23.x;\n    u_xlat11.x = (-u_xlat33) + u_xlat11.x;\n    u_xlat0.x
            = u_xlat0.x * u_xlat11.x + u_xlat33;\n    u_xlat0.x = u_xlat0.x + 0.5;\n   
            u_xlat11.xy = u_xlat0.xx + (-vs_TEXCOORD3.xy);\n    u_xlat11.xy = vec2(Vector1_BE84214E)
            * u_xlat11.xy + vs_TEXCOORD3.xy;\n    u_xlat10_11.xyz = texture2D(Texture2D_44F18FCE,
            u_xlat11.xy).xyz;\n    u_xlat1.xy = Vector2_A6157063.xy * _TimeParameters.xx
            + vs_TEXCOORD3.xy;\n    u_xlat1.xy = u_xlat1.xy * vec2(vec2(Vector1_B073FC91,
            Vector1_B073FC91));\n    u_xlat23.xy = floor(u_xlat1.xy);\n    u_xlat1.xy
            = fract(u_xlat1.xy);\n    u_xlat2.x = float(0.0);\n    u_xlat2.y = float(8.0);\n   
            for(int u_xlati_loop_1 = int(-1) ; u_xlati_loop_1<=1 ; u_xlati_loop_1++)\n   
            {\n        u_xlat3.y = float(u_xlati_loop_1);\n        u_xlat25.xy =
            u_xlat2.xy;\n        for(int u_xlati_loop_2 = -1 ; u_xlati_loop_2<=1
            ; u_xlati_loop_2++)\n        {\n            u_xlat3.x = float(u_xlati_loop_2);\n           
            u_xlat4.xy = u_xlat23.xy + u_xlat3.xy;\n            u_xlat4.z = dot(u_xlat4.xy,
            vec2(15.2700005, 99.4100037));\n            u_xlat4.x = dot(u_xlat4.xy,
            vec2(47.6300011, 89.9800034));\n            u_xlat5.xy = sin(u_xlat4.xz);\n           
            u_xlat4.xy = u_xlat5.xy * vec2(46839.3203, 46839.3203);\n           
            u_xlat4.xy = fract(u_xlat4.xy);\n            u_xlat4.xy = u_xlat4.xy
            + u_xlat4.xy;\n            u_xlat4.x = sin(u_xlat4.x);\n            u_xlat5.x
            = u_xlat4.x * 0.5 + u_xlat3.x;\n            u_xlat3.x = cos(u_xlat4.y);\n           
            u_xlat5.y = u_xlat3.x * 0.5 + u_xlat3.y;\n            u_xlat4.xy = (-u_xlat1.xy)
            + u_xlat5.xy;\n            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);\n           
            u_xlat3.x = dot(u_xlat4.xy, u_xlat4.xy);\n            u_xlat3.x = sqrt(u_xlat3.x);\n           
            u_xlatb4 = u_xlat3.x<u_xlat25.y;\n            u_xlat25.xy = (bool(u_xlatb4))
            ? u_xlat3.xx : u_xlat25.xy;\n        }\n        u_xlat2.xy = u_xlat25.xy;\n   
            }\n    u_xlat1.x = log2(u_xlat2.x);\n    u_xlat1.x = u_xlat1.x * Vector1_7E8C9118;\n   
            u_xlat1.x = exp2(u_xlat1.x);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat10_11.xyz;\n    u_xlat0.xyz = u_xlat0.xyz
            * Color_81D75D39.xyz;\n    u_xlat33 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n   
            u_xlat33 = max(u_xlat33, 1.17549435e-38);\n    u_xlat33 = inversesqrt(u_xlat33);\n   
            u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD4.xyz;\n    u_xlat16_6.xyz
            = u_xlat0.xyz * vec3(0.959999979, 0.959999979, 0.959999979);\n    u_xlat11.x
            = unity_LightData.z * unity_ProbesOcclusion.x;\n    u_xlat16_39 = dot((-u_xlat1.xyz),
            vs_TEXCOORD1.xyz);\n    u_xlat16_39 = u_xlat16_39 + u_xlat16_39;\n   
            u_xlat16_7.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_39)) + (-u_xlat1.xyz);\n   
            u_xlat16_39 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);\n    u_xlat16_39 =
            clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_39 = (-u_xlat16_39) + 1.0;\n   
            u_xlat16_39 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_39 = u_xlat16_39
            * u_xlat16_39;\n    u_xlat10_2 = textureCube(unity_SpecCube0, u_xlat16_7.xyz,
            4.05000019);\n    u_xlat16_7.x = u_xlat10_2.w + -1.0;\n    u_xlat16_7.x
            = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;\n    u_xlat16_7.x = max(u_xlat16_7.x,
            0.0);\n    u_xlat16_7.x = log2(u_xlat16_7.x);\n    u_xlat16_7.x = u_xlat16_7.x
            * unity_SpecCube0_HDR.y;\n    u_xlat16_7.x = exp2(u_xlat16_7.x);\n   
            u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;\n    u_xlat16_7.xyz
            = u_xlat10_2.xyz * u_xlat16_7.xxx;\n    u_xlat2.xyz = u_xlat16_7.xyz
            * vec3(0.941176474, 0.941176474, 0.941176474);\n    u_xlat16_39 = u_xlat16_39
            * 0.5 + 0.0399999991;\n    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat16_39);\n   
            u_xlat2.xyz = vs_TEXCOORD6.xyz * u_xlat16_6.xyz + u_xlat2.xyz;\n    u_xlat16_39
            = dot(vs_TEXCOORD1.xyz, _MainLightPosition.xyz);\n    u_xlat16_39 = clamp(u_xlat16_39,
            0.0, 1.0);\n    u_xlat16_39 = u_xlat11.x * u_xlat16_39;\n    u_xlat16_7.xyz
            = vec3(u_xlat16_39) * _MainLightColor.xyz;\n    u_xlat11.xyz = vs_TEXCOORD4.xyz
            * vec3(u_xlat33) + _MainLightPosition.xyz;\n    u_xlat34 = dot(u_xlat11.xyz,
            u_xlat11.xyz);\n    u_xlat34 = max(u_xlat34, 1.17549435e-38);\n    u_xlat34
            = inversesqrt(u_xlat34);\n    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat34);\n   
            u_xlat34 = dot(vs_TEXCOORD1.xyz, u_xlat11.xyz);\n    u_xlat34 = clamp(u_xlat34,
            0.0, 1.0);\n    u_xlat11.x = dot(_MainLightPosition.xyz, u_xlat11.xyz);\n   
            u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);\n    u_xlat22.x = u_xlat34
            * u_xlat34;\n    u_xlat22.x = u_xlat22.x * -0.9375 + 1.00001001;\n   
            u_xlat16_39 = u_xlat11.x * u_xlat11.x;\n    u_xlat11.x = u_xlat22.x *
            u_xlat22.x;\n    u_xlat22.x = max(u_xlat16_39, 0.100000001);\n    u_xlat11.x
            = u_xlat22.x * u_xlat11.x;\n    u_xlat11.x = u_xlat11.x * 3.0;\n    u_xlat11.x
            = 0.0625 / u_xlat11.x;\n    u_xlat16_39 = u_xlat11.x + -6.10351563e-05;\n   
            u_xlat16_8.xyz = vec3(u_xlat16_39) * vec3(0.0399999991, 0.0399999991,
            0.0399999991) + u_xlat16_6.xyz;\n    u_xlat16_7.xyz = u_xlat16_8.xyz
            * u_xlat16_7.xyz + u_xlat2.xyz;\n    u_xlat16_39 = min(_AdditionalLightsCount.x,
            unity_LightData.y);\n    u_xlati11 = int(u_xlat16_39);\n    u_xlat16_8.xyz
            = u_xlat16_7.xyz;\n    for(int u_xlati_loop_3 = 0 ; u_xlati_loop_3<u_xlati11
            ; u_xlati_loop_3++)\n    {\n        u_xlat33 = float(u_xlati_loop_3);\n       
            u_xlatb34 = u_xlat33<2.0;\n        u_xlat16_9.xy = (bool(u_xlatb34))
            ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n        u_xlat2.x
            = u_xlat33 + -2.0;\n        u_xlat33 = (u_xlatb34) ? u_xlat33 : u_xlat2.x;\n       
            u_xlatb33 = u_xlat33<1.0;\n        u_xlat16_39 = (u_xlatb33) ? u_xlat16_9.x
            : u_xlat16_9.y;\n        u_xlati33 = int(u_xlat16_39);\n        u_xlat2.xyz
            = (-vs_TEXCOORD0.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati33).www
            + _AdditionalLightsPositionDynamicIndex(u_xlati33).xyz;\n        u_xlat34
            = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat34 = max(u_xlat34, 6.10351563e-05);\n       
            u_xlat35 = inversesqrt(u_xlat34);\n        u_xlat3.xyz = vec3(u_xlat35)
            * u_xlat2.xyz;\n        u_xlat36 = float(1.0) / u_xlat34;\n        u_xlat34
            = u_xlat34 * _AdditionalLightsAttenuationDynamicIndex(u_xlati33).x +
            _AdditionalLightsAttenuationDynamicIndex(u_xlati33).y;\n        u_xlat34
            = clamp(u_xlat34, 0.0, 1.0);\n        u_xlat34 = u_xlat34 * u_xlat36;\n       
            u_xlat16_39 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati33).xyz,
            u_xlat3.xyz);\n        u_xlat16_39 = u_xlat16_39 * _AdditionalLightsAttenuationDynamicIndex(u_xlati33).z
            + _AdditionalLightsAttenuationDynamicIndex(u_xlati33).w;\n        u_xlat16_39
            = clamp(u_xlat16_39, 0.0, 1.0);\n        u_xlat16_39 = u_xlat16_39 *
            u_xlat16_39;\n        u_xlat34 = u_xlat34 * u_xlat16_39;\n        u_xlati36
            = int(_AdditionalLightsOcclusionProbesDynamicIndex(u_xlati33).x);\n       
            u_xlat36 = dot(unity_ProbesOcclusion, ImmCB_0DynamicIndex(u_xlati36));\n       
            u_xlat16_39 = max(u_xlat36, _AdditionalLightsOcclusionProbesDynamicIndex(u_xlati33).y);\n       
            u_xlat16_39 = u_xlat34 * u_xlat16_39;\n        u_xlat16_40 = dot(vs_TEXCOORD1.xyz,
            u_xlat3.xyz);\n        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);\n       
            u_xlat16_39 = u_xlat16_39 * u_xlat16_40;\n        u_xlat16_9.xyz = vec3(u_xlat16_39)
            * _AdditionalLightsColorDynamicIndex(u_xlati33).xyz;\n        u_xlat2.xyz
            = u_xlat2.xyz * vec3(u_xlat35) + u_xlat1.xyz;\n        u_xlat33 = dot(u_xlat2.xyz,
            u_xlat2.xyz);\n        u_xlat33 = max(u_xlat33, 1.17549435e-38);\n       
            u_xlat33 = inversesqrt(u_xlat33);\n        u_xlat2.xyz = vec3(u_xlat33)
            * u_xlat2.xyz;\n        u_xlat33 = dot(vs_TEXCOORD1.xyz, u_xlat2.xyz);\n       
            u_xlat33 = clamp(u_xlat33, 0.0, 1.0);\n        u_xlat34 = dot(u_xlat3.xyz,
            u_xlat2.xyz);\n        u_xlat34 = clamp(u_xlat34, 0.0, 1.0);\n       
            u_xlat33 = u_xlat33 * u_xlat33;\n        u_xlat33 = u_xlat33 * -0.9375
            + 1.00001001;\n        u_xlat16_39 = u_xlat34 * u_xlat34;\n        u_xlat33
            = u_xlat33 * u_xlat33;\n        u_xlat34 = max(u_xlat16_39, 0.100000001);\n       
            u_xlat33 = u_xlat33 * u_xlat34;\n        u_xlat33 = u_xlat33 * 3.0;\n       
            u_xlat33 = 0.0625 / u_xlat33;\n        u_xlat16_39 = u_xlat33 + -6.10351563e-05;\n       
            u_xlat16_10.xyz = vec3(u_xlat16_39) * vec3(0.0399999991, 0.0399999991,
            0.0399999991) + u_xlat16_6.xyz;\n        u_xlat16_8.xyz = u_xlat16_10.xyz
            * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    }\n    SV_TARGET0.xyz = u_xlat16_8.xyz;\n   
            SV_TARGET0.w = u_xlat0.x;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _ADDITIONAL_LIGHTS
          - _MIXED_LIGHTING_SUBTRACTIVE
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Transparent+0
          - Key: RENDERTYPE
            Value: Transparent
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute
            highp vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec4 in_TANGENT0;\nattribute highp vec4 in_TEXCOORD0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp
            vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec3
            vs_TEXCOORD4;\nvarying highp vec2 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD6;\nvarying
            highp vec4 vs_TEXCOORD7;\nvarying highp vec4 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nmediump
            vec3 u_xlat16_3;\nfloat u_xlat12;\nfloat u_xlat13;\nvoid main()\n{\n   
            u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    vs_TEXCOORD0.xyz = u_xlat0.xyz;\n   
            vs_TEXCOORD4.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x
            = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat12,
            1.17549435e-38);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz
            = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n   
            u_xlat1.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx
            + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_TANGENT0.zzz + u_xlat1.xyz;\n    u_xlat13 = dot(u_xlat1.xyz, u_xlat1.xyz);\n   
            u_xlat13 = max(u_xlat13, 1.17549435e-38);\n    u_xlat13 = inversesqrt(u_xlat13);\n   
            vs_TEXCOORD2.xyz = vec3(u_xlat13) * u_xlat1.xyz;\n    vs_TEXCOORD2.w
            = in_TANGENT0.w;\n    vs_TEXCOORD3 = in_TEXCOORD0;\n    vs_TEXCOORD5.xy
            = vec2(0.0, 0.0);\n    u_xlat16_2.x = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2.x
            = u_xlat0.x * u_xlat0.x + (-u_xlat16_2.x);\n    u_xlat16_1 = u_xlat0.yzzx
            * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_1);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_3.xyz;\n   
            u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y
            = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n   
            u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_2.xyz
            = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD6.xyz = u_xlat16_2.xyz;\n   
            vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD8 = vec4(0.0,
            0.0, 0.0, 0.0);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tvec4 _TimeParameters;\nuniform \tmediump
            vec4 unity_LightData;\nuniform \tvec4 unity_ProbesOcclusion;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 Color_81D75D39;\nuniform
            \tfloat Vector1_BE84214E;\nuniform \tvec2 Vector2_FBD048D4;\nuniform
            \tvec2 Vector2_A6157063;\nuniform \tfloat Vector1_B073FC91;\nuniform
            \tfloat Vector1_53E7ACC2;\nuniform \tfloat Vector1_7E8C9118;\nuniform
            lowp sampler2D Texture2D_44F18FCE;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec3 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp
            vec3 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD6;\n#define SV_TARGET0
            gl_FragData[0]\nvec3 u_xlat0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nbvec4
            u_xlatb1;\nvec4 u_xlat2;\nbvec4 u_xlatb2;\nvec4 u_xlat3;\nbvec4 u_xlatb3;\nvec4
            u_xlat4;\nbool u_xlatb4;\nvec2 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump
            vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp vec3 u_xlat10_8;\nvec2 u_xlat9;\nbool
            u_xlatb9;\nvec2 u_xlat16;\nvec2 u_xlat17;\nbool u_xlatb17;\nvec2 u_xlat18;\nint
            u_xlati18;\nvec2 u_xlat19;\nfloat u_xlat24;\nbool u_xlatb24;\nfloat u_xlat25;\nbool
            u_xlatb25;\nint u_xlati26;\nbool u_xlatb26;\nmediump float u_xlat16_30;\nvoid
            main()\n{\n    u_xlat0.xy = vec2(Vector2_FBD048D4.x, Vector2_FBD048D4.y)
            * _TimeParameters.xx + vs_TEXCOORD3.xy;\n    u_xlat0.xy = u_xlat0.xy
            * vec2(vec2(Vector1_53E7ACC2, Vector1_53E7ACC2));\n    u_xlat16.xy =
            floor(u_xlat0.xy);\n    u_xlat0.xy = fract(u_xlat0.xy);\n    u_xlat1
            = u_xlat16.xyxy * vec4(289.0, 289.0, 289.0, 289.0);\n    u_xlatb1 = greaterThanEqual(u_xlat1,
            (-u_xlat1.zwzw));\n    u_xlat1.x = (u_xlatb1.x) ? float(289.0) : float(-289.0);\n   
            u_xlat1.y = (u_xlatb1.y) ? float(289.0) : float(-289.0);\n    u_xlat1.z
            = (u_xlatb1.z) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat1.w
            = (u_xlatb1.w) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat17.xy
            = u_xlat16.xy * u_xlat1.zw;\n    u_xlat17.xy = fract(u_xlat17.xy);\n   
            u_xlat1.xy = u_xlat17.xy * u_xlat1.xy;\n    u_xlat17.x = u_xlat1.x *
            34.0 + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat17.x;\n    u_xlat17.x
            = u_xlat1.x * 289.0;\n    u_xlatb17 = u_xlat17.x>=(-u_xlat17.x);\n   
            u_xlat17.xy = (bool(u_xlatb17)) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat1.x = u_xlat17.y * u_xlat1.x;\n    u_xlat1.x
            = fract(u_xlat1.x);\n    u_xlat1.x = u_xlat17.x * u_xlat1.x + u_xlat1.y;\n   
            u_xlat9.x = u_xlat1.x * 34.0 + 1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat9.x;\n   
            u_xlat9.x = u_xlat1.x * 289.0;\n    u_xlatb9 = u_xlat9.x>=(-u_xlat9.x);\n   
            u_xlat9.xy = (bool(u_xlatb9)) ? vec2(289.0, 0.00346020772) : vec2(-289.0,
            -0.00346020772);\n    u_xlat1.x = u_xlat9.y * u_xlat1.x;\n    u_xlat1.x
            = fract(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * u_xlat9.x;\n    u_xlat1.x
            = u_xlat1.x * 0.024390243;\n    u_xlat1.x = fract(u_xlat1.x);\n    u_xlat1.xy
            = u_xlat1.xx * vec2(2.0, 2.0) + vec2(-1.0, -0.5);\n    u_xlat9.x = floor(u_xlat1.y);\n   
            u_xlat2.x = (-u_xlat9.x) + u_xlat1.x;\n    u_xlat2.y = abs(u_xlat1.x)
            + -0.5;\n    u_xlat1.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat1.x
            = inversesqrt(u_xlat1.x);\n    u_xlat1.xy = u_xlat1.xx * u_xlat2.xy;\n   
            u_xlat1.x = dot(u_xlat1.xy, u_xlat0.xy);\n    u_xlat2 = u_xlat16.xyxy
            + vec4(0.0, 1.0, 1.0, 0.0);\n    u_xlat3 = u_xlat2 * vec4(289.0, 289.0,
            289.0, 289.0);\n    u_xlatb3 = greaterThanEqual(u_xlat3, (-u_xlat3));\n   
            u_xlat4.x = (u_xlatb3.x) ? float(289.0) : float(-289.0);\n    u_xlat4.y
            = (u_xlatb3.y) ? float(289.0) : float(-289.0);\n    u_xlat4.z = (u_xlatb3.x)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat4.w = (u_xlatb3.y)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat9.xy = u_xlat2.xy
            * u_xlat4.zw;\n    u_xlat9.xy = fract(u_xlat9.xy);\n    u_xlat9.xy =
            u_xlat9.xy * u_xlat4.xy;\n    u_xlat25 = u_xlat9.x * 34.0 + 1.0;\n   
            u_xlat9.x = u_xlat9.x * u_xlat25;\n    u_xlat25 = u_xlat9.x * 289.0;\n   
            u_xlatb25 = u_xlat25>=(-u_xlat25);\n    u_xlat2.xy = (bool(u_xlatb25))
            ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n    u_xlat9.x
            = u_xlat9.x * u_xlat2.y;\n    u_xlat9.x = fract(u_xlat9.x);\n    u_xlat9.x
            = u_xlat2.x * u_xlat9.x + u_xlat9.y;\n    u_xlat17.x = u_xlat9.x * 34.0
            + 1.0;\n    u_xlat9.x = u_xlat9.x * u_xlat17.x;\n    u_xlat17.x = u_xlat9.x
            * 289.0;\n    u_xlatb17 = u_xlat17.x>=(-u_xlat17.x);\n    u_xlat17.xy
            = (bool(u_xlatb17)) ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n   
            u_xlat9.x = u_xlat17.y * u_xlat9.x;\n    u_xlat9.x = fract(u_xlat9.x);\n   
            u_xlat9.x = u_xlat9.x * u_xlat17.x;\n    u_xlat9.x = u_xlat9.x * 0.024390243;\n   
            u_xlat9.x = fract(u_xlat9.x);\n    u_xlat9.xy = u_xlat9.xx * vec2(2.0,
            2.0) + vec2(-1.0, -0.5);\n    u_xlat17.x = floor(u_xlat9.y);\n    u_xlat2.x
            = (-u_xlat17.x) + u_xlat9.x;\n    u_xlat2.y = abs(u_xlat9.x) + -0.5;\n   
            u_xlat9.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat9.x = inversesqrt(u_xlat9.x);\n   
            u_xlat9.xy = u_xlat9.xx * u_xlat2.xy;\n    u_xlat4 = u_xlat0.xyxy + vec4(-0.0,
            -1.0, -1.0, -0.0);\n    u_xlat9.x = dot(u_xlat9.xy, u_xlat4.xy);\n   
            u_xlat3.x = (u_xlatb3.z) ? float(289.0) : float(-289.0);\n    u_xlat3.y
            = (u_xlatb3.w) ? float(289.0) : float(-289.0);\n    u_xlat3.z = (u_xlatb3.z)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat3.w = (u_xlatb3.w)
            ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat17.xy = u_xlat2.zw
            * u_xlat3.zw;\n    u_xlat17.xy = fract(u_xlat17.xy);\n    u_xlat17.xy
            = u_xlat17.xy * u_xlat3.xy;\n    u_xlat2.x = u_xlat17.x * 34.0 + 1.0;\n   
            u_xlat17.x = u_xlat17.x * u_xlat2.x;\n    u_xlat2.x = u_xlat17.x * 289.0;\n   
            u_xlatb2.x = u_xlat2.x>=(-u_xlat2.x);\n    u_xlat2.xy = (u_xlatb2.x)
            ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n    u_xlat17.x
            = u_xlat17.x * u_xlat2.y;\n    u_xlat17.x = fract(u_xlat17.x);\n    u_xlat17.x
            = u_xlat2.x * u_xlat17.x + u_xlat17.y;\n    u_xlat25 = u_xlat17.x * 34.0
            + 1.0;\n    u_xlat17.x = u_xlat17.x * u_xlat25;\n    u_xlat25 = u_xlat17.x
            * 289.0;\n    u_xlatb25 = u_xlat25>=(-u_xlat25);\n    u_xlat2.xy = (bool(u_xlatb25))
            ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n    u_xlat17.x
            = u_xlat17.x * u_xlat2.y;\n    u_xlat17.x = fract(u_xlat17.x);\n    u_xlat17.x
            = u_xlat17.x * u_xlat2.x;\n    u_xlat17.x = u_xlat17.x * 0.024390243;\n   
            u_xlat17.x = fract(u_xlat17.x);\n    u_xlat17.xy = u_xlat17.xx * vec2(2.0,
            2.0) + vec2(-1.0, -0.5);\n    u_xlat25 = floor(u_xlat17.y);\n    u_xlat2.x
            = (-u_xlat25) + u_xlat17.x;\n    u_xlat2.y = abs(u_xlat17.x) + -0.5;\n   
            u_xlat17.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat17.x = inversesqrt(u_xlat17.x);\n   
            u_xlat17.xy = u_xlat17.xx * u_xlat2.xy;\n    u_xlat17.x = dot(u_xlat17.xy,
            u_xlat4.zw);\n    u_xlat16.xy = u_xlat16.xy + vec2(1.0, 1.0);\n    u_xlat2
            = u_xlat16.xyxy * vec4(289.0, 289.0, 289.0, 289.0);\n    u_xlatb2 = greaterThanEqual(u_xlat2,
            (-u_xlat2.zwzw));\n    u_xlat2.x = (u_xlatb2.x) ? float(289.0) : float(-289.0);\n   
            u_xlat2.y = (u_xlatb2.y) ? float(289.0) : float(-289.0);\n    u_xlat2.z
            = (u_xlatb2.z) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat2.w
            = (u_xlatb2.w) ? float(0.00346020772) : float(-0.00346020772);\n    u_xlat16.xy
            = u_xlat16.xy * u_xlat2.zw;\n    u_xlat16.xy = fract(u_xlat16.xy);\n   
            u_xlat16.xy = u_xlat16.xy * u_xlat2.xy;\n    u_xlat25 = u_xlat16.x *
            34.0 + 1.0;\n    u_xlat16.x = u_xlat16.x * u_xlat25;\n    u_xlat25 =
            u_xlat16.x * 289.0;\n    u_xlatb25 = u_xlat25>=(-u_xlat25);\n    u_xlat2.xy
            = (bool(u_xlatb25)) ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n   
            u_xlat16.x = u_xlat16.x * u_xlat2.y;\n    u_xlat16.x = fract(u_xlat16.x);\n   
            u_xlat16.x = u_xlat2.x * u_xlat16.x + u_xlat16.y;\n    u_xlat24 = u_xlat16.x
            * 34.0 + 1.0;\n    u_xlat16.x = u_xlat16.x * u_xlat24;\n    u_xlat24
            = u_xlat16.x * 289.0;\n    u_xlatb24 = u_xlat24>=(-u_xlat24);\n    u_xlat2.xy
            = (bool(u_xlatb24)) ? vec2(289.0, 0.00346020772) : vec2(-289.0, -0.00346020772);\n   
            u_xlat16.x = u_xlat16.x * u_xlat2.y;\n    u_xlat16.x = fract(u_xlat16.x);\n   
            u_xlat16.x = u_xlat16.x * u_xlat2.x;\n    u_xlat16.x = u_xlat16.x * 0.024390243;\n   
            u_xlat16.x = fract(u_xlat16.x);\n    u_xlat16.xy = u_xlat16.xx * vec2(2.0,
            2.0) + vec2(-1.0, -0.5);\n    u_xlat24 = floor(u_xlat16.y);\n    u_xlat2.x
            = (-u_xlat24) + u_xlat16.x;\n    u_xlat2.y = abs(u_xlat16.x) + -0.5;\n   
            u_xlat16.x = dot(u_xlat2.xy, u_xlat2.xy);\n    u_xlat16.x = inversesqrt(u_xlat16.x);\n   
            u_xlat16.xy = u_xlat16.xx * u_xlat2.xy;\n    u_xlat2.xy = u_xlat0.xy
            + vec2(-1.0, -1.0);\n    u_xlat16.x = dot(u_xlat16.xy, u_xlat2.xy);\n   
            u_xlat2.xy = u_xlat0.xy * u_xlat0.xy;\n    u_xlat2.xy = u_xlat0.xy *
            u_xlat2.xy;\n    u_xlat18.xy = u_xlat0.xy * vec2(6.0, 6.0) + vec2(-15.0,
            -15.0);\n    u_xlat0.xy = u_xlat0.xy * u_xlat18.xy + vec2(10.0, 10.0);\n   
            u_xlat0.xy = u_xlat0.xy * u_xlat2.xy;\n    u_xlat24 = (-u_xlat1.x) +
            u_xlat9.x;\n    u_xlat24 = u_xlat0.y * u_xlat24 + u_xlat1.x;\n    u_xlat16.x
            = (-u_xlat17.x) + u_xlat16.x;\n    u_xlat8.x = u_xlat0.y * u_xlat16.x
            + u_xlat17.x;\n    u_xlat8.x = (-u_xlat24) + u_xlat8.x;\n    u_xlat0.x
            = u_xlat0.x * u_xlat8.x + u_xlat24;\n    u_xlat0.x = u_xlat0.x + 0.5;\n   
            u_xlat8.xy = u_xlat0.xx + (-vs_TEXCOORD3.xy);\n    u_xlat8.xy = vec2(Vector1_BE84214E)
            * u_xlat8.xy + vs_TEXCOORD3.xy;\n    u_xlat10_8.xyz = texture2D(Texture2D_44F18FCE,
            u_xlat8.xy).xyz;\n    u_xlat1.xy = Vector2_A6157063.xy * _TimeParameters.xx
            + vs_TEXCOORD3.xy;\n    u_xlat1.xy = u_xlat1.xy * vec2(vec2(Vector1_B073FC91,
            Vector1_B073FC91));\n    u_xlat17.xy = floor(u_xlat1.xy);\n    u_xlat1.xy
            = fract(u_xlat1.xy);\n    u_xlat2.x = float(0.0);\n    u_xlat2.y = float(8.0);\n   
            for(int u_xlati_loop_1 = int(-1) ; u_xlati_loop_1<=1 ; u_xlati_loop_1++)\n   
            {\n        u_xlat3.y = float(u_xlati_loop_1);\n        u_xlat19.xy =
            u_xlat2.xy;\n        for(int u_xlati_loop_2 = -1 ; u_xlati_loop_2<=1
            ; u_xlati_loop_2++)\n        {\n            u_xlat3.x = float(u_xlati_loop_2);\n           
            u_xlat4.xy = u_xlat17.xy + u_xlat3.xy;\n            u_xlat4.z = dot(u_xlat4.xy,
            vec2(15.2700005, 99.4100037));\n            u_xlat4.x = dot(u_xlat4.xy,
            vec2(47.6300011, 89.9800034));\n            u_xlat5.xy = sin(u_xlat4.xz);\n           
            u_xlat4.xy = u_xlat5.xy * vec2(46839.3203, 46839.3203);\n           
            u_xlat4.xy = fract(u_xlat4.xy);\n            u_xlat4.xy = u_xlat4.xy
            + u_xlat4.xy;\n            u_xlat4.x = sin(u_xlat4.x);\n            u_xlat5.x
            = u_xlat4.x * 0.5 + u_xlat3.x;\n            u_xlat3.x = cos(u_xlat4.y);\n           
            u_xlat5.y = u_xlat3.x * 0.5 + u_xlat3.y;\n            u_xlat4.xy = (-u_xlat1.xy)
            + u_xlat5.xy;\n            u_xlat4.xy = u_xlat4.xy + vec2(0.5, 0.5);\n           
            u_xlat3.x = dot(u_xlat4.xy, u_xlat4.xy);\n            u_xlat3.x = sqrt(u_xlat3.x);\n           
            u_xlatb4 = u_xlat3.x<u_xlat19.y;\n            u_xlat19.xy = (bool(u_xlatb4))
            ? u_xlat3.xx : u_xlat19.xy;\n        }\n        u_xlat2.xy = u_xlat19.xy;\n   
            }\n    u_xlat1.x = log2(u_xlat2.x);\n    u_xlat1.x = u_xlat1.x * Vector1_7E8C9118;\n   
            u_xlat1.x = exp2(u_xlat1.x);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n   
            u_xlat0.xyz = u_xlat0.xxx * u_xlat10_8.xyz;\n    u_xlat0.xyz = u_xlat0.xyz
            * Color_81D75D39.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n   
            u_xlat24 = max(u_xlat24, 1.17549435e-38);\n    u_xlat24 = inversesqrt(u_xlat24);\n   
            u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat16_6.xyz
            = u_xlat0.xyz * vec3(0.959999979, 0.959999979, 0.959999979);\n    u_xlat8.x
            = unity_LightData.z * unity_ProbesOcclusion.x;\n    u_xlat16_30 = dot((-u_xlat1.xyz),
            vs_TEXCOORD1.xyz);\n    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;\n   
            u_xlat16_7.xyz = vs_TEXCOORD1.xyz * (-vec3(u_xlat16_30)) + (-u_xlat1.xyz);\n   
            u_xlat16_30 = dot(vs_TEXCOORD1.xyz, u_xlat1.xyz);\n    u_xlat16_30 =
            clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n   
            u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30
            * u_xlat16_30;\n    u_xlat10_1 = textureCube(unity_SpecCube0, u_xlat16_7.xyz,
            4.05000019);\n    u_xlat16_7.x = u_xlat10_1.w + -1.0;\n    u_xlat16_7.x
            = unity_SpecCube0_HDR.w * u_xlat16_7.x + 1.0;\n    u_xlat16_7.x = max(u_xlat16_7.x,
            0.0);\n    u_xlat16_7.x = log2(u_xlat16_7.x);\n    u_xlat16_7.x = u_xlat16_7.x
            * unity_SpecCube0_HDR.y;\n    u_xlat16_7.x = exp2(u_xlat16_7.x);\n   
            u_xlat16_7.x = u_xlat16_7.x * unity_SpecCube0_HDR.x;\n    u_xlat16_7.xyz
            = u_xlat10_1.xyz * u_xlat16_7.xxx;\n    u_xlat1.xyz = u_xlat16_7.xyz
            * vec3(0.941176474, 0.941176474, 0.941176474);\n    u_xlat16_30 = u_xlat16_30
            * 0.5 + 0.0399999991;\n    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat16_30);\n   
            u_xlat1.xyz = vs_TEXCOORD6.xyz * u_xlat16_6.xyz + u_xlat1.xyz;\n    u_xlat16_30
            = dot(vs_TEXCOORD1.xyz, _MainLightPosition.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30,
            0.0, 1.0);\n    u_xlat16_30 = u_xlat8.x * u_xlat16_30;\n    u_xlat16_7.xyz
            = vec3(u_xlat16_30) * _MainLightColor.xyz;\n    u_xlat8.xyz = vs_TEXCOORD4.xyz
            * vec3(u_xlat24) + _MainLightPosition.xyz;\n    u_xlat25 = dot(u_xlat8.xyz,
            u_xlat8.xyz);\n    u_xlat25 = max(u_xlat25, 1.17549435e-38);\n    u_xlat25
            = inversesqrt(u_xlat25);\n    u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat25);\n   
            u_xlat25 = dot(vs_TEXCOORD1.xyz, u_xlat8.xyz);\n    u_xlat25 = clamp(u_xlat25,
            0.0, 1.0);\n    u_xlat8.x = dot(_MainLightPosition.xyz, u_xlat8.xyz);\n   
            u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat16.x = u_xlat25 *
            u_xlat25;\n    u_xlat16.x = u_xlat16.x * -0.9375 + 1.00001001;\n    u_xlat16_30
            = u_xlat8.x * u_xlat8.x;\n    u_xlat8.x = u_xlat16.x * u_xlat16.x;\n   
            u_xlat16.x = max(u_xlat16_30, 0.100000001);\n    u_xlat8.x = u_xlat16.x
            * u_xlat8.x;\n    u_xlat8.x = u_xlat8.x * 3.0;\n    u_xlat8.x = 0.0625
            / u_xlat8.x;\n    u_xlat16_30 = u_xlat8.x + -6.10351563e-05;\n    u_xlat16_6.xyz
            = vec3(u_xlat16_30) * vec3(0.0399999991, 0.0399999991, 0.0399999991)
            + u_xlat16_6.xyz;\n    SV_TARGET0.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz
            + u_xlat1.xyz;\n    SV_TARGET0.w = u_xlat0.x;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 5
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _ADDITIONAL_OFF
          - _MIXED_LIGHTING_SUBTRACTIVE
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: QUEUE
            Value: Transparent+0
          - Key: RENDERTYPE
            Value: Transparent
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        definedKeywords:
        - LIGHTMAP_ON
        - DIRLIGHTMAP_COMBINED
        - FOG_LINEAR
        - FOG_EXP
        - FOG_EXP2
        - INSTANCING_ON
        - _ADDITIONAL_LIGHTS
        - _ADDITIONAL_LIGHT_SHADOWS
        - _MAIN_LIGHT_SHADOWS
        - _MAIN_LIGHT_SHADOWS_CASCADE
        - _SHADOWS_SOFT
        - _ADDITIONAL_LIGHTS_VERTEX
        - _MIXED_LIGHTING_SUBTRACTIVE
        - _ADDITIONAL_OFF
        keywordGroups:
        - Keywords:
          - _
          - LIGHTMAP_ON
        - Keywords:
          - _
          - DIRLIGHTMAP_COMBINED
        - Keywords:
          - _
          - _MAIN_LIGHT_SHADOWS
        - Keywords:
          - _
          - _MAIN_LIGHT_SHADOWS_CASCADE
        - Keywords:
          - _ADDITIONAL_LIGHTS_VERTEX
          - _ADDITIONAL_LIGHTS
          - _ADDITIONAL_OFF
        - Keywords:
          - _
          - _ADDITIONAL_LIGHT_SHADOWS
        - Keywords:
          - _
          - _SHADOWS_SOFT
        - Keywords:
          - _
          - _MIXED_LIGHTING_SUBTRACTIVE
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - Keywords:
          - __
          - INSTANCING_ON
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: LIGHTMODE
          Value: UniversalForward
        - Key: QUEUE
          Value: Transparent+0
        - Key: RENDERTYPE
          Value: Transparent
        - Key: RENDERPIPELINE
          Value: UniversalPipeline
        UsePass: 0
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _ShadowBias;\nuniform \tvec3 _LightDirection;\nattribute highp
            vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp
            vec4 in_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;\n   
            u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = max(u_xlat6,
            1.17549435e-38);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat1.xyz
            = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat6 = dot(_LightDirection.xyz,
            u_xlat1.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 =
            (-u_xlat6) + 1.0;\n    u_xlat6 = u_xlat6 * _ShadowBias.y;\n    u_xlat0.xyz
            = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position.z = max((-u_xlat0.w), u_xlat0.z);\n    gl_Position.xyw =
            u_xlat0.xyw;\n    vs_TEXCOORD0 = in_TEXCOORD0;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_TARGET0 gl_FragData[0]\nvoid main()\n{\n    SV_TARGET0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 6
          PassId: 1
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: QUEUE
            Value: Transparent+0
          - Key: RENDERTYPE
            Value: Transparent
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        definedKeywords:
        - INSTANCING_ON
        keywordGroups:
        - Keywords:
          - __
          - INSTANCING_ON
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 1
        Tags:
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: QUEUE
          Value: Transparent+0
        - Key: RENDERTYPE
          Value: Transparent
        - Key: RENDERPIPELINE
          Value: UniversalPipeline
        UsePass: 0
      Tags:
      - Key: QUEUE
        Value: Transparent+0
      - Key: RENDERTYPE
        Value: Transparent
      - Key: RENDERPIPELINE
        Value: UniversalPipeline
      SerializedPassCount: 5
      UsePass: 0
    Shader: {fileID: -6465566751694194690, guid: 28bc957708b2085419bf22cbde4c0c3f, type: 3}
    ShaderPath: Assets/Shader/CampFire/CampFire.shadergraph
    ShaderDefinedKeywords:
    - LIGHTMAP_ON
    - DIRLIGHTMAP_COMBINED
    - FOG_LINEAR
    - FOG_EXP
    - FOG_EXP2
    - _ADDITIONAL_LIGHTS
    - _ADDITIONAL_LIGHTS_VERTEX
    - _MIXED_LIGHTING_SUBTRACTIVE
    - _ADDITIONAL_OFF
    - _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform
            \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nattribute
            highp vec4 in_POSITION0;\nvarying mediump float vs_TEXCOORD0;\nvarying
            mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nvec3
            u_xlat13;\nfloat u_xlat16;\nfloat u_xlat21;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat
            u_xlat26;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042,
            0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz
            = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n   
            u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x =
            log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n   
            u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx
            * vec2(0.049999997, 0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) *
            u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n       
            u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x
            = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n       
            u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8
            * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n       
            u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8
            * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8 * 1.44269502;\n       
            u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5,
            0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002,
            0.0);\n        u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat24
            = sqrt(u_xlat24);\n        u_xlat25 = (-u_xlat24) + 1.0;\n        u_xlat25
            = u_xlat25 * 230.831207;\n        u_xlat25 = exp2(u_xlat25);\n       
            u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat26
            = u_xlat26 / u_xlat24;\n        u_xlat28 = dot(u_xlat2.xyz, u_xlat4.xyz);\n       
            u_xlat24 = u_xlat28 / u_xlat24;\n        u_xlat26 = (-u_xlat26) + 1.0;\n       
            u_xlat28 = u_xlat26 * 5.25 + -6.80000019;\n        u_xlat28 = u_xlat26
            * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat26 * u_xlat28 + 0.458999991;\n       
            u_xlat26 = u_xlat26 * u_xlat28 + -0.00286999997;\n        u_xlat26 =
            u_xlat26 * 1.44269502;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat24
            = (-u_xlat24) + 1.0;\n        u_xlat28 = u_xlat24 * 5.25 + -6.80000019;\n       
            u_xlat28 = u_xlat24 * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat24
            * u_xlat28 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat28 + -0.00286999997;\n       
            u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n       
            u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat26 * 0.25 + (-u_xlat24);\n       
            u_xlat24 = u_xlat25 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24,
            0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat5.xyz =
            u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat6.xyz = (-vec3(u_xlat24)) * u_xlat5.xyz;\n        u_xlat6.xyz =
            u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz
            = exp2(u_xlat6.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat25;\n       
            u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat25 = (-u_xlat0.x) + 1.0;\n        u_xlat25 = u_xlat25 * 230.831207;\n       
            u_xlat25 = exp2(u_xlat25);\n        u_xlat26 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n        u_xlat26 = u_xlat26 / u_xlat0.x;\n        u_xlat4.x
            = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n       
            u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat4.x = u_xlat26 * 5.25 +
            -6.80000019;\n        u_xlat4.x = u_xlat26 * u_xlat4.x + 3.82999992;\n       
            u_xlat4.x = u_xlat26 * u_xlat4.x + 0.458999991;\n        u_xlat26 = u_xlat26
            * u_xlat4.x + -0.00286999997;\n        u_xlat26 = u_xlat26 * 1.44269502;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x
            * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat26 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat25 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat25;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz
            * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz *
            u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat26 = min(u_xlat2.y, -0.00100000005);\n       
            u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat5.xyz = vec3(u_xlat26)
            * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz),
            u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n       
            u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat21 = u_xlat5.y
            * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.y * u_xlat21 + 3.82999992;\n       
            u_xlat21 = u_xlat5.y * u_xlat21 + 0.458999991;\n        u_xlat13.x =
            u_xlat5.y * u_xlat21 + -0.00286999997;\n        u_xlat13.x = u_xlat13.x
            * 1.44269502;\n        u_xlat5.y = exp2(u_xlat13.x);\n        u_xlat21
            = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.x * u_xlat21
            + 3.82999992;\n        u_xlat21 = u_xlat5.x * u_xlat21 + 0.458999991;\n       
            u_xlat5.x = u_xlat5.x * u_xlat21 + -0.00286999997;\n        u_xlat5.xyz
            = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x
            = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n       
            u_xlat13.xz = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat6.xyz
            = u_xlat2.xyz * u_xlat13.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 =
            (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n       
            u_xlat26 = exp2(u_xlat26);\n        u_xlat5.x = u_xlat26 * u_xlat5.x
            + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x
            = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz
            = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n       
            u_xlat26 = u_xlat13.z * u_xlat26;\n        u_xlat5.xyz = u_xlat0.xyz
            * vec3(u_xlat26);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz
            = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat26 = u_xlat2.y * -50.0;\n   
            u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z)
            * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_27 = dot(_WorldSpaceLightPos0.xyz,
            (-u_xlat2.xyz));\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27
            = u_xlat16_27 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_27)
            * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n   
            vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n   
            vs_TEXCOORD0 = u_xlat26;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nvarying mediump float vs_TEXCOORD0;\nvarying mediump vec3
            vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\n#define SV_Target0
            gl_FragData[0]\nmediump float u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid
            main()\n{\n    u_xlat16_0 = vs_TEXCOORD0;\n    u_xlat16_0 = clamp(u_xlat16_0,
            0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n   
            SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n   
            SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_NONE
          Tags:
          - Key: QUEUE
            Value: Background
          - Key: RENDERTYPE
            Value: Background
          - Key: PREVIEWTYPE
            Value: Skybox
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform
            \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform
            \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying
            mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat
            u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat
            u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042,
            0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz
            = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n   
            u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x =
            log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n   
            u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx
            * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) *
            u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n       
            u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x
            = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n       
            u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9
            * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n       
            u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9
            * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n       
            u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5,
            0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002,
            0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27
            = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28
            = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29
            = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n       
            u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n       
            u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29
            * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n       
            u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 =
            u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27
            = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n       
            u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27
            * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n       
            u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n       
            u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n       
            u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27,
            0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz =
            u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz =
            u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz
            = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n       
            u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x
            = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n       
            u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 +
            -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n       
            u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29
            * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x
            * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz
            * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz *
            u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n       
            u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29)
            * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz),
            u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n       
            u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y
            * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n       
            u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x =
            u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x
            * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23
            = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23
            + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n       
            u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz
            = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x
            = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n       
            u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz
            = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 =
            (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x
            + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x
            = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz
            = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n       
            u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz
            * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz
            = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x,
            _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y,
            _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n   
            u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30
            = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 +
            0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 =
            dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n   
            u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30,
            1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(8000.0, 8000.0, 8000.0);\n   
            u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);\n    u_xlat16_8.xyz
            = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz
            * vec3(27.0, 27.0, 27.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz / vec3(u_xlat16_30);\n   
            vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n   
            vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n    vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n   
            return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float
            _SunSize;\nvarying mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define
            SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nbool
            u_xlatb2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0.xyz
            = vs_TEXCOORD0.xyz + _WorldSpaceLightPos0.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz,
            u_xlat16_0.xyz);\n    u_xlat16_0.x = sqrt(u_xlat16_0.x);\n    u_xlat16_3.x
            = float(1.0) / _SunSize;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x;\n   
            u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_0.x
            * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x
            = (-u_xlat16_3.x) * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x
            * u_xlat16_0.x;\n    u_xlat16_3.x = vs_TEXCOORD0.y * 50.0;\n    u_xlat16_3.x
            = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz
            + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_1.xyz
            + vs_TEXCOORD2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx
            + u_xlat16_3.xyz;\n    u_xlatb2 = vs_TEXCOORD0.y<0.0;\n    SV_Target0.xyz
            = (bool(u_xlatb2)) ? u_xlat16_1.xyz : u_xlat16_3.xyz;\n    SV_Target0.w
            = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_SIMPLE
          Tags:
          - Key: QUEUE
            Value: Background
          - Key: RENDERTYPE
            Value: Background
          - Key: PREVIEWTYPE
            Value: Skybox
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform
            \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform
            \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying
            highp vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4
            u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4
            u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4
            u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat
            u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat
            u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid
            main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2
            = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0,
            1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042,
            0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz
            = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n   
            u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x =
            log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n   
            u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx
            * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n   
            u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) *
            u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n       
            u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x
            = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n       
            u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9
            * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n       
            u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9
            * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n       
            u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5,
            0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002,
            0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27
            = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28
            = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n       
            u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29
            = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n       
            u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n       
            u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29
            * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n       
            u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 =
            u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27
            = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n       
            u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27
            * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n       
            u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n       
            u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n       
            u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27,
            0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz =
            u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n       
            u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz =
            u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz
            = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n       
            u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x
            = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n       
            u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n       
            u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz,
            u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x
            = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n       
            u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 +
            -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n       
            u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29
            * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n       
            u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x
            * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x
            + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n       
            u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n       
            u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 +
            (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n       
            u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x,
            50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n       
            u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n       
            u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n       
            u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz
            * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz *
            u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n       
            u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n       
            u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n   
            } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n       
            u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29)
            * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz),
            u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n       
            u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y
            * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n       
            u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x =
            u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x
            * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23
            = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23
            + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n       
            u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz
            = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x
            = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n       
            u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz
            = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5,
            0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz,
            u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 =
            (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n       
            u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x
            + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x
            = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy
            + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz
            = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz *
            vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n       
            u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz
            * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx
            + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz
            = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n       
            u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x,
            _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y,
            _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz
            + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n   
            u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30
            = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 +
            0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n   
            u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 =
            dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n   
            u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30,
            1.0);\n    u_xlat16_0.xyz = u_xlat16_0.xyz;\n    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz,
            0.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n   
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(15.0, 15.0, 15.0);\n    u_xlat16_8.xyz
            = u_xlat16_8.xyz / vec3(u_xlat16_30);\n    vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n   
            vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n    vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n   
            vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float
            _SunSize;\nuniform \tmediump float _SunSizeConvergence;\nvarying highp
            vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump
            vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0
            gl_FragData[0]\nmediump vec2 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump
            vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nvoid
            main()\n{\n    u_xlat16_0.x = log2(_SunSize);\n    u_xlat16_0.x = u_xlat16_0.x
            * 0.649999976;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat1.x
            = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n   
            u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD0.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz,
            (-u_xlat1.xyz));\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n   
            u_xlat16_3.x = log2(u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat16_3.x *
            _SunSizeConvergence;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_6
            = (-u_xlat16_3.x) * 1.98000002 + 1.98010004;\n    u_xlat16_0.y = u_xlat16_3.x
            * u_xlat16_3.x + 1.0;\n    u_xlat16_0.xy = u_xlat16_0.xy * vec2(10.0,
            0.0100164423);\n    u_xlat16_6 = log2(u_xlat16_6);\n    u_xlat16_0.x
            = u_xlat16_6 * u_xlat16_0.x;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n   
            u_xlat16_0.x = max(u_xlat16_0.x, 9.99999975e-05);\n    u_xlat16_0.x =
            u_xlat16_0.y / u_xlat16_0.x;\n    u_xlat16_0.x = log2(u_xlat16_0.x);\n   
            u_xlat16_0.x = u_xlat16_0.x * 0.454544991;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n   
            u_xlat16_3.x = u_xlat1.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x,
            0.0, 1.0);\n    u_xlatb1 = u_xlat1.y<0.0;\n    u_xlat16_2.xyz = vs_TEXCOORD1.xyz
            + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz
            + vs_TEXCOORD2.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx
            + u_xlat16_3.xyz;\n    SV_Target0.xyz = (bool(u_xlatb1)) ? u_xlat16_2.xyz
            : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _SUNDISK_HIGH_QUALITY
          Tags:
          - Key: QUEUE
            Value: Background
          - Key: RENDERTYPE
            Value: Background
          - Key: PREVIEWTYPE
            Value: Skybox
        definedKeywords:
        - _SUNDISK_NONE
        - _SUNDISK_SIMPLE
        - _SUNDISK_HIGH_QUALITY
        keywordGroups:
        - Keywords:
          - _SUNDISK_NONE
          - _SUNDISK_SIMPLE
          - _SUNDISK_HIGH_QUALITY
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: QUEUE
          Value: Background
        - Key: RENDERTYPE
          Value: Background
        - Key: PREVIEWTYPE
          Value: Skybox
        UsePass: 0
      Tags:
      - Key: QUEUE
        Value: Background
      - Key: RENDERTYPE
        Value: Background
      - Key: PREVIEWTYPE
        Value: Skybox
      SerializedPassCount: 1
      UsePass: 0
    Shader: {fileID: 106, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - _SUNDISK_NONE
    - _SUNDISK_SIMPLE
    - _SUNDISK_HIGH_QUALITY
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 =
            in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy =
            in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy =
            _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy
            = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n   
            u_xlat0.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat1 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat1.xy = in_POSITION0.xy * vec2(2.0,
            2.0) + (-u_xlat1.xy);\n    u_xlat0.xy = (-u_xlat1.zw) + u_xlat1.xy;\n   
            vs_TEXCOORD2 = u_xlat0;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvoid
            main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n   
            u_xlat0 = u_xlat10_0 + _TextureSampleAdd;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n   
            SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
          - Key: CANUSESPRITEATLAS
            Value: true
          - Key: PREVIEWTYPE
            Value: Plane
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 =
            in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy =
            in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy =
            _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy
            = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n   
            u_xlat0.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat1 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat1.xy = in_POSITION0.xy * vec2(2.0,
            2.0) + (-u_xlat1.xy);\n    u_xlat0.xy = (-u_xlat1.zw) + u_xlat1.xy;\n   
            vs_TEXCOORD2 = u_xlat0;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D
            _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump
            float u_xlat16_1;\nbool u_xlatb2;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat10_0 + _TextureSampleAdd;\n   
            u_xlat16_1 = u_xlat0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat0 =
            u_xlat0 * vs_COLOR0;\n    u_xlatb2 = u_xlat16_1<0.0;\n    if(u_xlatb2){discard;}\n   
            SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n   
            return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
          - Key: CANUSESPRITEATLAS
            Value: true
          - Key: PREVIEWTYPE
            Value: Plane
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 =
            in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy =
            in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy =
            _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy
            = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n   
            u_xlat0.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat1 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat1.xy = in_POSITION0.xy * vec2(2.0,
            2.0) + (-u_xlat1.xy);\n    u_xlat0.xy = (-u_xlat1.zw) + u_xlat1.xy;\n   
            vs_TEXCOORD2 = u_xlat0;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD2;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump
            float u_xlat16_1;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) +
            _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n   
            u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy,
            0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0 =
            texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat10_0 + _TextureSampleAdd;\n   
            u_xlat0 = u_xlat0 * vs_COLOR0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n   
            SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    SV_Target0.w =
            u_xlat16_1;\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
          - Key: CANUSESPRITEATLAS
            Value: true
          - Key: PREVIEWTYPE
            Value: Plane
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform
            \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp
            vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying mediump
            vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n   
            u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n   
            u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n   
            u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1
            = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3]
            * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 =
            in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy =
            in_TEXCOORD0.xy;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy =
            _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n   
            u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx
            + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy
            = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n   
            u_xlat0.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat1 = max(_ClipRect,
            vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat1 = min(u_xlat1, vec4(2e+10,
            2e+10, 2e+10, 2e+10));\n    u_xlat1.xy = in_POSITION0.xy * vec2(2.0,
            2.0) + (-u_xlat1.xy);\n    u_xlat0.xy = (-u_xlat1.zw) + u_xlat1.xy;\n   
            vs_TEXCOORD2 = u_xlat0;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4
            _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD2;\n#define
            SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nbool
            u_xlatb0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid
            main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy
            = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy *
            vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n   
            u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0 = texture2D(_MainTex,
            vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat10_0 + _TextureSampleAdd;\n   
            u_xlat0 = u_xlat0 * vs_COLOR0;\n    u_xlat16_3 = u_xlat0.w * u_xlat16_1
            + -0.00100000005;\n    u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n    SV_Target0.xyz
            = u_xlat0.xyz * vec3(u_xlat16_1);\n    SV_Target0.w = u_xlat16_1;\n   
            u_xlatb0 = u_xlat16_3<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n"
          LOD: 0
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - UNITY_UI_ALPHACLIP
          - UNITY_UI_CLIP_RECT
          Tags:
          - Key: QUEUE
            Value: Transparent
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Transparent
          - Key: CANUSESPRITEATLAS
            Value: true
          - Key: PREVIEWTYPE
            Value: Plane
        definedKeywords:
        - UNITY_UI_CLIP_RECT
        - UNITY_UI_ALPHACLIP
        keywordGroups:
        - Keywords:
          - _
          - UNITY_UI_CLIP_RECT
        - Keywords:
          - _
          - UNITY_UI_ALPHACLIP
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: QUEUE
          Value: Transparent
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: RENDERTYPE
          Value: Transparent
        - Key: CANUSESPRITEATLAS
          Value: true
        - Key: PREVIEWTYPE
          Value: Plane
        UsePass: 0
      Tags:
      - Key: QUEUE
        Value: Transparent
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: RENDERTYPE
        Value: Transparent
      - Key: CANUSESPRITEATLAS
        Value: true
      - Key: PREVIEWTYPE
        Value: Plane
      SerializedPassCount: 1
      UsePass: 0
    Shader: {fileID: 10770, guid: 0000000000000000f000000000000000, type: 0}
    ShaderPath: Resources/unity_builtin_extra
    ShaderDefinedKeywords:
    - UNITY_UI_CLIP_RECT
    - UNITY_UI_ALPHACLIP
  - ParsedSubShaders:
    - Index: 0
      Passes:
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2
            vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4
            vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat12,
            1.17549435e-38);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz
            = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;\n   
            u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);\n    u_xlat16_2
            = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_2);\n    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = u_xlat16_1.xyz
            + u_xlat16_2.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_1.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            vs_TEXCOORD5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD6
            = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tmediump vec4 _DrawObjectPassData;\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform
            \tmediump float _Metallic;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying
            mediump vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD3;\nvarying
            highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump float
            u_xlat16_3;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nfloat
            u_xlat7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat18;\nmediump
            float u_xlat16_20;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD5.xyz,
            vs_TEXCOORD5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat6.xyz = u_xlat0.xxx *
            vs_TEXCOORD5.xyz;\n    u_xlat1.xyz = vs_TEXCOORD5.xyz * u_xlat0.xxx +
            _MainLightPosition.xyz;\n    u_xlat16_2.x = dot((-u_xlat6.xyz), vs_TEXCOORD3.xyz);\n   
            u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz
            * (-u_xlat16_2.xxx) + (-u_xlat6.xyz);\n    u_xlat16_20 = dot(vs_TEXCOORD3.xyz,
            u_xlat6.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_20
            = (-u_xlat16_20) + 1.0;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_3 = (-_Smoothness)
            + 1.0;\n    u_xlat16_9.x = (-u_xlat16_3) * 0.699999988 + 1.70000005;\n   
            u_xlat16_9.x = u_xlat16_9.x * u_xlat16_3;\n    u_xlat16_3 = u_xlat16_3
            * u_xlat16_3;\n    u_xlat16_3 = max(u_xlat16_3, 6.10351563e-05);\n   
            u_xlat16_9.x = u_xlat16_9.x * 6.0;\n    u_xlat10_0 = textureCube(unity_SpecCube0,
            u_xlat16_2.xyz, u_xlat16_9.x);\n    u_xlat16_2.x = u_xlat10_0.w + -1.0;\n   
            u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;\n    u_xlat16_2.x
            = max(u_xlat16_2.x, 0.0);\n    u_xlat16_2.x = log2(u_xlat16_2.x);\n   
            u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.y;\n    u_xlat16_2.x
            = exp2(u_xlat16_2.x);\n    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;\n   
            u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;\n    u_xlat16_9.x =
            u_xlat16_3 * u_xlat16_3 + 1.0;\n    u_xlat16_9.x = float(1.0) / u_xlat16_9.x;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_9.xxx;\n    u_xlat16_2.x = (-_Metallic)
            * 0.959999979 + 0.959999979;\n    u_xlat16_8.x = (-u_xlat16_2.x) + _Smoothness;\n   
            u_xlat16_8.x = u_xlat16_8.x + 1.0;\n    u_xlat16_8.x = clamp(u_xlat16_8.x,
            0.0, 1.0);\n    u_xlat10_4 = texture2D(_BaseMap, vs_TEXCOORD0.xy);\n   
            u_xlat16_9.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991,
            -0.0399999991, -0.0399999991);\n    u_xlat16_9.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991,
            0.0399999991);\n    u_xlat16_5.xyz = u_xlat16_8.xxx + (-u_xlat16_9.xyz);\n   
            u_xlat16_8.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz + u_xlat16_9.xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat10_4.xyz
            * _BaseColor.xyz;\n    SV_Target0.w = u_xlat10_4.w * _BaseColor.w + _DrawObjectPassData.w;\n   
            SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xxx
            * u_xlat16_8.xyz;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz * u_xlat16_2.xyz
            + u_xlat0.xyz;\n    u_xlat16_20 = dot(vs_TEXCOORD3.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_20 = u_xlat16_20
            * unity_LightData.z;\n    u_xlat16_5.xyz = vec3(u_xlat16_20) * _MainLightColor.xyz;\n   
            u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18,
            1.17549435e-38);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.xyz
            = vec3(u_xlat18) * u_xlat1.xyz;\n    u_xlat18 = dot(_MainLightPosition.xyz,
            u_xlat1.xyz);\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat1.x
            = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x,
            0.0, 1.0);\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat16_20 =
            u_xlat18 * u_xlat18;\n    u_xlat18 = max(u_xlat16_20, 0.100000001);\n   
            u_xlat7 = u_xlat16_3 * u_xlat16_3 + -1.0;\n    u_xlat1.x = u_xlat1.x
            * u_xlat7 + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n   
            u_xlat18 = u_xlat18 * u_xlat1.x;\n    u_xlat1.x = u_xlat16_3 * 4.0 +
            2.0;\n    u_xlat16_20 = u_xlat16_3 * u_xlat16_3;\n    u_xlat18 = u_xlat18
            * u_xlat1.x;\n    u_xlat18 = u_xlat16_20 / u_xlat18;\n    u_xlat16_20
            = u_xlat18 + -6.10351563e-05;\n    u_xlat16_20 = max(u_xlat16_20, 0.0);\n   
            u_xlat16_20 = min(u_xlat16_20, 100.0);\n    u_xlat16_2.xyz = vec3(u_xlat16_20)
            * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz
            * u_xlat16_5.xyz + u_xlat0.xyz;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 0
          PassId: 0
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2
            vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4
            vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump
            vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n   
            vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n   
            u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat12,
            1.17549435e-38);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz
            = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;\n   
            u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);\n    u_xlat16_2
            = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_2);\n    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = u_xlat16_1.xyz
            + u_xlat16_2.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_1.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            vs_TEXCOORD5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD6
            = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n   
            u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n   
            u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n   
            gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tmediump vec4 _DrawObjectPassData;\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tvec4 unity_ProbesOcclusion;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0
            gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nmediump float u_xlat16_3;\nlowp vec4 u_xlat10_4;\nmediump
            vec3 u_xlat16_5;\nvec3 u_xlat6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_8;\nmediump
            vec3 u_xlat16_9;\nfloat u_xlat18;\nmediump float u_xlat16_20;\nvoid main()\n{\n   
            u_xlat0.x = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);\n    u_xlat0.x =
            max(u_xlat0.x, 1.17549435e-38);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n   
            u_xlat6.xyz = u_xlat0.xxx * vs_TEXCOORD5.xyz;\n    u_xlat1.xyz = vs_TEXCOORD5.xyz
            * u_xlat0.xxx + _MainLightPosition.xyz;\n    u_xlat16_2.x = dot((-u_xlat6.xyz),
            vs_TEXCOORD3.xyz);\n    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;\n   
            u_xlat16_2.xyz = vs_TEXCOORD3.xyz * (-u_xlat16_2.xxx) + (-u_xlat6.xyz);\n   
            u_xlat16_20 = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);\n    u_xlat16_20 =
            clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_20 = (-u_xlat16_20) + 1.0;\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_20 = u_xlat16_20
            * u_xlat16_20;\n    u_xlat16_3 = (-_Smoothness) + 1.0;\n    u_xlat16_9.x
            = (-u_xlat16_3) * 0.699999988 + 1.70000005;\n    u_xlat16_9.x = u_xlat16_9.x
            * u_xlat16_3;\n    u_xlat16_3 = u_xlat16_3 * u_xlat16_3;\n    u_xlat16_3
            = max(u_xlat16_3, 6.10351563e-05);\n    u_xlat16_9.x = u_xlat16_9.x *
            6.0;\n    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_9.x);\n   
            u_xlat16_2.x = u_xlat10_0.w + -1.0;\n    u_xlat16_2.x = unity_SpecCube0_HDR.w
            * u_xlat16_2.x + 1.0;\n    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);\n   
            u_xlat16_2.x = log2(u_xlat16_2.x);\n    u_xlat16_2.x = u_xlat16_2.x *
            unity_SpecCube0_HDR.y;\n    u_xlat16_2.x = exp2(u_xlat16_2.x);\n    u_xlat16_2.x
            = u_xlat16_2.x * unity_SpecCube0_HDR.x;\n    u_xlat16_2.xyz = u_xlat10_0.xyz
            * u_xlat16_2.xxx;\n    u_xlat16_9.x = u_xlat16_3 * u_xlat16_3 + 1.0;\n   
            u_xlat16_9.x = float(1.0) / u_xlat16_9.x;\n    u_xlat0.xyz = u_xlat16_2.xyz
            * u_xlat16_9.xxx;\n    u_xlat16_2.x = (-_Metallic) * 0.959999979 + 0.959999979;\n   
            u_xlat16_8.x = (-u_xlat16_2.x) + _Smoothness;\n    u_xlat16_8.x = u_xlat16_8.x
            + 1.0;\n    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n    u_xlat10_4
            = texture2D(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_9.xyz = u_xlat10_4.xyz
            * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n   
            u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz
            + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_5.xyz
            = u_xlat16_8.xxx + (-u_xlat16_9.xyz);\n    u_xlat16_8.xyz = vec3(u_xlat16_20)
            * u_xlat16_5.xyz + u_xlat16_9.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;\n   
            u_xlat16_8.xyz = u_xlat10_4.xyz * _BaseColor.xyz;\n    SV_Target0.w =
            u_xlat10_4.w * _BaseColor.w + _DrawObjectPassData.w;\n    SV_Target0.w
            = clamp(SV_Target0.w, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xxx
            * u_xlat16_8.xyz;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz * u_xlat16_2.xyz
            + u_xlat0.xyz;\n    u_xlat18 = unity_LightData.z * unity_ProbesOcclusion.x;\n   
            u_xlat16_20 = dot(vs_TEXCOORD3.xyz, _MainLightPosition.xyz);\n    u_xlat16_20
            = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_20 = u_xlat18 * u_xlat16_20;\n   
            u_xlat16_5.xyz = vec3(u_xlat16_20) * _MainLightColor.xyz;\n    u_xlat18
            = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n   
            u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.xyz = vec3(u_xlat18) *
            u_xlat1.xyz;\n    u_xlat18 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n   
            u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat1.x = dot(vs_TEXCOORD3.xyz,
            u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat1.x
            = u_xlat1.x * u_xlat1.x;\n    u_xlat16_20 = u_xlat18 * u_xlat18;\n   
            u_xlat18 = max(u_xlat16_20, 0.100000001);\n    u_xlat7 = u_xlat16_3 *
            u_xlat16_3 + -1.0;\n    u_xlat1.x = u_xlat1.x * u_xlat7 + 1.00001001;\n   
            u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat18 = u_xlat18 * u_xlat1.x;\n   
            u_xlat1.x = u_xlat16_3 * 4.0 + 2.0;\n    u_xlat16_20 = u_xlat16_3 * u_xlat16_3;\n   
            u_xlat18 = u_xlat18 * u_xlat1.x;\n    u_xlat18 = u_xlat16_20 / u_xlat18;\n   
            u_xlat16_20 = u_xlat18 + -6.10351563e-05;\n    u_xlat16_20 = max(u_xlat16_20,
            0.0);\n    u_xlat16_20 = min(u_xlat16_20, 100.0);\n    u_xlat16_2.xyz
            = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    SV_Target0.xyz
            = u_xlat16_2.xyz * u_xlat16_5.xyz + u_xlat0.xyz;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 2
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _MIXED_LIGHTING_SUBTRACTIVE
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2
            vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying highp vec3
            vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD5;\nvarying
            mediump vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat
            u_xlat12;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat12,
            1.17549435e-38);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz
            = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;\n   
            u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);\n    u_xlat16_2
            = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_2);\n    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = u_xlat16_1.xyz
            + u_xlat16_2.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_1.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD5.xyz = (-u_xlat0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tmediump vec4 _DrawObjectPassData;\nuniform
            \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform
            \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform
            \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tmediump vec4
            unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp
            vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nlowp
            vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nint u_xlati2;\nmediump
            float u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nlowp
            vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nint u_xlati7;\nbool
            u_xlatb7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_9;\nvec3 u_xlat10;\nmediump
            vec3 u_xlat16_11;\nfloat u_xlat12;\nvec3 u_xlat14;\nmediump vec3 u_xlat16_15;\nmediump
            vec2 u_xlat16_16;\nvec3 u_xlat19;\nbool u_xlatb19;\nfloat u_xlat20;\nfloat
            u_xlat24;\nint u_xlati24;\nmediump float u_xlat16_28;\nfloat u_xlat31;\nfloat
            u_xlat32;\nmediump float u_xlat16_37;\nmediump float u_xlat16_40;\nfloat
            u_xlat43;\n#define UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\n\n\n\nvec4 _AdditionalLightsPositionDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsPosition[i];\n#else\n#define
            d_ar _AdditionalLightsPosition\n    if (i <= 0) return d_ar[0]; else
            if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if
            (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i
            == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i ==
            7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9)
            return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11)
            return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13)
            return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15)
            return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17)
            return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19)
            return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21)
            return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23)
            return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25)
            return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27)
            return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29)
            return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31)
            return d_ar[31];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump
            vec4 _AdditionalLightsAttenuationDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsAttenuation[i];\n#else\n#define d_ar _AdditionalLightsAttenuation\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return
            d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return
            d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return
            d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return
            d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return
            d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return
            d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return
            d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return
            d_ar[30]; else if (i == 31) return d_ar[31];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\n\nmediump vec4 _AdditionalLightsSpotDirDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsSpotDir[i];\n#else\n#define
            d_ar _AdditionalLightsSpotDir\n    if (i <= 0) return d_ar[0]; else if
            (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i
            == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i ==
            5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7)
            return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return
            d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return
            d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return
            d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return
            d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return
            d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return
            d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21) return
            d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23) return
            d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25) return
            d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27) return
            d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29) return
            d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31) return
            d_ar[31];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump vec4
            _AdditionalLightsColorDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsColor[i];\n#else\n#define d_ar _AdditionalLightsColor\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return
            d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return
            d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return
            d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return
            d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return
            d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return
            d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return
            d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return
            d_ar[30]; else if (i == 31) return d_ar[31];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat10_0 = texture2D(_BaseMap,
            vs_TEXCOORD0.xy);\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n   
            u_xlat2 = dot(vs_TEXCOORD5.xyz, vs_TEXCOORD5.xyz);\n    u_xlat2 = max(u_xlat2,
            1.17549435e-38);\n    u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat14.xyz
            = vec3(u_xlat2) * vs_TEXCOORD5.xyz;\n    u_xlat16_37 = (-_Metallic) *
            0.959999979 + 0.959999979;\n    u_xlat16_3 = (-u_xlat16_37) + _Smoothness;\n   
            u_xlat16_1.xyz = vec3(u_xlat16_37) * u_xlat16_1.xyz;\n    u_xlat16_15.xyz
            = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991,
            -0.0399999991);\n    u_xlat16_15.xyz = vec3(vec3(_Metallic, _Metallic,
            _Metallic)) * u_xlat16_15.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n   
            u_xlat16_37 = u_xlat16_3 + 1.0;\n    u_xlat16_37 = clamp(u_xlat16_37,
            0.0, 1.0);\n    u_xlat16_3 = (-_Smoothness) + 1.0;\n    u_xlat16_4.x
            = u_xlat16_3 * u_xlat16_3;\n    u_xlat16_4.x = max(u_xlat16_4.x, 6.10351563e-05);\n   
            u_xlat0 = u_xlat16_4.x * 4.0 + 2.0;\n    u_xlat12 = u_xlat16_4.x * u_xlat16_4.x
            + -1.0;\n    u_xlat16_28 = dot((-u_xlat14.xyz), vs_TEXCOORD3.xyz);\n   
            u_xlat16_28 = u_xlat16_28 + u_xlat16_28;\n    u_xlat16_5.xyz = vs_TEXCOORD3.xyz
            * (-vec3(u_xlat16_28)) + (-u_xlat14.xyz);\n    u_xlat16_28 = dot(vs_TEXCOORD3.xyz,
            u_xlat14.xyz);\n    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);\n   
            u_xlat16_4.z = (-u_xlat16_28) + 1.0;\n    u_xlat16_16.xy = u_xlat16_4.xz
            * u_xlat16_4.xz;\n    u_xlat16_28 = u_xlat16_16.y * u_xlat16_16.y;\n   
            u_xlat16_40 = (-u_xlat16_3) * 0.699999988 + 1.70000005;\n    u_xlat16_3
            = u_xlat16_3 * u_xlat16_40;\n    u_xlat16_3 = u_xlat16_3 * 6.0;\n   
            u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_3);\n   
            u_xlat16_3 = u_xlat10_5.w + -1.0;\n    u_xlat16_3 = unity_SpecCube0_HDR.w
            * u_xlat16_3 + 1.0;\n    u_xlat16_3 = max(u_xlat16_3, 0.0);\n    u_xlat16_3
            = log2(u_xlat16_3);\n    u_xlat16_3 = u_xlat16_3 * unity_SpecCube0_HDR.y;\n   
            u_xlat16_3 = exp2(u_xlat16_3);\n    u_xlat16_3 = u_xlat16_3 * unity_SpecCube0_HDR.x;\n   
            u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(u_xlat16_3);\n    u_xlat16_3 =
            u_xlat16_4.x * u_xlat16_4.x + 1.0;\n    u_xlat16_3 = float(1.0) / u_xlat16_3;\n   
            u_xlat7.xyz = u_xlat16_6.xyz * vec3(u_xlat16_3);\n    u_xlat16_6.xyz
            = (-u_xlat16_15.xyz) + vec3(u_xlat16_37);\n    u_xlat16_4.xzw = vec3(u_xlat16_28)
            * u_xlat16_6.xyz + u_xlat16_15.xyz;\n    u_xlat7.xyz = u_xlat16_4.xzw
            * u_xlat7.xyz;\n    u_xlat7.xyz = vs_TEXCOORD1.xyz * u_xlat16_1.xyz +
            u_xlat7.xyz;\n    u_xlat16_37 = dot(vs_TEXCOORD3.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);\n    u_xlat16_37 = u_xlat16_37
            * unity_LightData.z;\n    u_xlat16_4.xzw = vec3(u_xlat16_37) * _MainLightColor.xyz;\n   
            u_xlat8.xyz = vs_TEXCOORD5.xyz * vec3(u_xlat2) + _MainLightPosition.xyz;\n   
            u_xlat24 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat24 = max(u_xlat24,
            1.17549435e-38);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat8.xyz
            = vec3(u_xlat24) * u_xlat8.xyz;\n    u_xlat24 = dot(vs_TEXCOORD3.xyz,
            u_xlat8.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2
            = dot(_MainLightPosition.xyz, u_xlat8.xyz);\n    u_xlat2 = clamp(u_xlat2,
            0.0, 1.0);\n    u_xlat24 = u_xlat24 * u_xlat24;\n    u_xlat24 = u_xlat24
            * u_xlat12 + 1.00001001;\n    u_xlat16_37 = u_xlat2 * u_xlat2;\n    u_xlat24
            = u_xlat24 * u_xlat24;\n    u_xlat2 = max(u_xlat16_37, 0.100000001);\n   
            u_xlat24 = u_xlat24 * u_xlat2;\n    u_xlat24 = u_xlat0 * u_xlat24;\n   
            u_xlat24 = u_xlat16_16.x / u_xlat24;\n    u_xlat16_37 = u_xlat24 + -6.10351563e-05;\n   
            u_xlat16_37 = max(u_xlat16_37, 0.0);\n    u_xlat16_37 = min(u_xlat16_37,
            100.0);\n    u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_15.xyz + u_xlat16_1.xyz;\n   
            u_xlat16_4.xzw = u_xlat16_6.xyz * u_xlat16_4.xzw + u_xlat7.xyz;\n   
            u_xlat16_37 = min(_AdditionalLightsCount.x, unity_LightData.y);\n   
            u_xlati24 = int(u_xlat16_37);\n    u_xlat16_6.xyz = u_xlat16_4.xzw;\n   
            for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati24 ; u_xlati_loop_1++)\n   
            {\n        u_xlat7.x = float(u_xlati_loop_1);\n        u_xlatb19 = u_xlat7.x<2.0;\n       
            u_xlat16_9.xy = (bool(u_xlatb19)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n       
            u_xlat31 = u_xlat7.x + -2.0;\n        u_xlat7.x = (u_xlatb19) ? u_xlat7.x
            : u_xlat31;\n        u_xlatb7 = u_xlat7.x<1.0;\n        u_xlat16_37 =
            (u_xlatb7) ? u_xlat16_9.x : u_xlat16_9.y;\n        u_xlati7 = int(u_xlat16_37);\n       
            u_xlat19.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati7).www
            + _AdditionalLightsPositionDynamicIndex(u_xlati7).xyz;\n        u_xlat8.x
            = dot(u_xlat19.xyz, u_xlat19.xyz);\n        u_xlat8.x = max(u_xlat8.x,
            6.10351563e-05);\n        u_xlat20 = inversesqrt(u_xlat8.x);\n       
            u_xlat10.xyz = u_xlat19.xyz * vec3(u_xlat20);\n        u_xlat32 = float(1.0)
            / u_xlat8.x;\n        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuationDynamicIndex(u_xlati7).x
            + _AdditionalLightsAttenuationDynamicIndex(u_xlati7).y;\n        u_xlat8.x
            = clamp(u_xlat8.x, 0.0, 1.0);\n        u_xlat8.x = u_xlat8.x * u_xlat32;\n       
            u_xlat16_37 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati7).xyz,
            u_xlat10.xyz);\n        u_xlat16_37 = u_xlat16_37 * _AdditionalLightsAttenuationDynamicIndex(u_xlati7).z
            + _AdditionalLightsAttenuationDynamicIndex(u_xlati7).w;\n        u_xlat16_37
            = clamp(u_xlat16_37, 0.0, 1.0);\n        u_xlat16_37 = u_xlat16_37 *
            u_xlat16_37;\n        u_xlat8.x = u_xlat16_37 * u_xlat8.x;\n        u_xlat16_37
            = dot(vs_TEXCOORD3.xyz, u_xlat10.xyz);\n        u_xlat16_37 = clamp(u_xlat16_37,
            0.0, 1.0);\n        u_xlat16_37 = u_xlat16_37 * u_xlat8.x;\n        u_xlat16_9.xyz
            = vec3(u_xlat16_37) * _AdditionalLightsColorDynamicIndex(u_xlati7).xyz;\n       
            u_xlat7.xyz = u_xlat19.xyz * vec3(u_xlat20) + u_xlat14.xyz;\n       
            u_xlat43 = dot(u_xlat7.xyz, u_xlat7.xyz);\n        u_xlat43 = max(u_xlat43,
            1.17549435e-38);\n        u_xlat43 = inversesqrt(u_xlat43);\n       
            u_xlat7.xyz = vec3(u_xlat43) * u_xlat7.xyz;\n        u_xlat43 = dot(vs_TEXCOORD3.xyz,
            u_xlat7.xyz);\n        u_xlat43 = clamp(u_xlat43, 0.0, 1.0);\n       
            u_xlat7.x = dot(u_xlat10.xyz, u_xlat7.xyz);\n        u_xlat7.x = clamp(u_xlat7.x,
            0.0, 1.0);\n        u_xlat19.x = u_xlat43 * u_xlat43;\n        u_xlat19.x
            = u_xlat19.x * u_xlat12 + 1.00001001;\n        u_xlat16_37 = u_xlat7.x
            * u_xlat7.x;\n        u_xlat7.x = u_xlat19.x * u_xlat19.x;\n        u_xlat19.x
            = max(u_xlat16_37, 0.100000001);\n        u_xlat7.x = u_xlat19.x * u_xlat7.x;\n       
            u_xlat7.x = u_xlat0 * u_xlat7.x;\n        u_xlat7.x = u_xlat16_16.x /
            u_xlat7.x;\n        u_xlat16_37 = u_xlat7.x + -6.10351563e-05;\n       
            u_xlat16_37 = max(u_xlat16_37, 0.0);\n        u_xlat16_37 = min(u_xlat16_37,
            100.0);\n        u_xlat16_11.xyz = vec3(u_xlat16_37) * u_xlat16_15.xyz
            + u_xlat16_1.xyz;\n        u_xlat16_6.xyz = u_xlat16_11.xyz * u_xlat16_9.xyz
            + u_xlat16_6.xyz;\n    }\n    SV_Target0.xyz = u_xlat16_6.xyz;\n    SV_Target0.w
            = u_xlat10_0.w * _BaseColor.w + _DrawObjectPassData.w;\n    SV_Target0.w
            = clamp(SV_Target0.w, 0.0, 1.0);\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 3
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _ADDITIONAL_LIGHTS
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform
            \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform
            \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4
            _AdditionalLightsSpotDir[32];\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2
            vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying highp vec3
            vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump vec4
            vs_TEXCOORD6;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump
            vec3 u_xlat16_2;\nint u_xlati3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nfloat
            u_xlat9;\nint u_xlati9;\nbool u_xlatb9;\nfloat u_xlat15;\nbool u_xlatb15;\nfloat
            u_xlat18;\nint u_xlati18;\nmediump float u_xlat16_20;\nfloat u_xlat21;\nvoid
            main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat18
            = inversesqrt(u_xlat18);\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n   
            vs_TEXCOORD5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x
            = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlati18 =
            int(u_xlat16_2.x);\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y
            = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(int u_xlati_loop_1
            = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)\n    {\n        u_xlat9
            = float(u_xlati_loop_1);\n        u_xlatb15 = u_xlat9<2.0;\n        u_xlat16_4.xy
            = (bool(u_xlatb15)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n       
            u_xlat21 = u_xlat9 + -2.0;\n        u_xlat9 = (u_xlatb15) ? u_xlat9 :
            u_xlat21;\n        u_xlatb9 = u_xlat9<1.0;\n        u_xlat16_20 = (u_xlatb9)
            ? u_xlat16_4.x : u_xlat16_4.y;\n        u_xlati9 = int(u_xlat16_20);\n       
            u_xlat5.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati9].www
            + _AdditionalLightsPosition[u_xlati9].xyz;\n        u_xlat15 = dot(u_xlat5.xyz,
            u_xlat5.xyz);\n        u_xlat15 = max(u_xlat15, 6.10351563e-05);\n       
            u_xlat21 = inversesqrt(u_xlat15);\n        u_xlat5.xyz = vec3(u_xlat21)
            * u_xlat5.xyz;\n        u_xlat21 = float(1.0) / u_xlat15;\n        u_xlat15
            = u_xlat15 * _AdditionalLightsAttenuation[u_xlati9].x + _AdditionalLightsAttenuation[u_xlati9].y;\n       
            u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n        u_xlat15 = u_xlat15 *
            u_xlat21;\n        u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati9].xyz,
            u_xlat5.xyz);\n        u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati9].z
            + _AdditionalLightsAttenuation[u_xlati9].w;\n        u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n       
            u_xlat15 = u_xlat16_20 * u_xlat15;\n        u_xlat16_4.xyz = vec3(u_xlat15)
            * _AdditionalLightsColor[u_xlati9].xyz;\n        u_xlat16_20 = dot(u_xlat1.xyz,
            u_xlat5.xyz);\n        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n       
            u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;\n   
            }\n    vs_TEXCOORD6.yzw = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat1.w = 1.0;\n    u_xlat16_2.x
            = dot(unity_SHAr, u_xlat1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);\n   
            u_xlat16_2.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_0 = u_xlat1.yzzx
            * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);\n   
            u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_4.z = dot(unity_SHBb,
            u_xlat16_0);\n    u_xlat16_20 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_20
            = u_xlat1.x * u_xlat1.x + (-u_xlat16_20);\n    u_xlat16_4.xyz = unity_SHC.xyz
            * vec3(u_xlat16_20) + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            + u_xlat16_4.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0,
            0.0, 0.0));\n    vs_TEXCOORD3.xyz = u_xlat1.xyz;\n    vs_TEXCOORD6.x
            = 0.0;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tmediump vec4 _DrawObjectPassData;\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform
            \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform
            \tmediump float _Metallic;\nuniform lowp sampler2D _BaseMap;\nuniform
            lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying
            mediump vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD3;\nvarying
            highp vec3 vs_TEXCOORD5;\nvarying mediump vec4 vs_TEXCOORD6;\n#define
            SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3
            u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nlowp vec4
            u_xlat10_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nfloat u_xlat7;\nmediump
            vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nfloat u_xlat18;\nmediump
            float u_xlat16_20;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD5.xyz,
            vs_TEXCOORD5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat6.xyz = u_xlat0.xxx *
            vs_TEXCOORD5.xyz;\n    u_xlat1.xyz = vs_TEXCOORD5.xyz * u_xlat0.xxx +
            _MainLightPosition.xyz;\n    u_xlat16_2.x = dot((-u_xlat6.xyz), vs_TEXCOORD3.xyz);\n   
            u_xlat16_2.x = u_xlat16_2.x + u_xlat16_2.x;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz
            * (-u_xlat16_2.xxx) + (-u_xlat6.xyz);\n    u_xlat16_20 = dot(vs_TEXCOORD3.xyz,
            u_xlat6.xyz);\n    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_20
            = (-u_xlat16_20) + 1.0;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n   
            u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_3.x = (-_Smoothness)
            + 1.0;\n    u_xlat16_9.x = (-u_xlat16_3.x) * 0.699999988 + 1.70000005;\n   
            u_xlat16_9.x = u_xlat16_9.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x
            * u_xlat16_3.x;\n    u_xlat16_3.x = max(u_xlat16_3.x, 6.10351563e-05);\n   
            u_xlat16_9.x = u_xlat16_9.x * 6.0;\n    u_xlat10_0 = textureCube(unity_SpecCube0,
            u_xlat16_2.xyz, u_xlat16_9.x);\n    u_xlat16_2.x = u_xlat10_0.w + -1.0;\n   
            u_xlat16_2.x = unity_SpecCube0_HDR.w * u_xlat16_2.x + 1.0;\n    u_xlat16_2.x
            = max(u_xlat16_2.x, 0.0);\n    u_xlat16_2.x = log2(u_xlat16_2.x);\n   
            u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.y;\n    u_xlat16_2.x
            = exp2(u_xlat16_2.x);\n    u_xlat16_2.x = u_xlat16_2.x * unity_SpecCube0_HDR.x;\n   
            u_xlat16_2.xyz = u_xlat10_0.xyz * u_xlat16_2.xxx;\n    u_xlat16_9.x =
            u_xlat16_3.x * u_xlat16_3.x + 1.0;\n    u_xlat16_9.x = float(1.0) / u_xlat16_9.x;\n   
            u_xlat0.xyz = u_xlat16_2.xyz * u_xlat16_9.xxx;\n    u_xlat16_2.x = (-_Metallic)
            * 0.959999979 + 0.959999979;\n    u_xlat16_8.x = (-u_xlat16_2.x) + _Smoothness;\n   
            u_xlat16_8.x = u_xlat16_8.x + 1.0;\n    u_xlat16_8.x = clamp(u_xlat16_8.x,
            0.0, 1.0);\n    u_xlat10_4 = texture2D(_BaseMap, vs_TEXCOORD0.xy);\n   
            u_xlat16_9.xyz = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991,
            -0.0399999991, -0.0399999991);\n    u_xlat16_9.xyz = vec3(vec3(_Metallic,
            _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.0399999991, 0.0399999991,
            0.0399999991);\n    u_xlat16_5.xyz = u_xlat16_8.xxx + (-u_xlat16_9.xyz);\n   
            u_xlat16_8.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz + u_xlat16_9.xyz;\n   
            u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;\n    u_xlat16_8.xyz = u_xlat10_4.xyz
            * _BaseColor.xyz;\n    SV_Target0.w = u_xlat10_4.w * _BaseColor.w + _DrawObjectPassData.w;\n   
            SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);\n    u_xlat16_2.xyz = u_xlat16_2.xxx
            * u_xlat16_8.xyz;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz * u_xlat16_2.xyz
            + u_xlat0.xyz;\n    u_xlat16_20 = dot(vs_TEXCOORD3.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n    u_xlat16_20 = u_xlat16_20
            * unity_LightData.z;\n    u_xlat16_5.xyz = vec3(u_xlat16_20) * _MainLightColor.xyz;\n   
            u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18,
            1.17549435e-38);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.xyz
            = vec3(u_xlat18) * u_xlat1.xyz;\n    u_xlat18 = dot(_MainLightPosition.xyz,
            u_xlat1.xyz);\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat1.x
            = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x,
            0.0, 1.0);\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat16_20 =
            u_xlat18 * u_xlat18;\n    u_xlat18 = max(u_xlat16_20, 0.100000001);\n   
            u_xlat7 = u_xlat16_3.x * u_xlat16_3.x + -1.0;\n    u_xlat1.x = u_xlat1.x
            * u_xlat7 + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n   
            u_xlat18 = u_xlat18 * u_xlat1.x;\n    u_xlat1.x = u_xlat16_3.x * 4.0
            + 2.0;\n    u_xlat16_20 = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat18
            = u_xlat18 * u_xlat1.x;\n    u_xlat18 = u_xlat16_20 / u_xlat18;\n   
            u_xlat16_20 = u_xlat18 + -6.10351563e-05;\n    u_xlat16_20 = max(u_xlat16_20,
            0.0);\n    u_xlat16_20 = min(u_xlat16_20, 100.0);\n    u_xlat16_3.xyz
            = vec3(u_xlat16_20) * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat16_3.xyz
            = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat0.xyz;\n    SV_Target0.xyz
            = vs_TEXCOORD6.yzw * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 4
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _ADDITIONAL_LIGHTS_VERTEX
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform
            \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform
            \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform
            \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp
            vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2
            vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying highp vec3
            vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD5;\nvarying
            mediump vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec3
            u_xlat16_1;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat
            u_xlat12;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy
            + _BaseMap_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = max(u_xlat12,
            1.17549435e-38);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz
            = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat16_1.x = u_xlat0.y * u_xlat0.y;\n   
            u_xlat16_1.x = u_xlat0.x * u_xlat0.x + (-u_xlat16_1.x);\n    u_xlat16_2
            = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_2);\n   
            u_xlat16_3.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_3.z = dot(unity_SHBb,
            u_xlat16_2);\n    u_xlat16_1.xyz = unity_SHC.xyz * u_xlat16_1.xxx + u_xlat16_3.xyz;\n   
            vs_TEXCOORD3.xyz = u_xlat0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_2.x
            = dot(unity_SHAr, u_xlat0);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat0);\n   
            u_xlat16_2.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_1.xyz = u_xlat16_1.xyz
            + u_xlat16_2.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_1.xyz, vec3(0.0,
            0.0, 0.0));\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx
            + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            vs_TEXCOORD2.xyz = u_xlat0.xyz;\n    vs_TEXCOORD5.xyz = (-u_xlat0.xyz)
            + _WorldSpaceCameraPos.xyz;\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nvec4 ImmCB_0[4];\nuniform \tvec4 _MainLightPosition;\nuniform
            \tmediump vec4 _MainLightColor;\nuniform \tmediump vec4 _DrawObjectPassData;\nuniform
            \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform
            \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform
            \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tmediump vec4
            _AdditionalLightsOcclusionProbes[32];\nuniform \tmediump vec4 unity_LightData;\nuniform
            \tmediump vec4 unity_LightIndices[2];\nuniform \tvec4 unity_ProbesOcclusion;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp
            vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nfloat u_xlat0;\nlowp
            vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nfloat u_xlat2;\nint u_xlati2;\nmediump
            float u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nlowp
            vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nint u_xlati7;\nbool
            u_xlatb7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_9;\nvec3 u_xlat10;\nmediump
            vec3 u_xlat16_11;\nfloat u_xlat12;\nvec3 u_xlat14;\nmediump vec3 u_xlat16_15;\nmediump
            vec2 u_xlat16_16;\nvec3 u_xlat19;\nbool u_xlatb19;\nfloat u_xlat20;\nfloat
            u_xlat24;\nint u_xlati24;\nmediump float u_xlat16_28;\nfloat u_xlat31;\nfloat
            u_xlat32;\nint u_xlati32;\nmediump float u_xlat16_37;\nmediump float
            u_xlat16_40;\nfloat u_xlat43;\n#define UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\n\n\n\n\n\nvec4
            ImmCB_0DynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return
            ImmCB_0[i];\n#else\n#define d_ar ImmCB_0\n    if (i <= 0) return d_ar[0];
            else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else
            if (i == 3) return d_ar[3];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nvec4
            _AdditionalLightsPositionDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsPosition[i];\n#else\n#define d_ar _AdditionalLightsPosition\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return
            d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return
            d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return
            d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return
            d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return
            d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return
            d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return
            d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return
            d_ar[30]; else if (i == 31) return d_ar[31];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\n\nmediump vec4 _AdditionalLightsAttenuationDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsAttenuation[i];\n#else\n#define
            d_ar _AdditionalLightsAttenuation\n    if (i <= 0) return d_ar[0]; else
            if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if
            (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i
            == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i ==
            7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9)
            return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11)
            return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13)
            return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15)
            return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17)
            return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19)
            return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21)
            return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23)
            return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25)
            return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27)
            return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29)
            return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31)
            return d_ar[31];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump
            vec4 _AdditionalLightsSpotDirDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsSpotDir[i];\n#else\n#define d_ar _AdditionalLightsSpotDir\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return
            d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return
            d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return
            d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return
            d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return
            d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return
            d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return
            d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return
            d_ar[30]; else if (i == 31) return d_ar[31];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\n\nmediump vec4 _AdditionalLightsOcclusionProbesDynamicIndex(int
            i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return _AdditionalLightsOcclusionProbes[i];\n#else\n#define
            d_ar _AdditionalLightsOcclusionProbes\n    if (i <= 0) return d_ar[0];
            else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else
            if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if
            (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i
            == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i ==
            9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11)
            return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13)
            return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15)
            return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17)
            return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19)
            return d_ar[19]; else if (i == 20) return d_ar[20]; else if (i == 21)
            return d_ar[21]; else if (i == 22) return d_ar[22]; else if (i == 23)
            return d_ar[23]; else if (i == 24) return d_ar[24]; else if (i == 25)
            return d_ar[25]; else if (i == 26) return d_ar[26]; else if (i == 27)
            return d_ar[27]; else if (i == 28) return d_ar[28]; else if (i == 29)
            return d_ar[29]; else if (i == 30) return d_ar[30]; else if (i == 31)
            return d_ar[31];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\n\nmediump
            vec4 _AdditionalLightsColorDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return _AdditionalLightsColor[i];\n#else\n#define d_ar _AdditionalLightsColor\n   
            if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if
            (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i
            == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i ==
            6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8)
            return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return
            d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return
            d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return
            d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return
            d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return
            d_ar[18]; else if (i == 19) return d_ar[19]; else if (i == 20) return
            d_ar[20]; else if (i == 21) return d_ar[21]; else if (i == 22) return
            d_ar[22]; else if (i == 23) return d_ar[23]; else if (i == 24) return
            d_ar[24]; else if (i == 25) return d_ar[25]; else if (i == 26) return
            d_ar[26]; else if (i == 27) return d_ar[27]; else if (i == 28) return
            d_ar[28]; else if (i == 29) return d_ar[29]; else if (i == 30) return
            d_ar[30]; else if (i == 31) return d_ar[31];\n    return d_ar[0];\n#undef
            d_ar\n#endif\n}\n\nvoid main()\n{\nImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);\nImmCB_0[1]
            = vec4(0.0,1.0,0.0,0.0);\nImmCB_0[2] = vec4(0.0,0.0,1.0,0.0);\nImmCB_0[3]
            = vec4(0.0,0.0,0.0,1.0);\n    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy);\n   
            u_xlat16_1.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    u_xlat2 = dot(vs_TEXCOORD5.xyz,
            vs_TEXCOORD5.xyz);\n    u_xlat2 = max(u_xlat2, 1.17549435e-38);\n   
            u_xlat2 = inversesqrt(u_xlat2);\n    u_xlat14.xyz = vec3(u_xlat2) * vs_TEXCOORD5.xyz;\n   
            u_xlat16_37 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_3
            = (-u_xlat16_37) + _Smoothness;\n    u_xlat16_1.xyz = vec3(u_xlat16_37)
            * u_xlat16_1.xyz;\n    u_xlat16_15.xyz = u_xlat10_0.xyz * _BaseColor.xyz
            + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_15.xyz
            = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_15.xyz + vec3(0.0399999991,
            0.0399999991, 0.0399999991);\n    u_xlat16_37 = u_xlat16_3 + 1.0;\n   
            u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);\n    u_xlat16_3 = (-_Smoothness)
            + 1.0;\n    u_xlat16_4.x = u_xlat16_3 * u_xlat16_3;\n    u_xlat16_4.x
            = max(u_xlat16_4.x, 6.10351563e-05);\n    u_xlat0 = u_xlat16_4.x * 4.0
            + 2.0;\n    u_xlat12 = u_xlat16_4.x * u_xlat16_4.x + -1.0;\n    u_xlat24
            = unity_LightData.z * unity_ProbesOcclusion.x;\n    u_xlat16_28 = dot((-u_xlat14.xyz),
            vs_TEXCOORD3.xyz);\n    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;\n   
            u_xlat16_5.xyz = vs_TEXCOORD3.xyz * (-vec3(u_xlat16_28)) + (-u_xlat14.xyz);\n   
            u_xlat16_28 = dot(vs_TEXCOORD3.xyz, u_xlat14.xyz);\n    u_xlat16_28 =
            clamp(u_xlat16_28, 0.0, 1.0);\n    u_xlat16_4.z = (-u_xlat16_28) + 1.0;\n   
            u_xlat16_16.xy = u_xlat16_4.xz * u_xlat16_4.xz;\n    u_xlat16_28 = u_xlat16_16.y
            * u_xlat16_16.y;\n    u_xlat16_40 = (-u_xlat16_3) * 0.699999988 + 1.70000005;\n   
            u_xlat16_3 = u_xlat16_3 * u_xlat16_40;\n    u_xlat16_3 = u_xlat16_3 *
            6.0;\n    u_xlat10_5 = textureCube(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_3);\n   
            u_xlat16_3 = u_xlat10_5.w + -1.0;\n    u_xlat16_3 = unity_SpecCube0_HDR.w
            * u_xlat16_3 + 1.0;\n    u_xlat16_3 = max(u_xlat16_3, 0.0);\n    u_xlat16_3
            = log2(u_xlat16_3);\n    u_xlat16_3 = u_xlat16_3 * unity_SpecCube0_HDR.y;\n   
            u_xlat16_3 = exp2(u_xlat16_3);\n    u_xlat16_3 = u_xlat16_3 * unity_SpecCube0_HDR.x;\n   
            u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(u_xlat16_3);\n    u_xlat16_3 =
            u_xlat16_4.x * u_xlat16_4.x + 1.0;\n    u_xlat16_3 = float(1.0) / u_xlat16_3;\n   
            u_xlat7.xyz = u_xlat16_6.xyz * vec3(u_xlat16_3);\n    u_xlat16_6.xyz
            = (-u_xlat16_15.xyz) + vec3(u_xlat16_37);\n    u_xlat16_4.xzw = vec3(u_xlat16_28)
            * u_xlat16_6.xyz + u_xlat16_15.xyz;\n    u_xlat7.xyz = u_xlat16_4.xzw
            * u_xlat7.xyz;\n    u_xlat7.xyz = vs_TEXCOORD1.xyz * u_xlat16_1.xyz +
            u_xlat7.xyz;\n    u_xlat16_37 = dot(vs_TEXCOORD3.xyz, _MainLightPosition.xyz);\n   
            u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);\n    u_xlat16_37 = u_xlat24
            * u_xlat16_37;\n    u_xlat16_4.xzw = vec3(u_xlat16_37) * _MainLightColor.xyz;\n   
            u_xlat8.xyz = vs_TEXCOORD5.xyz * vec3(u_xlat2) + _MainLightPosition.xyz;\n   
            u_xlat24 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat24 = max(u_xlat24,
            1.17549435e-38);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat8.xyz
            = vec3(u_xlat24) * u_xlat8.xyz;\n    u_xlat24 = dot(vs_TEXCOORD3.xyz,
            u_xlat8.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2
            = dot(_MainLightPosition.xyz, u_xlat8.xyz);\n    u_xlat2 = clamp(u_xlat2,
            0.0, 1.0);\n    u_xlat24 = u_xlat24 * u_xlat24;\n    u_xlat24 = u_xlat24
            * u_xlat12 + 1.00001001;\n    u_xlat16_37 = u_xlat2 * u_xlat2;\n    u_xlat24
            = u_xlat24 * u_xlat24;\n    u_xlat2 = max(u_xlat16_37, 0.100000001);\n   
            u_xlat24 = u_xlat24 * u_xlat2;\n    u_xlat24 = u_xlat0 * u_xlat24;\n   
            u_xlat24 = u_xlat16_16.x / u_xlat24;\n    u_xlat16_37 = u_xlat24 + -6.10351563e-05;\n   
            u_xlat16_37 = max(u_xlat16_37, 0.0);\n    u_xlat16_37 = min(u_xlat16_37,
            100.0);\n    u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_15.xyz + u_xlat16_1.xyz;\n   
            u_xlat16_4.xzw = u_xlat16_6.xyz * u_xlat16_4.xzw + u_xlat7.xyz;\n   
            u_xlat16_37 = min(_AdditionalLightsCount.x, unity_LightData.y);\n   
            u_xlati24 = int(u_xlat16_37);\n    u_xlat16_6.xyz = u_xlat16_4.xzw;\n   
            for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<u_xlati24 ; u_xlati_loop_1++)\n   
            {\n        u_xlat7.x = float(u_xlati_loop_1);\n        u_xlatb19 = u_xlat7.x<2.0;\n       
            u_xlat16_9.xy = (bool(u_xlatb19)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n       
            u_xlat31 = u_xlat7.x + -2.0;\n        u_xlat7.x = (u_xlatb19) ? u_xlat7.x
            : u_xlat31;\n        u_xlatb7 = u_xlat7.x<1.0;\n        u_xlat16_37 =
            (u_xlatb7) ? u_xlat16_9.x : u_xlat16_9.y;\n        u_xlati7 = int(u_xlat16_37);\n       
            u_xlat19.xyz = (-vs_TEXCOORD2.xyz) * _AdditionalLightsPositionDynamicIndex(u_xlati7).www
            + _AdditionalLightsPositionDynamicIndex(u_xlati7).xyz;\n        u_xlat8.x
            = dot(u_xlat19.xyz, u_xlat19.xyz);\n        u_xlat8.x = max(u_xlat8.x,
            6.10351563e-05);\n        u_xlat20 = inversesqrt(u_xlat8.x);\n       
            u_xlat10.xyz = u_xlat19.xyz * vec3(u_xlat20);\n        u_xlat32 = float(1.0)
            / u_xlat8.x;\n        u_xlat8.x = u_xlat8.x * _AdditionalLightsAttenuationDynamicIndex(u_xlati7).x
            + _AdditionalLightsAttenuationDynamicIndex(u_xlati7).y;\n        u_xlat8.x
            = clamp(u_xlat8.x, 0.0, 1.0);\n        u_xlat8.x = u_xlat8.x * u_xlat32;\n       
            u_xlat16_37 = dot(_AdditionalLightsSpotDirDynamicIndex(u_xlati7).xyz,
            u_xlat10.xyz);\n        u_xlat16_37 = u_xlat16_37 * _AdditionalLightsAttenuationDynamicIndex(u_xlati7).z
            + _AdditionalLightsAttenuationDynamicIndex(u_xlati7).w;\n        u_xlat16_37
            = clamp(u_xlat16_37, 0.0, 1.0);\n        u_xlat16_37 = u_xlat16_37 *
            u_xlat16_37;\n        u_xlat8.x = u_xlat16_37 * u_xlat8.x;\n        u_xlati32
            = int(_AdditionalLightsOcclusionProbesDynamicIndex(u_xlati7).x);\n       
            u_xlat32 = dot(unity_ProbesOcclusion, ImmCB_0DynamicIndex(u_xlati32));\n       
            u_xlat16_37 = max(u_xlat32, _AdditionalLightsOcclusionProbesDynamicIndex(u_xlati7).y);\n       
            u_xlat16_37 = u_xlat16_37 * u_xlat8.x;\n        u_xlat16_3 = dot(vs_TEXCOORD3.xyz,
            u_xlat10.xyz);\n        u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);\n       
            u_xlat16_37 = u_xlat16_37 * u_xlat16_3;\n        u_xlat16_9.xyz = vec3(u_xlat16_37)
            * _AdditionalLightsColorDynamicIndex(u_xlati7).xyz;\n        u_xlat7.xyz
            = u_xlat19.xyz * vec3(u_xlat20) + u_xlat14.xyz;\n        u_xlat43 = dot(u_xlat7.xyz,
            u_xlat7.xyz);\n        u_xlat43 = max(u_xlat43, 1.17549435e-38);\n       
            u_xlat43 = inversesqrt(u_xlat43);\n        u_xlat7.xyz = vec3(u_xlat43)
            * u_xlat7.xyz;\n        u_xlat43 = dot(vs_TEXCOORD3.xyz, u_xlat7.xyz);\n       
            u_xlat43 = clamp(u_xlat43, 0.0, 1.0);\n        u_xlat7.x = dot(u_xlat10.xyz,
            u_xlat7.xyz);\n        u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);\n       
            u_xlat19.x = u_xlat43 * u_xlat43;\n        u_xlat19.x = u_xlat19.x *
            u_xlat12 + 1.00001001;\n        u_xlat16_37 = u_xlat7.x * u_xlat7.x;\n       
            u_xlat7.x = u_xlat19.x * u_xlat19.x;\n        u_xlat19.x = max(u_xlat16_37,
            0.100000001);\n        u_xlat7.x = u_xlat19.x * u_xlat7.x;\n        u_xlat7.x
            = u_xlat0 * u_xlat7.x;\n        u_xlat7.x = u_xlat16_16.x / u_xlat7.x;\n       
            u_xlat16_37 = u_xlat7.x + -6.10351563e-05;\n        u_xlat16_37 = max(u_xlat16_37,
            0.0);\n        u_xlat16_37 = min(u_xlat16_37, 100.0);\n        u_xlat16_11.xyz
            = vec3(u_xlat16_37) * u_xlat16_15.xyz + u_xlat16_1.xyz;\n        u_xlat16_6.xyz
            = u_xlat16_11.xyz * u_xlat16_9.xyz + u_xlat16_6.xyz;\n    }\n    SV_Target0.xyz
            = u_xlat16_6.xyz;\n    SV_Target0.w = u_xlat10_0.w * _BaseColor.w + _DrawObjectPassData.w;\n   
            SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 1
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _ADDITIONAL_LIGHTS
          - _MIXED_LIGHTING_SUBTRACTIVE
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nvec4 ImmCB_0[4];\nuniform \tmediump vec4
            _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform
            \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform
            \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tmediump vec4
            _AdditionalLightsOcclusionProbes[32];\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform
            \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform
            \tvec4 unity_ProbesOcclusion;\nuniform \tmediump vec4 unity_SHAr;\nuniform
            \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform
            \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform
            \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform
            \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump
            vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec3
            vs_TEXCOORD5;\nvarying mediump vec4 vs_TEXCOORD6;\nvec3 u_xlat0;\nmediump
            vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nint u_xlati3;\nmediump
            vec3 u_xlat16_4;\nvec3 u_xlat5;\nfloat u_xlat9;\nint u_xlati9;\nbool
            u_xlatb9;\nfloat u_xlat15;\nbool u_xlatb15;\nfloat u_xlat18;\nint u_xlati18;\nmediump
            float u_xlat16_20;\nfloat u_xlat21;\nint u_xlati21;\n#define UNITY_DYNAMIC_INDEX_ES2
            0\n\n\n\nvec4 ImmCB_0DynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n   
            return ImmCB_0[i];\n#else\n#define d_ar ImmCB_0\n    if (i <= 0) return
            d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2];
            else if (i == 3) return d_ar[3];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\nvoid
            main()\n{\nImmCB_0[0] = vec4(1.0,0.0,0.0,0.0);\nImmCB_0[1] = vec4(0.0,1.0,0.0,0.0);\nImmCB_0[2]
            = vec4(0.0,0.0,1.0,0.0);\nImmCB_0[3] = vec4(0.0,0.0,0.0,1.0);\n    u_xlat0.xyz
            = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz
            = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n   
            u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz
            + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1
            = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position
            = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz,
            hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat18 = dot(u_xlat1.xyz,
            u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 1.17549435e-38);\n    u_xlat18
            = inversesqrt(u_xlat18);\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n   
            vs_TEXCOORD5.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat16_2.x
            = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlati18 =
            int(u_xlat16_2.x);\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y
            = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(int u_xlati_loop_1
            = 0 ; u_xlati_loop_1<u_xlati18 ; u_xlati_loop_1++)\n    {\n        u_xlat9
            = float(u_xlati_loop_1);\n        u_xlatb15 = u_xlat9<2.0;\n        u_xlat16_4.xy
            = (bool(u_xlatb15)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n       
            u_xlat21 = u_xlat9 + -2.0;\n        u_xlat9 = (u_xlatb15) ? u_xlat9 :
            u_xlat21;\n        u_xlatb9 = u_xlat9<1.0;\n        u_xlat16_20 = (u_xlatb9)
            ? u_xlat16_4.x : u_xlat16_4.y;\n        u_xlati9 = int(u_xlat16_20);\n       
            u_xlat5.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati9].www
            + _AdditionalLightsPosition[u_xlati9].xyz;\n        u_xlat15 = dot(u_xlat5.xyz,
            u_xlat5.xyz);\n        u_xlat15 = max(u_xlat15, 6.10351563e-05);\n       
            u_xlat21 = inversesqrt(u_xlat15);\n        u_xlat5.xyz = vec3(u_xlat21)
            * u_xlat5.xyz;\n        u_xlat21 = float(1.0) / u_xlat15;\n        u_xlat15
            = u_xlat15 * _AdditionalLightsAttenuation[u_xlati9].x + _AdditionalLightsAttenuation[u_xlati9].y;\n       
            u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n        u_xlat15 = u_xlat15 *
            u_xlat21;\n        u_xlat16_20 = dot(_AdditionalLightsSpotDir[u_xlati9].xyz,
            u_xlat5.xyz);\n        u_xlat16_20 = u_xlat16_20 * _AdditionalLightsAttenuation[u_xlati9].z
            + _AdditionalLightsAttenuation[u_xlati9].w;\n        u_xlat16_20 = clamp(u_xlat16_20,
            0.0, 1.0);\n        u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n       
            u_xlat15 = u_xlat16_20 * u_xlat15;\n        u_xlati21 = int(_AdditionalLightsOcclusionProbes[u_xlati9].x);\n       
            u_xlat21 = dot(unity_ProbesOcclusion, ImmCB_0DynamicIndex(u_xlati21));\n       
            u_xlat16_20 = max(u_xlat21, _AdditionalLightsOcclusionProbes[u_xlati9].y);\n       
            u_xlat16_20 = u_xlat16_20 * u_xlat15;\n        u_xlat16_4.xyz = vec3(u_xlat16_20)
            * _AdditionalLightsColor[u_xlati9].xyz;\n        u_xlat16_20 = dot(u_xlat1.xyz,
            u_xlat5.xyz);\n        u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);\n       
            u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(u_xlat16_20) + u_xlat16_2.xyz;\n   
            }\n    vs_TEXCOORD6.yzw = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat1.w = 1.0;\n    u_xlat16_2.x
            = dot(unity_SHAr, u_xlat1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);\n   
            u_xlat16_2.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_0 = u_xlat1.yzzx
            * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_0);\n   
            u_xlat16_4.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_4.z = dot(unity_SHBb,
            u_xlat16_0);\n    u_xlat16_20 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_20
            = u_xlat1.x * u_xlat1.x + (-u_xlat16_20);\n    u_xlat16_4.xyz = unity_SHC.xyz
            * vec3(u_xlat16_20) + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz
            + u_xlat16_4.xyz;\n    vs_TEXCOORD1.xyz = max(u_xlat16_2.xyz, vec3(0.0,
            0.0, 0.0));\n    vs_TEXCOORD3.xyz = u_xlat1.xyz;\n    vs_TEXCOORD6.x
            = 0.0;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4
            _MainLightColor;\nuniform \tmediump vec4 _DrawObjectPassData;\nuniform
            \tmediump vec4 unity_LightData;\nuniform \tvec4 unity_ProbesOcclusion;\nuniform
            \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tmediump vec4 _BaseColor;\nuniform
            \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform
            lowp sampler2D _BaseMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying
            highp vec2 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying
            highp vec3 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD5;\nvarying mediump
            vec4 vs_TEXCOORD6;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp
            vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec4
            u_xlat16_3;\nmediump float u_xlat16_4;\nlowp vec4 u_xlat10_4;\nmediump
            vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nfloat u_xlat9;\nmediump
            float u_xlat16_10;\nfloat u_xlat21;\nmediump float u_xlat16_22;\nmediump
            float u_xlat16_24;\nvoid main()\n{\n    u_xlat0.x = unity_LightData.z
            * unity_ProbesOcclusion.x;\n    u_xlat16_1.x = dot(vs_TEXCOORD3.xyz,
            _MainLightPosition.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0,
            1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz
            = u_xlat16_1.xxx * _MainLightColor.xyz;\n    u_xlat0.x = dot(vs_TEXCOORD5.xyz,
            vs_TEXCOORD5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);\n   
            u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat7.xyz = u_xlat0.xxx *
            vs_TEXCOORD5.xyz;\n    u_xlat2.xyz = vs_TEXCOORD5.xyz * u_xlat0.xxx +
            _MainLightPosition.xyz;\n    u_xlat16_22 = dot((-u_xlat7.xyz), vs_TEXCOORD3.xyz);\n   
            u_xlat16_22 = u_xlat16_22 + u_xlat16_22;\n    u_xlat16_3.xyz = vs_TEXCOORD3.xyz
            * (-vec3(u_xlat16_22)) + (-u_xlat7.xyz);\n    u_xlat16_22 = dot(vs_TEXCOORD3.xyz,
            u_xlat7.xyz);\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_22
            = (-u_xlat16_22) + 1.0;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n   
            u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_24 = (-_Smoothness)
            + 1.0;\n    u_xlat16_4 = (-u_xlat16_24) * 0.699999988 + 1.70000005;\n   
            u_xlat16_4 = u_xlat16_24 * u_xlat16_4;\n    u_xlat16_3.w = u_xlat16_24
            * u_xlat16_24;\n    u_xlat16_4 = u_xlat16_4 * 6.0;\n    u_xlat10_0 =
            textureCube(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_4);\n    u_xlat16_3.x
            = u_xlat10_0.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x
            + 1.0;\n    u_xlat16_3.xw = max(u_xlat16_3.xw, vec2(0.0, 6.10351563e-05));\n   
            u_xlat16_3.x = log2(u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat16_3.x *
            unity_SpecCube0_HDR.y;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.x
            = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat10_0.xyz
            * u_xlat16_3.xxx;\n    u_xlat16_4 = u_xlat16_3.w * u_xlat16_3.w + 1.0;\n   
            u_xlat16_4 = float(1.0) / u_xlat16_4;\n    u_xlat0.xyz = u_xlat16_3.xyz
            * vec3(u_xlat16_4);\n    u_xlat16_3.x = (-_Metallic) * 0.959999979 +
            0.959999979;\n    u_xlat16_10 = (-u_xlat16_3.x) + _Smoothness;\n    u_xlat16_10
            = u_xlat16_10 + 1.0;\n    u_xlat16_10 = clamp(u_xlat16_10, 0.0, 1.0);\n   
            u_xlat10_4 = texture2D(_BaseMap, vs_TEXCOORD0.xy);\n    u_xlat16_5.xyz
            = u_xlat10_4.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991,
            -0.0399999991);\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic,
            _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n   
            u_xlat16_6.xyz = vec3(u_xlat16_10) + (-u_xlat16_5.xyz);\n    u_xlat16_6.xyz
            = vec3(u_xlat16_22) * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat0.xyz
            = u_xlat0.xyz * u_xlat16_6.xyz;\n    u_xlat16_6.xyz = u_xlat10_4.xyz
            * _BaseColor.xyz;\n    SV_Target0.w = u_xlat10_4.w * _BaseColor.w + _DrawObjectPassData.w;\n   
            SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);\n    u_xlat16_3.xyz = u_xlat16_3.xxx
            * u_xlat16_6.xyz;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz * u_xlat16_3.xyz
            + u_xlat0.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21
            = max(u_xlat21, 1.17549435e-38);\n    u_xlat21 = inversesqrt(u_xlat21);\n   
            u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(_MainLightPosition.xyz,
            u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat2.x
            = dot(vs_TEXCOORD3.xyz, u_xlat2.xyz);\n    u_xlat2.x = clamp(u_xlat2.x,
            0.0, 1.0);\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat16_22 =
            u_xlat21 * u_xlat21;\n    u_xlat21 = max(u_xlat16_22, 0.100000001);\n   
            u_xlat9 = u_xlat16_3.w * u_xlat16_3.w + -1.0;\n    u_xlat2.x = u_xlat2.x
            * u_xlat9 + 1.00001001;\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n   
            u_xlat21 = u_xlat21 * u_xlat2.x;\n    u_xlat2.x = u_xlat16_3.w * 4.0
            + 2.0;\n    u_xlat16_22 = u_xlat16_3.w * u_xlat16_3.w;\n    u_xlat21
            = u_xlat21 * u_xlat2.x;\n    u_xlat21 = u_xlat16_22 / u_xlat21;\n   
            u_xlat16_22 = u_xlat21 + -6.10351563e-05;\n    u_xlat16_22 = max(u_xlat16_22,
            0.0);\n    u_xlat16_22 = min(u_xlat16_22, 100.0);\n    u_xlat16_5.xyz
            = vec3(u_xlat16_22) * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    u_xlat16_1.xyz
            = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat0.xyz;\n    SV_Target0.xyz
            = vs_TEXCOORD6.yzw * u_xlat16_3.xyz + u_xlat16_1.xyz;\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 5
          PassId: 0
          SubShaderIndex: 0
          Keywords:
          - _ADDITIONAL_LIGHTS_VERTEX
          - _MIXED_LIGHTING_SUBTRACTIVE
          Tags:
          - Key: LIGHTMODE
            Value: UniversalForward
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        definedKeywords:
        - LIGHTMAP_ON
        - DIRLIGHTMAP_COMBINED
        - FOG_LINEAR
        - FOG_EXP
        - FOG_EXP2
        - _EMISSION
        - INSTANCING_ON
        - _ADDITIONAL_LIGHTS
        - _ADDITIONAL_LIGHT_SHADOWS
        - _MAIN_LIGHT_SHADOWS
        - _MAIN_LIGHT_SHADOWS_CASCADE
        - _SHADOWS_SOFT
        - _NORMALMAP
        - _ALPHATEST_ON
        - _ALPHAPREMULTIPLY_ON
        - _METALLICSPECGLOSSMAP
        - _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
        - _OCCLUSIONMAP
        - _SPECULARHIGHLIGHTS_OFF
        - _ENVIRONMENTREFLECTIONS_OFF
        - _SPECULAR_SETUP
        - _RECEIVE_SHADOWS_OFF
        - _ADDITIONAL_LIGHTS_VERTEX
        - _MIXED_LIGHTING_SUBTRACTIVE
        keywordGroups:
        - Keywords:
          - _
          - _NORMALMAP
        - Keywords:
          - _
          - _ALPHATEST_ON
        - Keywords:
          - _
          - _ALPHAPREMULTIPLY_ON
        - Keywords:
          - _
          - _EMISSION
        - Keywords:
          - _
          - _METALLICSPECGLOSSMAP
        - Keywords:
          - _
          - _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
        - Keywords:
          - _
          - _OCCLUSIONMAP
        - Keywords:
          - _
          - _SPECULARHIGHLIGHTS_OFF
        - Keywords:
          - _
          - _ENVIRONMENTREFLECTIONS_OFF
        - Keywords:
          - _
          - _SPECULAR_SETUP
        - Keywords:
          - _
          - _RECEIVE_SHADOWS_OFF
        - Keywords:
          - _
          - _MAIN_LIGHT_SHADOWS
        - Keywords:
          - _
          - _MAIN_LIGHT_SHADOWS_CASCADE
        - Keywords:
          - _
          - _ADDITIONAL_LIGHTS_VERTEX
          - _ADDITIONAL_LIGHTS
        - Keywords:
          - _
          - _ADDITIONAL_LIGHT_SHADOWS
        - Keywords:
          - _
          - _SHADOWS_SOFT
        - Keywords:
          - _
          - _MIXED_LIGHTING_SUBTRACTIVE
        - Keywords:
          - _
          - DIRLIGHTMAP_COMBINED
        - Keywords:
          - _
          - LIGHTMAP_ON
        - Keywords:
          - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - Keywords:
          - __
          - INSTANCING_ON
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 0
        SubShaderIndex: 0
        SerializedObjectId: 0
        Tags:
        - Key: LIGHTMODE
          Value: UniversalForward
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        - Key: RENDERPIPELINE
          Value: UniversalPipeline
        UsePass: 0
      - ShaderVariants:
        - NoShaderVariant: 0
          VertexProgram: "#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform
            \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform
            \tvec4 _BaseMap_ST;\nuniform \tvec4 _ShadowBias;\nuniform \tvec3 _LightDirection;\nattribute
            highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute
            highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4
            u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy
            * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy
            * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz
            * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz
            * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n   
            u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;\n   
            u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n   
            u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n   
            u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n   
            u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = max(u_xlat6,
            1.17549435e-38);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat1.xyz
            = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat6 = dot(_LightDirection.xyz,
            u_xlat1.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 =
            (-u_xlat6) + 1.0;\n    u_xlat6 = u_xlat6 * _ShadowBias.y;\n    u_xlat0.xyz
            = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy
            * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0]
            * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2]
            * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n   
            gl_Position.z = max((-u_xlat0.w), u_xlat0.z);\n    gl_Position.xyw =
            u_xlat0.xyw;\n    return;\n}\n\n"
          FragmentProgram: "#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n   
            precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision
            highp int;\n#define SV_TARGET0 gl_FragData[0]\nvoid main()\n{\n    SV_TARGET0
            = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"
          LOD: 300
          readDepth: 0
          Index: 6
          PassId: 1
          SubShaderIndex: 0
          Keywords: []
          Tags:
          - Key: LIGHTMODE
            Value: SHADOWCASTER
          - Key: IGNOREPROJECTOR
            Value: true
          - Key: RENDERTYPE
            Value: Opaque
          - Key: RENDERPIPELINE
            Value: UniversalPipeline
        definedKeywords:
        - INSTANCING_ON
        - _ALPHATEST_ON
        - _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
        keywordGroups:
        - Keywords:
          - _
          - _ALPHATEST_ON
        - Keywords:
          - _
          - _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
        - Keywords:
          - __
          - INSTANCING_ON
        ContainsInvalidVariant: 0
        HasDepthReader: 0
        Id: 1
        SubShaderIndex: 0
        SerializedObjectId: 1
        Tags:
        - Key: LIGHTMODE
          Value: SHADOWCASTER
        - Key: IGNOREPROJECTOR
          Value: true
        - Key: RENDERTYPE
          Value: Opaque
        - Key: RENDERPIPELINE
          Value: UniversalPipeline
        UsePass: 0
      Tags:
      - Key: IGNOREPROJECTOR
        Value: true
      - Key: RENDERTYPE
        Value: Opaque
      - Key: RENDERPIPELINE
        Value: UniversalPipeline
      SerializedPassCount: 5
      UsePass: 0
    Shader: {fileID: 4800000, guid: 933532a4fcc9baf4fa0491de14d08ed7, type: 3}
    ShaderPath: Packages/com.unity.render-pipelines.universal/Shaders/Lit.shader
    ShaderDefinedKeywords:
    - LIGHTMAP_ON
    - DIRLIGHTMAP_COMBINED
    - FOG_LINEAR
    - FOG_EXP
    - FOG_EXP2
    - _EMISSION
    - _ADDITIONAL_LIGHTS
    - _NORMALMAP
    - _ALPHATEST_ON
    - _ALPHAPREMULTIPLY_ON
    - _METALLICSPECGLOSSMAP
    - _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
    - _OCCLUSIONMAP
    - _SPECULARHIGHLIGHTS_OFF
    - _ENVIRONMENTREFLECTIONS_OFF
    - _SPECULAR_SETUP
    - _RECEIVE_SHADOWS_OFF
    - _ADDITIONAL_LIGHTS_VERTEX
    - _MIXED_LIGHTING_SUBTRACTIVE
    - _SPECGLOSSMAP
  _modifiedShaders:
  - Assets/Shader/Blur/Blur.shadergraph
